
LUFA_PROJECTS_AVRISPMKII_BETABOARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00002ee6  00002f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ee6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800180  00800180  0000301a  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000301a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004e0  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009420  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021e9  00000000  00000000  0000c98c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000110f9  00000000  00000000  0000eb75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001198  00000000  00000000  0001fc70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00019de8  00000000  00000000  00020e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006700  00000000  00000000  0003abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fa8  00000000  00000000  000412f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a8fd  00000000  00000000  00042298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	2f c1       	rjmp	.+606    	; 0x264 <__bad_interrupt>
       6:	00 00       	nop
       8:	2d c1       	rjmp	.+602    	; 0x264 <__bad_interrupt>
       a:	00 00       	nop
       c:	2b c1       	rjmp	.+598    	; 0x264 <__bad_interrupt>
       e:	00 00       	nop
      10:	29 c1       	rjmp	.+594    	; 0x264 <__bad_interrupt>
      12:	00 00       	nop
      14:	27 c1       	rjmp	.+590    	; 0x264 <__bad_interrupt>
      16:	00 00       	nop
      18:	25 c1       	rjmp	.+586    	; 0x264 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	23 c1       	rjmp	.+582    	; 0x264 <__bad_interrupt>
      1e:	00 00       	nop
      20:	21 c1       	rjmp	.+578    	; 0x264 <__bad_interrupt>
      22:	00 00       	nop
      24:	1f c1       	rjmp	.+574    	; 0x264 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__vector_10>
      2c:	1b c1       	rjmp	.+566    	; 0x264 <__bad_interrupt>
      2e:	00 00       	nop
      30:	19 c1       	rjmp	.+562    	; 0x264 <__bad_interrupt>
      32:	00 00       	nop
      34:	17 c1       	rjmp	.+558    	; 0x264 <__bad_interrupt>
      36:	00 00       	nop
      38:	15 c1       	rjmp	.+554    	; 0x264 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	13 c1       	rjmp	.+550    	; 0x264 <__bad_interrupt>
      3e:	00 00       	nop
      40:	11 c1       	rjmp	.+546    	; 0x264 <__bad_interrupt>
      42:	00 00       	nop
      44:	71 c7       	rjmp	.+3810   	; 0xf28 <__vector_17>
      46:	00 00       	nop
      48:	0d c1       	rjmp	.+538    	; 0x264 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0b c1       	rjmp	.+534    	; 0x264 <__bad_interrupt>
      4e:	00 00       	nop
      50:	09 c1       	rjmp	.+530    	; 0x264 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_21>
      58:	05 c1       	rjmp	.+522    	; 0x264 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	03 c1       	rjmp	.+518    	; 0x264 <__bad_interrupt>
      5e:	00 00       	nop
      60:	01 c1       	rjmp	.+514    	; 0x264 <__bad_interrupt>
      62:	00 00       	nop
      64:	ff c0       	rjmp	.+510    	; 0x264 <__bad_interrupt>
      66:	00 00       	nop
      68:	fd c0       	rjmp	.+506    	; 0x264 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fb c0       	rjmp	.+502    	; 0x264 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f9 c0       	rjmp	.+498    	; 0x264 <__bad_interrupt>
      72:	00 00       	nop
      74:	f7 c0       	rjmp	.+494    	; 0x264 <__bad_interrupt>
      76:	00 00       	nop
      78:	f5 c0       	rjmp	.+490    	; 0x264 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f3 c0       	rjmp	.+486    	; 0x264 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f1 c0       	rjmp	.+482    	; 0x264 <__bad_interrupt>
      82:	00 00       	nop
      84:	ef c0       	rjmp	.+478    	; 0x264 <__bad_interrupt>
      86:	00 00       	nop
      88:	ed c0       	rjmp	.+474    	; 0x264 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	eb c0       	rjmp	.+470    	; 0x264 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e9 c0       	rjmp	.+466    	; 0x264 <__bad_interrupt>
      92:	00 00       	nop
      94:	e7 c0       	rjmp	.+462    	; 0x264 <__bad_interrupt>
      96:	00 00       	nop
      98:	e5 c0       	rjmp	.+458    	; 0x264 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e3 c0       	rjmp	.+454    	; 0x264 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e1 c0       	rjmp	.+450    	; 0x264 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	df c0       	rjmp	.+446    	; 0x264 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	dd c0       	rjmp	.+442    	; 0x264 <__bad_interrupt>
	...

000000ac <AVRISP_ProductString>:
      ac:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
      bc:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

000000c6 <AVRISP_ManufacturerString>:
      c6:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

000000d4 <AVRISP_LanguageString>:
      d4:	04 03 09 04                                         ....

000000d8 <AVRISP_DeviceDescriptor>:
      d8:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
      e8:	03 01                                               ..

000000ea <TimerCompareFromSCKDuration>:
      ea:	09 00 0a 00 0a 00 0b 00 0c 00 0d 00 0d 00 0e 00     ................
      fa:	0f 00 10 00 10 00 12 00 13 00 13 00 14 00 16 00     ................
     10a:	16 00 18 00 19 00 1a 00 1c 00 1d 00 1f 00 20 00     .............. .
     11a:	22 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     ".#.%.'.).+...0.
     12a:	32 00 34 00 37 00 3a 00 3d 00 40 00 43 00 46 00     2.4.7.:.=.@.C.F.
     13a:	4a 00 4e 00 52 00 55 00 5a 00 5e 00 63 00 68 00     J.N.R.U.Z.^.c.h.
     14a:	6d 00 73 00 78 00 7e 00 84 00 8b 00 91 00 99 00     m.s.x.~.........
     15a:	a0 00 a9 00 b1 00 b9 00 c3 00 cc 00 d6 00 e1 00     ................
     16a:	ec 00 f7 00 04 01 11 01 1e 01 2d 01 3b 01 4b 01     ..........-.;.K.
     17a:	5b 01 6c 01 7d 01 91 01 a5 01 ba 01 cf 01 e6 01     [.l.}...........
     18a:	fe 01 16 02 31 02 4c 02 6a 02 88 02 a8 02 ca 02     ....1.L.j.......
     19a:	ed 02 11 03 38 03 60 03 8b 03 b8 03 e7 03 18 04     ....8.`.........
     1aa:	4b 04 81 04 b9 04 f5 04 34 05 75 05 b9 05 01 06     K.......4.u.....
     1ba:	4e 06 9d 06 ef 06 48 07 a3 07 04 08 65 08 d0 08     N.....H.....e...
     1ca:	40 09 b6 09 2b 0a ab 0a 30 0b c3 0b 51 0c ee 0c     @...+...0...Q...
     1da:	8f 0d 40 0e f6 0e af 0f 68 10 47 11 14 12 f5 12     ..@.....h.G.....
     1ea:	ed 13 e2 14 f0 15 f9 16 1b 18 5c 19 91 1a e5 1b     ..........\.....
     1fa:	25 1d 83 1e 03 20 ab 21 30 23 32 25 0f 27 f1 28     %.... .!0#2%.'.(
     20a:	f8 2a 1a 2d 49 2f a1 31 14 34 a1 36 45 39 17 3c     .*.-I/.1.4.6E9.<
     21a:	1a 3f 34 42 60 45 df 48 70 4c                       .?4B`E.HpL

00000224 <SPIMaskFromSCKDuration>:
     224:	40 00 41 01 42 43 03 00                             @.A.BC..

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e6 ee       	ldi	r30, 0xE6	; 230
     240:	fe e2       	ldi	r31, 0x2E	; 46
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a0 38       	cpi	r26, 0x80	; 128
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	a0 e8       	ldi	r26, 0x80	; 128
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a3 39       	cpi	r26, 0x93	; 147
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	52 d0       	rcall	.+164    	; 0x304 <main>
     260:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <_exit>

00000264 <__bad_interrupt>:
     264:	cd ce       	rjmp	.-614    	; 0x0 <__vectors>

00000266 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     266:	84 b7       	in	r24, 0x34	; 52
     268:	87 7f       	andi	r24, 0xF7	; 247
     26a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	a8 95       	wdr
     272:	80 91 60 00 	lds	r24, 0x0060
     276:	88 61       	ori	r24, 0x18	; 24
     278:	80 93 60 00 	sts	0x0060, r24
     27c:	10 92 60 00 	sts	0x0060, r1
     280:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	80 e8       	ldi	r24, 0x80	; 128
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	80 93 61 00 	sts	0x0061, r24
     28e:	90 93 61 00 	sts	0x0061, r25
     292:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     294:	8a b1       	in	r24, 0x0a	; 10
     296:	80 6f       	ori	r24, 0xF0	; 240
     298:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     29a:	8b b1       	in	r24, 0x0b	; 11
     29c:	8f 70       	andi	r24, 0x0F	; 15
     29e:	8b b9       	out	0x0b, r24	; 11
	#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
	UpdateCurrentCompatibilityMode();
	#endif

	/* USB Stack Initialization */
	USB_Init();
     2a0:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <USB_Init>
     2a4:	08 95       	ret

000002a6 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2a6:	8b b1       	in	r24, 0x0b	; 11
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	80 63       	ori	r24, 0x30	; 48
     2ac:	8b b9       	out	0x0b, r24	; 11
     2ae:	08 95       	ret

000002b0 <EVENT_USB_Device_Disconnect>:
     2b0:	8b b1       	in	r24, 0x0b	; 11
     2b2:	8f 70       	andi	r24, 0x0F	; 15
     2b4:	80 61       	ori	r24, 0x10	; 16
     2b6:	8b b9       	out	0x0b, r24	; 11
     2b8:	08 95       	ret

000002ba <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     2ba:	42 e3       	ldi	r20, 0x32	; 50
     2bc:	60 e8       	ldi	r22, 0x80	; 128
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0e 94 9b 14 	call	0x2936	; 0x2936 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup AVRISP Data IN endpoint if it is using a physically different endpoint */
	if ((AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK) != (AVRISP_DATA_OUT_EPADDR & ENDPOINT_EPNUM_MASK))
	  ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2c4:	81 11       	cpse	r24, r1
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x12>
     2c8:	90 e1       	ldi	r25, 0x10	; 16
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <EVENT_USB_Device_ConfigurationChanged+0x14>
     2cc:	90 e2       	ldi	r25, 0x20	; 32
     2ce:	8b b1       	in	r24, 0x0b	; 11
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	89 2b       	or	r24, r25
     2d4:	8b b9       	out	0x0b, r24	; 11
     2d6:	08 95       	ret

000002d8 <AVRISP_Task>:

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     2d8:	8e b3       	in	r24, 0x1e	; 30
     2da:	84 30       	cpi	r24, 0x04	; 4
     2dc:	91 f4       	brne	.+36     	; 0x302 <AVRISP_Task+0x2a>
	  return;

	V2Params_UpdateParamValues();
     2de:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2e8:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     2ec:	82 ff       	sbrs	r24, 2
     2ee:	09 c0       	rjmp	.+18     	; 0x302 <AVRISP_Task+0x2a>
     2f0:	8b b1       	in	r24, 0x0b	; 11
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	80 63       	ori	r24, 0x30	; 48
     2f6:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     2f8:	d3 d7       	rcall	.+4006   	; 0x12a0 <V2Protocol_ProcessCommand>
     2fa:	8b b1       	in	r24, 0x0b	; 11
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	80 62       	ori	r24, 0x20	; 32
     300:	8b b9       	out	0x0b, r24	; 11
     302:	08 95       	ret

00000304 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     304:	b0 df       	rcall	.-160    	; 0x266 <SetupHardware>
	V2Protocol_Init();
     306:	c3 d7       	rcall	.+3974   	; 0x128e <V2Protocol_Init>
     308:	8b b1       	in	r24, 0x0b	; 11
     30a:	8f 70       	andi	r24, 0x0F	; 15
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     310:	78 94       	sei
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
		#endif

		AVRISP_Task();
     312:	e2 df       	rcall	.-60     	; 0x2d8 <AVRISP_Task>
		USB_USBTask();
     314:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <USB_USBTask>
	}
     318:	fc cf       	rjmp	.-8      	; 0x312 <main+0xe>

0000031a <CALLBACK_USB_GetDescriptor>:
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress,
                                    uint8_t* DescriptorMemorySpace)
{
	return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress, DescriptorMemorySpace);
     31a:	01 c0       	rjmp	.+2      	; 0x31e <AVRISP_GetDescriptor>
}
     31c:	08 95       	ret

0000031e <AVRISP_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     31e:	f9 01       	movw	r30, r18
     320:	10 82       	st	Z, r1
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress,
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     322:	69 2f       	mov	r22, r25
     324:	77 27       	eor	r23, r23
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
     326:	62 30       	cpi	r22, 0x02	; 2
     328:	71 05       	cpc	r23, r1
     32a:	61 f0       	breq	.+24     	; 0x344 <AVRISP_GetDescriptor+0x26>
     32c:	63 30       	cpi	r22, 0x03	; 3
     32e:	71 05       	cpc	r23, r1
     330:	89 f0       	breq	.+34     	; 0x354 <AVRISP_GetDescriptor+0x36>
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	71 05       	cpc	r23, r1
     336:	09 f0       	breq	.+2      	; 0x33a <AVRISP_GetDescriptor+0x1c>
     338:	3b c0       	rjmp	.+118    	; 0x3b0 <AVRISP_GetDescriptor+0x92>
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     33a:	82 e1       	ldi	r24, 0x12	; 18
     33c:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     33e:	28 ed       	ldi	r18, 0xD8	; 216
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			*DescriptorMemorySpace = MEMSPACE_RAM;
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	f9 01       	movw	r30, r18
     348:	80 83       	st	Z, r24
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     34a:	80 e2       	ldi	r24, 0x20	; 32
     34c:	90 e0       	ldi	r25, 0x00	; 0
			#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
     34e:	2e e1       	ldi	r18, 0x1E	; 30
     350:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     352:	37 c0       	rjmp	.+110    	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
     354:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	91 05       	cpc	r25, r1
     35a:	81 f0       	breq	.+32     	; 0x37c <AVRISP_GetDescriptor+0x5e>
     35c:	1c f4       	brge	.+6      	; 0x364 <AVRISP_GetDescriptor+0x46>
     35e:	89 2b       	or	r24, r25
     360:	39 f0       	breq	.+14     	; 0x370 <AVRISP_GetDescriptor+0x52>
     362:	2b c0       	rjmp	.+86     	; 0x3ba <AVRISP_GetDescriptor+0x9c>
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	91 05       	cpc	r25, r1
     368:	79 f0       	breq	.+30     	; 0x388 <AVRISP_GetDescriptor+0x6a>
     36a:	03 97       	sbiw	r24, 0x03	; 3
     36c:	99 f0       	breq	.+38     	; 0x394 <AVRISP_GetDescriptor+0x76>
     36e:	25 c0       	rjmp	.+74     	; 0x3ba <AVRISP_GetDescriptor+0x9c>
			{
				case AVRISP_STRING_ID_Language:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     370:	e4 ed       	ldi	r30, 0xD4	; 212
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	84 91       	lpm	r24, Z
     376:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case AVRISP_STRING_ID_Language:
					Address = &AVRISP_LanguageString;
     378:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
					break;
     37a:	23 c0       	rjmp	.+70     	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
				case AVRISP_STRING_ID_Manufacturer:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     37c:	e6 ec       	ldi	r30, 0xC6	; 198
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	84 91       	lpm	r24, Z
     382:	90 e0       	ldi	r25, 0x00	; 0
				case AVRISP_STRING_ID_Language:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
					break;
				case AVRISP_STRING_ID_Manufacturer:
					Address = &AVRISP_ManufacturerString;
     384:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
					break;
     386:	1d c0       	rjmp	.+58     	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
				case AVRISP_STRING_ID_Product:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     388:	ec ea       	ldi	r30, 0xAC	; 172
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	84 91       	lpm	r24, Z
     38e:	90 e0       	ldi	r25, 0x00	; 0
				case AVRISP_STRING_ID_Manufacturer:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
					break;
				case AVRISP_STRING_ID_Product:
					Address = &AVRISP_ProductString;
     390:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
     392:	17 c0       	rjmp	.+46     	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
				case AVRISP_STRING_ID_Serial:
					Address = &AVRISP_SerialString;
					Size    = AVRISP_SerialString.Header.Size;
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	80 81       	ld	r24, Z
     39a:	90 e0       	ldi	r25, 0x00	; 0

					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
     39c:	62 e3       	ldi	r22, 0x32	; 50
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	77 87       	std	Z+15, r23	; 0x0f
     3a2:	66 87       	std	Z+14, r22	; 0x0e

					*DescriptorMemorySpace = MEMSPACE_RAM;
     3a4:	62 e0       	ldi	r22, 0x02	; 2
     3a6:	f9 01       	movw	r30, r18
     3a8:	60 83       	st	Z, r22
				case AVRISP_STRING_ID_Product:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case AVRISP_STRING_ID_Serial:
					Address = &AVRISP_SerialString;
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	31 e0       	ldi	r19, 0x01	; 1

					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));

					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
     3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <AVRISP_GetDescriptor+0xa4>
	uint16_t    Size    = NO_DESCRIPTOR;
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3c2:	fa 01       	movw	r30, r20
     3c4:	31 83       	std	Z+1, r19	; 0x01
     3c6:	20 83       	st	Z, r18
	return Size;
}
     3c8:	08 95       	ret

000003ca <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     3ca:	2f 92       	push	r2
     3cc:	3f 92       	push	r3
     3ce:	4f 92       	push	r4
     3d0:	5f 92       	push	r5
     3d2:	6f 92       	push	r6
     3d4:	7f 92       	push	r7
     3d6:	8f 92       	push	r8
     3d8:	9f 92       	push	r9
     3da:	af 92       	push	r10
     3dc:	bf 92       	push	r11
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	cd 50       	subi	r28, 0x0D	; 13
     3f4:	d1 40       	sbci	r29, 0x01	; 1
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	b8 2e       	mov	r11, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	69 e0       	ldi	r22, 0x09	; 9
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     412:	6a 81       	ldd	r22, Y+2	; 0x02
     414:	79 81       	ldd	r23, Y+1	; 0x01
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     416:	7a 83       	std	Y+2, r23	; 0x02
     418:	69 83       	std	Y+1, r22	; 0x01

	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     41a:	61 30       	cpi	r22, 0x01	; 1
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	72 07       	cpc	r23, r18
     420:	b0 f0       	brcs	.+44     	; 0x44e <ISPProtocol_ProgramMemory+0x84>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     422:	e8 ee       	ldi	r30, 0xE8	; 232
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8b 77       	andi	r24, 0x7B	; 123
     42a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     432:	ac ee       	ldi	r26, 0xEC	; 236
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	8c 91       	ld	r24, X
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     43c:	a1 ef       	ldi	r26, 0xF1	; 241
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	bc 92       	st	X, r11
     442:	80 ec       	ldi	r24, 0xC0	; 192
     444:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     446:	80 81       	ld	r24, Z
     448:	8e 77       	andi	r24, 0x7E	; 126
     44a:	80 83       	st	Z, r24
     44c:	85 c1       	rjmp	.+778    	; 0x758 <ISPProtocol_ProgramMemory+0x38e>
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	ce 01       	movw	r24, r28
     454:	0a 96       	adiw	r24, 0x0a	; 10
     456:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0a 96       	adiw	r24, 0x0a	; 10
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
     460:	8f 73       	andi	r24, 0x3F	; 63
     462:	99 27       	eor	r25, r25

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     464:	89 2b       	or	r24, r25
     466:	39 f4       	brne	.+14     	; 0x476 <ISPProtocol_ProgramMemory+0xac>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     468:	e8 ee       	ldi	r30, 0xE8	; 232
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8b 77       	andi	r24, 0x7B	; 123
     470:	80 83       	st	Z, r24
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     472:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
     476:	e8 ee       	ldi	r30, 0xE8	; 232
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	8b 77       	andi	r24, 0x7B	; 123
     47e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     486:	ec ee       	ldi	r30, 0xEC	; 236
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
     490:	33 e1       	ldi	r19, 0x13	; 19
     492:	b3 12       	cpse	r11, r19
     494:	02 c0       	rjmp	.+4      	; 0x49a <ISPProtocol_ProgramMemory+0xd0>
     496:	a8 84       	ldd	r10, Y+8	; 0x08
     498:	01 c0       	rjmp	.+2      	; 0x49c <ISPProtocol_ProgramMemory+0xd2>
     49a:	a9 84       	ldd	r10, Y+9	; 0x09
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     49c:	80 91 84 01 	lds	r24, 0x0184
     4a0:	90 91 85 01 	lds	r25, 0x0185
     4a4:	a0 91 86 01 	lds	r26, 0x0186
     4a8:	b0 91 87 01 	lds	r27, 0x0187
     4ac:	c6 5f       	subi	r28, 0xF6	; 246
     4ae:	de 4f       	sbci	r29, 0xFE	; 254
     4b0:	88 83       	st	Y, r24
     4b2:	99 83       	std	Y+1, r25	; 0x01
     4b4:	aa 83       	std	Y+2, r26	; 0x02
     4b6:	bb 83       	std	Y+3, r27	; 0x03
     4b8:	ca 50       	subi	r28, 0x0A	; 10
     4ba:	d1 40       	sbci	r29, 0x01	; 1

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	89 2b       	or	r24, r25
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <ISPProtocol_ProgramMemory+0xfc>
     4c4:	bf c0       	rjmp	.+382    	; 0x644 <ISPProtocol_ProgramMemory+0x27a>
     4c6:	4e 01       	movw	r8, r28
     4c8:	9a e0       	ldi	r25, 0x0A	; 10
     4ca:	89 0e       	add	r8, r25
     4cc:	91 1c       	adc	r9, r1
     4ce:	e1 2c       	mov	r14, r1
     4d0:	f1 2c       	mov	r15, r1
     4d2:	c1 2c       	mov	r12, r1
     4d4:	d1 2c       	mov	r13, r1
			MustLoadExtendedAddress = false;
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
		ISPTarget_SendByte(CurrentAddress >> 8);
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f4 e8       	ldi	r31, 0x84	; 132
     4da:	6f 2e       	mov	r6, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	7f 2e       	mov	r7, r31
     4e0:	f0 2d       	mov	r31, r0
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     4e2:	68 94       	set
     4e4:	22 24       	eor	r2, r2
     4e6:	23 f8       	bld	r2, 3
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     4e8:	33 24       	eor	r3, r3
     4ea:	33 94       	inc	r3
			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     4ec:	41 2c       	mov	r4, r1
     4ee:	51 2c       	mov	r5, r1
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     4f0:	d4 01       	movw	r26, r8
     4f2:	0d 91       	ld	r16, X+
     4f4:	4d 01       	movw	r8, r26
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     4f6:	1b 81       	ldd	r17, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     4f8:	80 91 83 01 	lds	r24, 0x0183
     4fc:	88 23       	and	r24, r24
     4fe:	19 f0       	breq	.+6      	; 0x506 <ISPProtocol_ProgramMemory+0x13c>
		{
			ISPTarget_LoadExtendedAddress();
     500:	13 d6       	rcall	.+3110   	; 0x1128 <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     502:	10 92 83 01 	sts	0x0183, r1
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     506:	8d 81       	ldd	r24, Y+5	; 0x05
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     508:	90 91 3e 01 	lds	r25, 0x013E
     50c:	99 23       	and	r25, r25
     50e:	29 f0       	breq	.+10     	; 0x51a <ISPProtocol_ProgramMemory+0x150>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     510:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     512:	0d b4       	in	r0, 0x2d	; 45
     514:	07 fe       	sbrs	r0, 7
     516:	fd cf       	rjmp	.-6      	; 0x512 <ISPProtocol_ProgramMemory+0x148>
     518:	01 c0       	rjmp	.+2      	; 0x51c <ISPProtocol_ProgramMemory+0x152>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     51a:	9f d5       	rcall	.+2878   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     51c:	80 91 84 01 	lds	r24, 0x0184
     520:	90 91 85 01 	lds	r25, 0x0185
     524:	a0 91 86 01 	lds	r26, 0x0186
     528:	b0 91 87 01 	lds	r27, 0x0187
     52c:	89 2f       	mov	r24, r25
     52e:	9a 2f       	mov	r25, r26
     530:	ab 2f       	mov	r26, r27
     532:	bb 27       	eor	r27, r27
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     534:	20 91 3e 01 	lds	r18, 0x013E
     538:	22 23       	and	r18, r18
     53a:	29 f0       	breq	.+10     	; 0x546 <ISPProtocol_ProgramMemory+0x17c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     53c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     53e:	0d b4       	in	r0, 0x2d	; 45
     540:	07 fe       	sbrs	r0, 7
     542:	fd cf       	rjmp	.-6      	; 0x53e <ISPProtocol_ProgramMemory+0x174>
     544:	01 c0       	rjmp	.+2      	; 0x548 <ISPProtocol_ProgramMemory+0x17e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     546:	89 d5       	rcall	.+2834   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     548:	f3 01       	movw	r30, r6
     54a:	80 81       	ld	r24, Z
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     54c:	90 91 3e 01 	lds	r25, 0x013E
     550:	99 23       	and	r25, r25
     552:	29 f0       	breq	.+10     	; 0x55e <ISPProtocol_ProgramMemory+0x194>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     554:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     556:	0d b4       	in	r0, 0x2d	; 45
     558:	07 fe       	sbrs	r0, 7
     55a:	fd cf       	rjmp	.-6      	; 0x556 <ISPProtocol_ProgramMemory+0x18c>
     55c:	01 c0       	rjmp	.+2      	; 0x560 <ISPProtocol_ProgramMemory+0x196>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     55e:	7d d5       	rcall	.+2810   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     560:	80 91 3e 01 	lds	r24, 0x013E
     564:	88 23       	and	r24, r24
     566:	29 f0       	breq	.+10     	; 0x572 <ISPProtocol_ProgramMemory+0x1a8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     568:	0e bd       	out	0x2e, r16	; 46
				while (!(SPSR & (1 << SPIF)));
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <ISPProtocol_ProgramMemory+0x1a0>
     570:	02 c0       	rjmp	.+4      	; 0x576 <ISPProtocol_ProgramMemory+0x1ac>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     572:	80 2f       	mov	r24, r16
     574:	72 d5       	rcall	.+2788   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     576:	f3 e1       	ldi	r31, 0x13	; 19
     578:	bf 12       	cpse	r11, r31
     57a:	03 c0       	rjmp	.+6      	; 0x582 <ISPProtocol_ProgramMemory+0x1b8>
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	82 25       	eor	r24, r2
     580:	8d 83       	std	Y+5, r24	; 0x05

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     582:	c1 14       	cp	r12, r1
     584:	d1 04       	cpc	r13, r1
     586:	09 f0       	breq	.+2      	; 0x58a <ISPProtocol_ProgramMemory+0x1c0>
     588:	d0 c0       	rjmp	.+416    	; 0x72a <ISPProtocol_ProgramMemory+0x360>
     58a:	a0 16       	cp	r10, r16
     58c:	09 f4       	brne	.+2      	; 0x590 <ISPProtocol_ProgramMemory+0x1c6>
     58e:	ca c0       	rjmp	.+404    	; 0x724 <ISPProtocol_ProgramMemory+0x35a>
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     590:	e0 fe       	sbrs	r14, 0
     592:	0d c0       	rjmp	.+26     	; 0x5ae <ISPProtocol_ProgramMemory+0x1e4>
     594:	23 e1       	ldi	r18, 0x13	; 19
     596:	b2 12       	cpse	r11, r18
     598:	0a c0       	rjmp	.+20     	; 0x5ae <ISPProtocol_ProgramMemory+0x1e4>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     59a:	8f 81       	ldd	r24, Y+7	; 0x07
     59c:	88 60       	ori	r24, 0x08	; 8
     59e:	8f 83       	std	Y+7, r24	; 0x07
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;

			PollAddress = (CurrentAddress & 0xFFFF);
     5a0:	d3 01       	movw	r26, r6
     5a2:	8d 91       	ld	r24, X+
     5a4:	9c 91       	ld	r25, X
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     5a6:	10 ff       	sbrs	r17, 0
     5a8:	0a c0       	rjmp	.+20     	; 0x5be <ISPProtocol_ProgramMemory+0x1f4>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;

			PollAddress = (CurrentAddress & 0xFFFF);
     5aa:	6c 01       	movw	r12, r24
     5ac:	22 c0       	rjmp	.+68     	; 0x5f2 <ISPProtocol_ProgramMemory+0x228>
		if (!(PollAddress) && (ByteToWrite != PollValue))
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     5ae:	8f 81       	ldd	r24, Y+7	; 0x07
     5b0:	87 7f       	andi	r24, 0xF7	; 247
     5b2:	8f 83       	std	Y+7, r24	; 0x07

			PollAddress = (CurrentAddress & 0xFFFF);
     5b4:	f3 01       	movw	r30, r6
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     5ba:	10 fd       	sbrc	r17, 0
     5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <ISPProtocol_ProgramMemory+0x21a>
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	29 f4       	brne	.+10     	; 0x5cc <ISPProtocol_ProgramMemory+0x202>
     5c2:	13 fd       	sbrc	r17, 3
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ISPProtocol_ProgramMemory+0x204>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     5c6:	19 7f       	andi	r17, 0xF9	; 249
     5c8:	12 60       	ori	r17, 0x02	; 2
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <ISPProtocol_ProgramMemory+0x204>
     5cc:	6c 01       	movw	r12, r24

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     5ce:	0f 81       	ldd	r16, Y+7	; 0x07
     5d0:	2c 81       	ldd	r18, Y+4	; 0x04
     5d2:	4a 2d       	mov	r20, r10
     5d4:	b6 01       	movw	r22, r12
     5d6:	81 2f       	mov	r24, r17
     5d8:	df d5       	rcall	.+3006   	; 0x1198 <ISPTarget_WaitForProgComplete>
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     5da:	81 11       	cpse	r24, r1
     5dc:	36 c0       	rjmp	.+108    	; 0x64a <ISPProtocol_ProgramMemory+0x280>
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     5de:	c4 2c       	mov	r12, r4
     5e0:	d5 2c       	mov	r13, r5
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <ISPProtocol_ProgramMemory+0x21c>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;

			PollAddress = (CurrentAddress & 0xFFFF);
     5e4:	6c 01       	movw	r12, r24
		}

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     5e6:	e0 fc       	sbrc	r14, 0
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <ISPProtocol_ProgramMemory+0x228>
     5ea:	f5 e1       	ldi	r31, 0x15	; 21
     5ec:	bf 12       	cpse	r11, r31
     5ee:	1f c0       	rjmp	.+62     	; 0x62e <ISPProtocol_ProgramMemory+0x264>
     5f0:	9f c0       	rjmp	.+318    	; 0x730 <ISPProtocol_ProgramMemory+0x366>
		{
			CurrentAddress++;
     5f2:	80 91 84 01 	lds	r24, 0x0184
     5f6:	90 91 85 01 	lds	r25, 0x0185
     5fa:	a0 91 86 01 	lds	r26, 0x0186
     5fe:	b0 91 87 01 	lds	r27, 0x0187
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	a1 1d       	adc	r26, r1
     606:	b1 1d       	adc	r27, r1
     608:	80 93 84 01 	sts	0x0184, r24
     60c:	90 93 85 01 	sts	0x0185, r25
     610:	a0 93 86 01 	sts	0x0186, r26
     614:	b0 93 87 01 	sts	0x0187, r27

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     618:	23 e1       	ldi	r18, 0x13	; 19
     61a:	b2 12       	cpse	r11, r18
     61c:	08 c0       	rjmp	.+16     	; 0x62e <ISPProtocol_ProgramMemory+0x264>
     61e:	aa 27       	eor	r26, r26
     620:	bb 27       	eor	r27, r27
     622:	89 2b       	or	r24, r25
     624:	8a 2b       	or	r24, r26
     626:	8b 2b       	or	r24, r27
     628:	11 f4       	brne	.+4      	; 0x62e <ISPProtocol_ProgramMemory+0x264>
			  MustLoadExtendedAddress = true;
     62a:	30 92 83 01 	sts	0x0183, r3
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     62e:	3f ef       	ldi	r19, 0xFF	; 255
     630:	e3 1a       	sub	r14, r19
     632:	f3 0a       	sbc	r15, r19
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	e8 16       	cp	r14, r24
     63a:	f9 06       	cpc	r15, r25
     63c:	08 f4       	brcc	.+2      	; 0x640 <ISPProtocol_ProgramMemory+0x276>
     63e:	58 cf       	rjmp	.-336    	; 0x4f0 <ISPProtocol_ProgramMemory+0x126>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	03 c0       	rjmp	.+6      	; 0x64a <ISPProtocol_ProgramMemory+0x280>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
     648:	80 e0       	ldi	r24, 0x00	; 0
			  MustLoadExtendedAddress = true;
		}
	}

	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     64a:	9b 81       	ldd	r25, Y+3	; 0x03
     64c:	99 23       	and	r25, r25
     64e:	0c f0       	brlt	.+2      	; 0x652 <ISPProtocol_ProgramMemory+0x288>
     650:	5f c0       	rjmp	.+190    	; 0x710 <ISPProtocol_ProgramMemory+0x346>
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     652:	8e 81       	ldd	r24, Y+6	; 0x06
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     654:	90 91 3e 01 	lds	r25, 0x013E
     658:	99 23       	and	r25, r25
     65a:	29 f0       	breq	.+10     	; 0x666 <ISPProtocol_ProgramMemory+0x29c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     65c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <ISPProtocol_ProgramMemory+0x294>
     664:	01 c0       	rjmp	.+2      	; 0x668 <ISPProtocol_ProgramMemory+0x29e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     666:	f9 d4       	rcall	.+2546   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(PageStartAddress >> 8);
     668:	c6 5f       	subi	r28, 0xF6	; 246
     66a:	de 4f       	sbci	r29, 0xFE	; 254
     66c:	a8 81       	ld	r26, Y
     66e:	b9 81       	ldd	r27, Y+1	; 0x01
     670:	ca 50       	subi	r28, 0x0A	; 10
     672:	d1 40       	sbci	r29, 0x01	; 1
     674:	8b 2f       	mov	r24, r27
     676:	99 27       	eor	r25, r25
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     678:	20 91 3e 01 	lds	r18, 0x013E
     67c:	22 23       	and	r18, r18
     67e:	29 f0       	breq	.+10     	; 0x68a <ISPProtocol_ProgramMemory+0x2c0>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     680:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     682:	0d b4       	in	r0, 0x2d	; 45
     684:	07 fe       	sbrs	r0, 7
     686:	fd cf       	rjmp	.-6      	; 0x682 <ISPProtocol_ProgramMemory+0x2b8>
     688:	01 c0       	rjmp	.+2      	; 0x68c <ISPProtocol_ProgramMemory+0x2c2>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     68a:	e7 d4       	rcall	.+2510   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     68c:	80 91 3e 01 	lds	r24, 0x013E
     690:	88 23       	and	r24, r24
     692:	51 f0       	breq	.+20     	; 0x6a8 <ISPProtocol_ProgramMemory+0x2de>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     694:	c6 5f       	subi	r28, 0xF6	; 246
     696:	de 4f       	sbci	r29, 0xFE	; 254
     698:	b8 81       	ld	r27, Y
     69a:	ca 50       	subi	r28, 0x0A	; 10
     69c:	d1 40       	sbci	r29, 0x01	; 1
     69e:	be bd       	out	0x2e, r27	; 46
				while (!(SPSR & (1 << SPIF)));
     6a0:	0d b4       	in	r0, 0x2d	; 45
     6a2:	07 fe       	sbrs	r0, 7
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <ISPProtocol_ProgramMemory+0x2d6>
     6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <ISPProtocol_ProgramMemory+0x2ea>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     6a8:	c6 5f       	subi	r28, 0xF6	; 246
     6aa:	de 4f       	sbci	r29, 0xFE	; 254
     6ac:	88 81       	ld	r24, Y
     6ae:	ca 50       	subi	r28, 0x0A	; 10
     6b0:	d1 40       	sbci	r29, 0x01	; 1
     6b2:	d3 d4       	rcall	.+2470   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     6b4:	80 91 3e 01 	lds	r24, 0x013E
     6b8:	88 23       	and	r24, r24
     6ba:	29 f0       	breq	.+10     	; 0x6c6 <ISPProtocol_ProgramMemory+0x2fc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6be:	0d b4       	in	r0, 0x2d	; 45
     6c0:	07 fe       	sbrs	r0, 7
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <ISPProtocol_ProgramMemory+0x2f4>
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <ISPProtocol_ProgramMemory+0x300>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	c8 d4       	rcall	.+2448   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(PageStartAddress & 0xFF);
		ISPTarget_SendByte(0x00);

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	85 ff       	sbrs	r24, 5
     6ce:	06 c0       	rjmp	.+12     	; 0x6dc <ISPProtocol_ProgramMemory+0x312>
     6d0:	c1 14       	cp	r12, r1
     6d2:	d1 04       	cpc	r13, r1
     6d4:	19 f4       	brne	.+6      	; 0x6dc <ISPProtocol_ProgramMemory+0x312>
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     6d6:	8f 7c       	andi	r24, 0xCF	; 207
     6d8:	80 61       	ori	r24, 0x10	; 16
     6da:	8b 83       	std	Y+3, r24	; 0x03
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     6dc:	0f 81       	ldd	r16, Y+7	; 0x07
     6de:	2c 81       	ldd	r18, Y+4	; 0x04
     6e0:	4a 2d       	mov	r20, r10
     6e2:	b6 01       	movw	r22, r12
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	58 d5       	rcall	.+2736   	; 0x1198 <ISPTarget_WaitForProgComplete>
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     6e8:	e3 e1       	ldi	r30, 0x13	; 19
     6ea:	be 12       	cpse	r11, r30
     6ec:	11 c0       	rjmp	.+34     	; 0x710 <ISPProtocol_ProgramMemory+0x346>
     6ee:	40 91 84 01 	lds	r20, 0x0184
     6f2:	50 91 85 01 	lds	r21, 0x0185
     6f6:	60 91 86 01 	lds	r22, 0x0186
     6fa:	70 91 87 01 	lds	r23, 0x0187
     6fe:	66 27       	eor	r22, r22
     700:	77 27       	eor	r23, r23
     702:	45 2b       	or	r20, r21
     704:	46 2b       	or	r20, r22
     706:	47 2b       	or	r20, r23
     708:	19 f4       	brne	.+6      	; 0x710 <ISPProtocol_ProgramMemory+0x346>
		  MustLoadExtendedAddress = true;
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	90 93 83 01 	sts	0x0183, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     710:	e1 ef       	ldi	r30, 0xF1	; 241
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	b0 82       	st	Z, r11
     716:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     718:	e8 ee       	ldi	r30, 0xE8	; 232
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	8e 77       	andi	r24, 0x7E	; 126
     720:	80 83       	st	Z, r24
     722:	1a c0       	rjmp	.+52     	; 0x758 <ISPProtocol_ProgramMemory+0x38e>

			PollAddress = (CurrentAddress & 0xFFFF);
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     724:	10 ff       	sbrs	r17, 0
     726:	4d cf       	rjmp	.-358    	; 0x5c2 <ISPProtocol_ProgramMemory+0x1f8>
     728:	5e cf       	rjmp	.-324    	; 0x5e6 <ISPProtocol_ProgramMemory+0x21c>
     72a:	10 ff       	sbrs	r17, 0
     72c:	50 cf       	rjmp	.-352    	; 0x5ce <ISPProtocol_ProgramMemory+0x204>
     72e:	5b cf       	rjmp	.-330    	; 0x5e6 <ISPProtocol_ProgramMemory+0x21c>
		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;
     730:	80 91 84 01 	lds	r24, 0x0184
     734:	90 91 85 01 	lds	r25, 0x0185
     738:	a0 91 86 01 	lds	r26, 0x0186
     73c:	b0 91 87 01 	lds	r27, 0x0187
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	a1 1d       	adc	r26, r1
     744:	b1 1d       	adc	r27, r1
     746:	80 93 84 01 	sts	0x0184, r24
     74a:	90 93 85 01 	sts	0x0185, r25
     74e:	a0 93 86 01 	sts	0x0186, r26
     752:	b0 93 87 01 	sts	0x0187, r27
     756:	6b cf       	rjmp	.-298    	; 0x62e <ISPProtocol_ProgramMemory+0x264>
	}

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     758:	c3 5f       	subi	r28, 0xF3	; 243
     75a:	de 4f       	sbci	r29, 0xFE	; 254
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	9f 90       	pop	r9
     77c:	8f 90       	pop	r8
     77e:	7f 90       	pop	r7
     780:	6f 90       	pop	r6
     782:	5f 90       	pop	r5
     784:	4f 90       	pop	r4
     786:	3f 90       	pop	r3
     788:	2f 90       	pop	r2
     78a:	08 95       	ret

0000078c <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     78c:	7f 92       	push	r7
     78e:	8f 92       	push	r8
     790:	9f 92       	push	r9
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <ISPProtocol_ReadMemory+0x1c>
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	98 2e       	mov	r9, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;

				Temp = Data.Bytes[0];
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
				Data.Bytes[0] = Data.Bytes[1];
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     7c4:	99 83       	std	Y+1, r25	; 0x01
     7c6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7c8:	e8 ee       	ldi	r30, 0xE8	; 232
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	8b 77       	andi	r24, 0x7B	; 123
     7d0:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7d8:	ec ee       	ldi	r30, 0xEC	; 236
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7e2:	e1 ef       	ldi	r30, 0xF1	; 241
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	90 82       	st	Z, r9
     7e8:	10 82       	st	Z, r1

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	89 2b       	or	r24, r25
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <ISPProtocol_ReadMemory+0x68>
     7f2:	97 c0       	rjmp	.+302    	; 0x922 <ISPProtocol_ReadMemory+0x196>
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
		ISPTarget_SendByte(CurrentAddress >> 8);
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     7f8:	0f 2e       	mov	r0, r31
     7fa:	f4 e8       	ldi	r31, 0x84	; 132
     7fc:	af 2e       	mov	r10, r31
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	bf 2e       	mov	r11, r31
     802:	f0 2d       	mov	r31, r0
     804:	0f 2e       	mov	r0, r31
     806:	f1 ef       	ldi	r31, 0xF1	; 241
     808:	cf 2e       	mov	r12, r31
     80a:	d1 2c       	mov	r13, r1
     80c:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     80e:	0f 2e       	mov	r0, r31
     810:	f8 ee       	ldi	r31, 0xE8	; 232
     812:	ef 2e       	mov	r14, r31
     814:	f1 2c       	mov	r15, r1
     816:	f0 2d       	mov	r31, r0
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     818:	77 24       	eor	r7, r7
     81a:	73 94       	inc	r7
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     81c:	68 94       	set
     81e:	88 24       	eor	r8, r8
     820:	83 f8       	bld	r8, 3

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     822:	80 91 83 01 	lds	r24, 0x0183
     826:	88 23       	and	r24, r24
     828:	19 f0       	breq	.+6      	; 0x830 <ISPProtocol_ReadMemory+0xa4>
		{
			ISPTarget_LoadExtendedAddress();
     82a:	7e d4       	rcall	.+2300   	; 0x1128 <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     82c:	10 92 83 01 	sts	0x0183, r1
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     830:	8b 81       	ldd	r24, Y+3	; 0x03
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     832:	90 91 3e 01 	lds	r25, 0x013E
     836:	99 23       	and	r25, r25
     838:	29 f0       	breq	.+10     	; 0x844 <ISPProtocol_ReadMemory+0xb8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     83a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
     840:	fd cf       	rjmp	.-6      	; 0x83c <ISPProtocol_ReadMemory+0xb0>
     842:	01 c0       	rjmp	.+2      	; 0x846 <ISPProtocol_ReadMemory+0xba>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     844:	0a d4       	rcall	.+2068   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     846:	80 91 84 01 	lds	r24, 0x0184
     84a:	90 91 85 01 	lds	r25, 0x0185
     84e:	a0 91 86 01 	lds	r26, 0x0186
     852:	b0 91 87 01 	lds	r27, 0x0187
     856:	89 2f       	mov	r24, r25
     858:	9a 2f       	mov	r25, r26
     85a:	ab 2f       	mov	r26, r27
     85c:	bb 27       	eor	r27, r27
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     85e:	20 91 3e 01 	lds	r18, 0x013E
     862:	22 23       	and	r18, r18
     864:	29 f0       	breq	.+10     	; 0x870 <ISPProtocol_ReadMemory+0xe4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     866:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     868:	0d b4       	in	r0, 0x2d	; 45
     86a:	07 fe       	sbrs	r0, 7
     86c:	fd cf       	rjmp	.-6      	; 0x868 <ISPProtocol_ReadMemory+0xdc>
     86e:	01 c0       	rjmp	.+2      	; 0x872 <ISPProtocol_ReadMemory+0xe6>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     870:	f4 d3       	rcall	.+2024   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     872:	f5 01       	movw	r30, r10
     874:	80 81       	ld	r24, Z
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     876:	90 91 3e 01 	lds	r25, 0x013E
     87a:	99 23       	and	r25, r25
     87c:	29 f0       	breq	.+10     	; 0x888 <ISPProtocol_ReadMemory+0xfc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     87e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     880:	0d b4       	in	r0, 0x2d	; 45
     882:	07 fe       	sbrs	r0, 7
     884:	fd cf       	rjmp	.-6      	; 0x880 <ISPProtocol_ReadMemory+0xf4>
     886:	01 c0       	rjmp	.+2      	; 0x88a <ISPProtocol_ReadMemory+0xfe>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     888:	e8 d3       	rcall	.+2000   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     88a:	80 91 3e 01 	lds	r24, 0x013E
     88e:	88 23       	and	r24, r24
     890:	31 f0       	breq	.+12     	; 0x89e <ISPProtocol_ReadMemory+0x112>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     892:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     894:	0d b4       	in	r0, 0x2d	; 45
     896:	07 fe       	sbrs	r0, 7
     898:	fd cf       	rjmp	.-6      	; 0x894 <ISPProtocol_ReadMemory+0x108>
				return SPDR;
     89a:	8e b5       	in	r24, 0x2e	; 46
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <ISPProtocol_ReadMemory+0x116>
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	dc d3       	rcall	.+1976   	; 0x105a <ISPTarget_TransferSoftSPIByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8a2:	f6 01       	movw	r30, r12
     8a4:	80 83       	st	Z, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8a6:	f7 01       	movw	r30, r14
     8a8:	80 81       	ld	r24, Z
		Endpoint_Write_8(ISPTarget_ReceiveByte());

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     8aa:	85 fd       	sbrc	r24, 5
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <ISPProtocol_ReadMemory+0x12c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8ae:	80 81       	ld	r24, Z
     8b0:	8e 77       	andi	r24, 0x7E	; 126
     8b2:	80 83       	st	Z, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     8b4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     8b8:	f4 e1       	ldi	r31, 0x14	; 20
     8ba:	9f 12       	cpse	r9, r31
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <ISPProtocol_ReadMemory+0x13e>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	88 25       	eor	r24, r8
     8c2:	8b 83       	std	Y+3, r24	; 0x03

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     8c4:	00 fd       	sbrc	r16, 0
     8c6:	41 c0       	rjmp	.+130    	; 0x94a <ISPProtocol_ReadMemory+0x1be>
     8c8:	24 c0       	rjmp	.+72     	; 0x912 <ISPProtocol_ReadMemory+0x186>
     8ca:	00 fd       	sbrc	r16, 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <ISPProtocol_ReadMemory+0x14a>
     8ce:	26 e1       	ldi	r18, 0x16	; 22
     8d0:	92 12       	cpse	r9, r18
     8d2:	1f c0       	rjmp	.+62     	; 0x912 <ISPProtocol_ReadMemory+0x186>
     8d4:	4e c0       	rjmp	.+156    	; 0x972 <ISPProtocol_ReadMemory+0x1e6>
		{
			CurrentAddress++;
     8d6:	80 91 84 01 	lds	r24, 0x0184
     8da:	90 91 85 01 	lds	r25, 0x0185
     8de:	a0 91 86 01 	lds	r26, 0x0186
     8e2:	b0 91 87 01 	lds	r27, 0x0187
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	a1 1d       	adc	r26, r1
     8ea:	b1 1d       	adc	r27, r1
     8ec:	80 93 84 01 	sts	0x0184, r24
     8f0:	90 93 85 01 	sts	0x0185, r25
     8f4:	a0 93 86 01 	sts	0x0186, r26
     8f8:	b0 93 87 01 	sts	0x0187, r27

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     8fc:	e6 e1       	ldi	r30, 0x16	; 22
     8fe:	9e 16       	cp	r9, r30
     900:	41 f0       	breq	.+16     	; 0x912 <ISPProtocol_ReadMemory+0x186>
     902:	aa 27       	eor	r26, r26
     904:	bb 27       	eor	r27, r27
     906:	89 2b       	or	r24, r25
     908:	8a 2b       	or	r24, r26
     90a:	8b 2b       	or	r24, r27
     90c:	11 f4       	brne	.+4      	; 0x912 <ISPProtocol_ReadMemory+0x186>
			  MustLoadExtendedAddress = true;
     90e:	70 92 83 01 	sts	0x0183, r7

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	08 17       	cp	r16, r24
     91c:	19 07       	cpc	r17, r25
     91e:	08 f4       	brcc	.+2      	; 0x922 <ISPProtocol_ReadMemory+0x196>
     920:	80 cf       	rjmp	.-256    	; 0x822 <ISPProtocol_ReadMemory+0x96>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     922:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     926:	e8 ee       	ldi	r30, 0xE8	; 232
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	90 81       	ld	r25, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     92c:	80 81       	ld	r24, Z
     92e:	8e 77       	andi	r24, 0x7E	; 126
     930:	80 83       	st	Z, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     932:	95 fd       	sbrc	r25, 5
     934:	32 c0       	rjmp	.+100    	; 0x99a <ISPProtocol_ReadMemory+0x20e>
	{
		Endpoint_WaitUntilReady();
     936:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
     93a:	e8 ee       	ldi	r30, 0xE8	; 232
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8e 77       	andi	r24, 0x7E	; 126
     942:	80 83       	st	Z, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     944:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
     948:	28 c0       	rjmp	.+80     	; 0x99a <ISPProtocol_ReadMemory+0x20e>
		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;
     94a:	80 91 84 01 	lds	r24, 0x0184
     94e:	90 91 85 01 	lds	r25, 0x0185
     952:	a0 91 86 01 	lds	r26, 0x0186
     956:	b0 91 87 01 	lds	r27, 0x0187
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	a1 1d       	adc	r26, r1
     95e:	b1 1d       	adc	r27, r1
     960:	80 93 84 01 	sts	0x0184, r24
     964:	90 93 85 01 	sts	0x0185, r25
     968:	a0 93 86 01 	sts	0x0186, r26
     96c:	b0 93 87 01 	sts	0x0187, r27
     970:	c8 cf       	rjmp	.-112    	; 0x902 <ISPProtocol_ReadMemory+0x176>
     972:	80 91 84 01 	lds	r24, 0x0184
     976:	90 91 85 01 	lds	r25, 0x0185
     97a:	a0 91 86 01 	lds	r26, 0x0186
     97e:	b0 91 87 01 	lds	r27, 0x0187
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
     988:	80 93 84 01 	sts	0x0184, r24
     98c:	90 93 85 01 	sts	0x0185, r25
     990:	a0 93 86 01 	sts	0x0186, r26
     994:	b0 93 87 01 	sts	0x0187, r27
     998:	bc cf       	rjmp	.-136    	; 0x912 <ISPProtocol_ReadMemory+0x186>
	{
		Endpoint_WaitUntilReady();
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
	}
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	7f 90       	pop	r7
     9ba:	08 95       	ret

000009bc <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	29 97       	sbiw	r28, 0x09	; 9
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	b8 2e       	mov	r11, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	65 e0       	ldi	r22, 0x05	; 5
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9f0:	e8 ee       	ldi	r30, 0xE8	; 232
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	90 81       	ld	r25, Z
     9f6:	9b 77       	andi	r25, 0x7B	; 123
     9f8:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     a00:	ec ee       	ldi	r30, 0xEC	; 236
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	90 81       	ld	r25, Z
     a06:	91 60       	ori	r25, 0x01	; 1
     a08:	90 83       	st	Z, r25
     a0a:	8e 01       	movw	r16, r28
     a0c:	0e 5f       	subi	r16, 0xFE	; 254
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	7e 01       	movw	r14, r28
     a12:	86 e0       	ldi	r24, 0x06	; 6
     a14:	e8 0e       	add	r14, r24
     a16:	f1 1c       	adc	r15, r1
     a18:	67 01       	movw	r12, r14

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     a1a:	f8 01       	movw	r30, r16
     a1c:	81 91       	ld	r24, Z+
     a1e:	8f 01       	movw	r16, r30
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     a20:	90 91 3e 01 	lds	r25, 0x013E
     a24:	99 23       	and	r25, r25
     a26:	31 f0       	breq	.+12     	; 0xa34 <ISPProtocol_ReadFuseLockSigOSCCAL+0x78>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a28:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a2a:	0d b4       	in	r0, 0x2d	; 45
     a2c:	07 fe       	sbrs	r0, 7
     a2e:	fd cf       	rjmp	.-6      	; 0xa2a <ISPProtocol_ReadFuseLockSigOSCCAL+0x6e>
				return SPDR;
     a30:	8e b5       	in	r24, 0x2e	; 46
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <ISPProtocol_ReadFuseLockSigOSCCAL+0x7a>
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     a34:	12 d3       	rcall	.+1572   	; 0x105a <ISPTarget_TransferSoftSPIByte>
     a36:	f7 01       	movw	r30, r14
     a38:	81 93       	st	Z+, r24
     a3a:	7f 01       	movw	r14, r30
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     a3c:	0c 15       	cp	r16, r12
     a3e:	1d 05       	cpc	r17, r13
     a40:	61 f7       	brne	.-40     	; 0xa1a <ISPProtocol_ReadFuseLockSigOSCCAL+0x5e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a42:	e1 ef       	ldi	r30, 0xF1	; 241
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	b0 82       	st	Z, r11
     a48:	10 82       	st	Z, r1
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	de 01       	movw	r26, r28
     a4e:	a8 0f       	add	r26, r24
     a50:	b1 1d       	adc	r27, r1
     a52:	15 96       	adiw	r26, 0x05	; 5
     a54:	8c 91       	ld	r24, X
     a56:	80 83       	st	Z, r24
     a58:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a5a:	e8 ee       	ldi	r30, 0xE8	; 232
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	8e 77       	andi	r24, 0x7E	; 126
     a62:	80 83       	st	Z, r24
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     a64:	29 96       	adiw	r28, 0x09	; 9
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	08 95       	ret

00000a84 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <ISPProtocol_WriteFuseLock+0x10>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <ISPProtocol_WriteFuseLock+0x12>
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	d8 2e       	mov	r13, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	64 e0       	ldi	r22, 0x04	; 4
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     aac:	e8 ee       	ldi	r30, 0xE8	; 232
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	90 81       	ld	r25, Z
     ab2:	9b 77       	andi	r25, 0x7B	; 123
     ab4:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     abc:	ec ee       	ldi	r30, 0xEC	; 236
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	90 81       	ld	r25, Z
     ac2:	91 60       	ori	r25, 0x01	; 1
     ac4:	90 83       	st	Z, r25
     ac6:	8e 01       	movw	r16, r28
     ac8:	0f 5f       	subi	r16, 0xFF	; 255
     aca:	1f 4f       	sbci	r17, 0xFF	; 255
     acc:	7e 01       	movw	r14, r28
     ace:	85 e0       	ldi	r24, 0x05	; 5
     ad0:	e8 0e       	add	r14, r24
     ad2:	f1 1c       	adc	r15, r1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     ad4:	f8 01       	movw	r30, r16
     ad6:	81 91       	ld	r24, Z+
     ad8:	8f 01       	movw	r16, r30
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     ada:	90 91 3e 01 	lds	r25, 0x013E
     ade:	99 23       	and	r25, r25
     ae0:	29 f0       	breq	.+10     	; 0xaec <ISPProtocol_WriteFuseLock+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ae2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ae4:	0d b4       	in	r0, 0x2d	; 45
     ae6:	07 fe       	sbrs	r0, 7
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <ISPProtocol_WriteFuseLock+0x60>
     aea:	01 c0       	rjmp	.+2      	; 0xaee <ISPProtocol_WriteFuseLock+0x6a>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     aec:	b6 d2       	rcall	.+1388   	; 0x105a <ISPTarget_TransferSoftSPIByte>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     aee:	0e 15       	cp	r16, r14
     af0:	1f 05       	cpc	r17, r15
     af2:	81 f7       	brne	.-32     	; 0xad4 <ISPProtocol_WriteFuseLock+0x50>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     af4:	e1 ef       	ldi	r30, 0xF1	; 241
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	d0 82       	st	Z, r13
     afa:	10 82       	st	Z, r1
     afc:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     afe:	e8 ee       	ldi	r30, 0xE8	; 232
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	8e 77       	andi	r24, 0x7E	; 126
     b06:	80 83       	st	Z, r24

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	08 95       	ret

00000b20 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	c2 50       	subi	r28, 0x02	; 2
     b38:	d1 40       	sbci	r29, 0x01	; 1
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	63 e0       	ldi	r22, 0x03	; 3
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     b54:	69 81       	ldd	r22, Y+1	; 0x01
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	ce 01       	movw	r24, r28
     b5e:	04 96       	adiw	r24, 0x04	; 4
     b60:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b64:	e8 ee       	ldi	r30, 0xE8	; 232
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8b 77       	andi	r24, 0x7B	; 123
     b6c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b74:	ec ee       	ldi	r30, 0xEC	; 236
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b7e:	e1 ef       	ldi	r30, 0xF1	; 241
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	8d e1       	ldi	r24, 0x1D	; 29
     b84:	80 83       	st	Z, r24
     b86:	10 82       	st	Z, r1

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	88 23       	and	r24, r24
     b8c:	31 f1       	breq	.+76     	; 0xbda <ISPProtocol_SPIMulti+0xba>
     b8e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	18 17       	cp	r17, r24
     b94:	90 f4       	brcc	.+36     	; 0xbba <ISPProtocol_SPIMulti+0x9a>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     b96:	e4 e0       	ldi	r30, 0x04	; 4
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ec 0f       	add	r30, r28
     b9c:	fd 1f       	adc	r31, r29
     b9e:	e1 0f       	add	r30, r17
     ba0:	f1 1d       	adc	r31, r1
     ba2:	80 81       	ld	r24, Z
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     ba4:	90 91 3e 01 	lds	r25, 0x013E
     ba8:	99 23       	and	r25, r25
     baa:	29 f0       	breq	.+10     	; 0xbb6 <ISPProtocol_SPIMulti+0x96>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     bae:	0d b4       	in	r0, 0x2d	; 45
     bb0:	07 fe       	sbrs	r0, 7
     bb2:	fd cf       	rjmp	.-6      	; 0xbae <ISPProtocol_SPIMulti+0x8e>
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <ISPProtocol_SPIMulti+0xb0>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     bb6:	51 d2       	rcall	.+1186   	; 0x105a <ISPTarget_TransferSoftSPIByte>
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <ISPProtocol_SPIMulti+0xb0>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     bba:	80 91 3e 01 	lds	r24, 0x013E
     bbe:	88 23       	and	r24, r24
     bc0:	29 f0       	breq	.+10     	; 0xbcc <ISPProtocol_SPIMulti+0xac>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bc2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bc4:	0d b4       	in	r0, 0x2d	; 45
     bc6:	07 fe       	sbrs	r0, 7
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <ISPProtocol_SPIMulti+0xa4>
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <ISPProtocol_SPIMulti+0xb0>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	45 d2       	rcall	.+1162   	; 0x105a <ISPTarget_TransferSoftSPIByte>
		else
		  ISPTarget_SendByte(0);

		CurrTxPos++;
     bd0:	1f 5f       	subi	r17, 0xFF	; 255

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	18 17       	cp	r17, r24
     bd6:	e0 f2       	brcs	.-72     	; 0xb90 <ISPProtocol_SPIMulti+0x70>
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <ISPProtocol_SPIMulti+0xbc>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SPI_MULTI);
	Endpoint_Write_8(STATUS_CMD_OK);

	uint8_t CurrTxPos = 0;
     bda:	10 e0       	ldi	r17, 0x00	; 0

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	88 23       	and	r24, r24
     be0:	09 f4       	brne	.+2      	; 0xbe4 <ISPProtocol_SPIMulti+0xc4>
     be2:	42 c0       	rjmp	.+132    	; 0xc68 <ISPProtocol_SPIMulti+0x148>
     be4:	00 e0       	ldi	r16, 0x00	; 0
     be6:	0f 2e       	mov	r0, r31
     be8:	f1 ef       	ldi	r31, 0xF1	; 241
     bea:	cf 2e       	mov	r12, r31
     bec:	d1 2c       	mov	r13, r1
     bee:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bf0:	0f 2e       	mov	r0, r31
     bf2:	f8 ee       	ldi	r31, 0xE8	; 232
     bf4:	ef 2e       	mov	r14, r31
     bf6:	f1 2c       	mov	r15, r1
     bf8:	f0 2d       	mov	r31, r0
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	18 17       	cp	r17, r24
     bfe:	c8 f4       	brcc	.+50     	; 0xc32 <ISPProtocol_SPIMulti+0x112>
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     c00:	bb 24       	eor	r11, r11
     c02:	b3 94       	inc	r11
     c04:	b1 0e       	add	r11, r17
     c06:	e4 e0       	ldi	r30, 0x04	; 4
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	ec 0f       	add	r30, r28
     c0c:	fd 1f       	adc	r31, r29
     c0e:	e1 0f       	add	r30, r17
     c10:	f1 1d       	adc	r31, r1
     c12:	80 81       	ld	r24, Z
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     c14:	90 91 3e 01 	lds	r25, 0x013E
     c18:	99 23       	and	r25, r25
     c1a:	31 f0       	breq	.+12     	; 0xc28 <ISPProtocol_SPIMulti+0x108>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c1c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     c1e:	0d b4       	in	r0, 0x2d	; 45
     c20:	07 fe       	sbrs	r0, 7
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <ISPProtocol_SPIMulti+0xfe>
				return SPDR;
     c24:	8e b5       	in	r24, 0x2e	; 46
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <ISPProtocol_SPIMulti+0x10a>
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     c28:	18 d2       	rcall	.+1072   	; 0x105a <ISPTarget_TransferSoftSPIByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c2a:	f6 01       	movw	r30, r12
     c2c:	80 83       	st	Z, r24
     c2e:	1b 2d       	mov	r17, r11
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <ISPProtocol_SPIMulti+0x12e>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     c32:	80 91 3e 01 	lds	r24, 0x013E
     c36:	88 23       	and	r24, r24
     c38:	31 f0       	breq	.+12     	; 0xc46 <ISPProtocol_SPIMulti+0x126>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c3a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c3c:	0d b4       	in	r0, 0x2d	; 45
     c3e:	07 fe       	sbrs	r0, 7
     c40:	fd cf       	rjmp	.-6      	; 0xc3c <ISPProtocol_SPIMulti+0x11c>
				return SPDR;
     c42:	8e b5       	in	r24, 0x2e	; 46
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <ISPProtocol_SPIMulti+0x12a>
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 d2       	rcall	.+1040   	; 0x105a <ISPTarget_TransferSoftSPIByte>
     c4a:	f6 01       	movw	r30, r12
     c4c:	80 83       	st	Z, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c4e:	f7 01       	movw	r30, r14
     c50:	80 81       	ld	r24, Z
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     c52:	85 fd       	sbrc	r24, 5
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <ISPProtocol_SPIMulti+0x140>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c56:	80 81       	ld	r24, Z
     c58:	8e 77       	andi	r24, 0x7E	; 126
     c5a:	80 83       	st	Z, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     c5c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
		}

		CurrRxPos++;
     c60:	0f 5f       	subi	r16, 0xFF	; 255

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	08 17       	cp	r16, r24
     c66:	48 f2       	brcs	.-110    	; 0xbfa <ISPProtocol_SPIMulti+0xda>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c68:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c6c:	e8 ee       	ldi	r30, 0xE8	; 232
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	90 81       	ld	r25, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c72:	80 81       	ld	r24, Z
     c74:	8e 77       	andi	r24, 0x7E	; 126
     c76:	80 83       	st	Z, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     c78:	95 fd       	sbrc	r25, 5
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <ISPProtocol_SPIMulti+0x16e>
	{
		Endpoint_WaitUntilReady();
     c7c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
     c80:	e8 ee       	ldi	r30, 0xE8	; 232
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8e 77       	andi	r24, 0x7E	; 126
     c88:	80 83       	st	Z, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     c8a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
	}
}
     c8e:	ce 5f       	subi	r28, 0xFE	; 254
     c90:	de 4f       	sbci	r29, 0xFE	; 254
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	08 95       	ret

00000cb0 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	while (DelayMS-- && TimeoutTicksRemaining)
     cb0:	88 23       	and	r24, r24
     cb2:	81 f0       	breq	.+32     	; 0xcd4 <ISPProtocol_DelayMS+0x24>
     cb4:	9a b5       	in	r25, 0x2a	; 42
     cb6:	99 23       	and	r25, r25
     cb8:	69 f0       	breq	.+26     	; 0xcd4 <ISPProtocol_DelayMS+0x24>
     cba:	82 50       	subi	r24, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cbc:	ef e9       	ldi	r30, 0x9F	; 159
     cbe:	ff e0       	ldi	r31, 0x0F	; 15
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <ISPProtocol_DelayMS+0x10>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <ISPProtocol_DelayMS+0x16>
     cc6:	00 00       	nop
     cc8:	8f 3f       	cpi	r24, 0xFF	; 255
     cca:	21 f0       	breq	.+8      	; 0xcd4 <ISPProtocol_DelayMS+0x24>
     ccc:	9a b5       	in	r25, 0x2a	; 42
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	91 11       	cpse	r25, r1
     cd2:	f4 cf       	rjmp	.-24     	; 0xcbc <ISPProtocol_DelayMS+0xc>
     cd4:	08 95       	ret

00000cd6 <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	2f 97       	sbiw	r28, 0x0f	; 15
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	6b e0       	ldi	r22, 0x0B	; 11
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d06:	e8 ee       	ldi	r30, 0xE8	; 232
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 77       	andi	r24, 0x7B	; 123
     d0e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d16:	ec ee       	ldi	r30, 0xEC	; 236
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     d20:	10 92 84 01 	sts	0x0184, r1
     d24:	10 92 85 01 	sts	0x0185, r1
     d28:	10 92 86 01 	sts	0x0186, r1
     d2c:	10 92 87 01 	sts	0x0187, r1

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	be df       	rcall	.-132    	; 0xcb0 <ISPProtocol_DelayMS>
	ISPTarget_EnableTargetISP();
     d34:	68 d1       	rcall	.+720    	; 0x1006 <ISPTarget_EnableTargetISP>

	ISPTarget_ChangeTargetResetLine(true);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	af d1       	rcall	.+862    	; 0x1098 <ISPTarget_ChangeTargetResetLine>
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	b9 df       	rcall	.-142    	; 0xcb0 <ISPProtocol_DelayMS>

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	98 0f       	add	r25, r24
     d44:	9c 83       	std	Y+4, r25	; 0x04
     d46:	88 23       	and	r24, r24
     d48:	09 f4       	brne	.+2      	; 0xd4c <ISPProtocol_EnterISPMode+0x76>
     d4a:	46 c0       	rjmp	.+140    	; 0xdd8 <ISPProtocol_EnterISPMode+0x102>
     d4c:	8a b5       	in	r24, 0x2a	; 42
     d4e:	81 11       	cpse	r24, r1
     d50:	39 c0       	rjmp	.+114    	; 0xdc4 <ISPProtocol_EnterISPMode+0xee>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     d52:	80 ec       	ldi	r24, 0xC0	; 192
     d54:	46 c0       	rjmp	.+140    	; 0xde2 <ISPProtocol_EnterISPMode+0x10c>
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	ab df       	rcall	.-170    	; 0xcb0 <ISPProtocol_DelayMS>
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     d5a:	f8 01       	movw	r30, r16
     d5c:	81 91       	ld	r24, Z+
     d5e:	8f 01       	movw	r16, r30
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     d60:	90 91 3e 01 	lds	r25, 0x013E
     d64:	99 23       	and	r25, r25
     d66:	31 f0       	breq	.+12     	; 0xd74 <ISPProtocol_EnterISPMode+0x9e>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d68:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     d6a:	0d b4       	in	r0, 0x2d	; 45
     d6c:	07 fe       	sbrs	r0, 7
     d6e:	fd cf       	rjmp	.-6      	; 0xd6a <ISPProtocol_EnterISPMode+0x94>
				return SPDR;
     d70:	8e b5       	in	r24, 0x2e	; 46
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <ISPProtocol_EnterISPMode+0xa0>
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     d74:	72 d1       	rcall	.+740    	; 0x105a <ISPTarget_TransferSoftSPIByte>
     d76:	f7 01       	movw	r30, r14
     d78:	81 93       	st	Z+, r24
     d7a:	7f 01       	movw	r14, r30
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     d7c:	0c 15       	cp	r16, r12
     d7e:	1d 05       	cpc	r17, r13
     d80:	51 f7       	brne	.-44     	; 0xd56 <ISPProtocol_EnterISPMode+0x80>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     d82:	8f 81       	ldd	r24, Y+7	; 0x07
     d84:	88 23       	and	r24, r24
     d86:	51 f0       	breq	.+20     	; 0xd9c <ISPProtocol_EnterISPMode+0xc6>
     d88:	eb e0       	ldi	r30, 0x0B	; 11
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ec 0f       	add	r30, r28
     d8e:	fd 1f       	adc	r31, r29
     d90:	e8 0f       	add	r30, r24
     d92:	f1 1d       	adc	r31, r1
     d94:	90 81       	ld	r25, Z
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	98 13       	cpse	r25, r24
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <ISPProtocol_EnterISPMode+0xca>
		{
			ResponseStatus = STATUS_CMD_OK;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	21 c0       	rjmp	.+66     	; 0xde2 <ISPProtocol_EnterISPMode+0x10c>
			break;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	7a d1       	rcall	.+756    	; 0x1098 <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	84 df       	rcall	.-248    	; 0xcb0 <ISPProtocol_DelayMS>
			ISPTarget_ChangeTargetResetLine(true);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	76 d1       	rcall	.+748    	; 0x1098 <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	80 df       	rcall	.-256    	; 0xcb0 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(true);
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9f ef       	ldi	r25, 0xFF	; 255
     db4:	98 0f       	add	r25, r24
     db6:	9c 83       	std	Y+4, r25	; 0x04
     db8:	88 23       	and	r24, r24
     dba:	81 f0       	breq	.+32     	; 0xddc <ISPProtocol_EnterISPMode+0x106>
     dbc:	8a b5       	in	r24, 0x2a	; 42
     dbe:	81 11       	cpse	r24, r1
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <ISPProtocol_EnterISPMode+0xf4>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <ISPProtocol_EnterISPMode+0x10a>
     dc4:	ce 01       	movw	r24, r28
     dc6:	0c 96       	adiw	r24, 0x0c	; 12
     dc8:	6c 01       	movw	r12, r24
     dca:	8e 01       	movw	r16, r28
     dcc:	08 5f       	subi	r16, 0xF8	; 248
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	fe 01       	movw	r30, r28
     dd2:	3c 96       	adiw	r30, 0x0c	; 12
     dd4:	7f 01       	movw	r14, r30
     dd6:	bf cf       	rjmp	.-130    	; 0xd56 <ISPProtocol_EnterISPMode+0x80>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     dd8:	80 ec       	ldi	r24, 0xC0	; 192
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <ISPProtocol_EnterISPMode+0x10c>
     ddc:	80 ec       	ldi	r24, 0xC0	; 192
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <ISPProtocol_EnterISPMode+0x10c>
     de0:	80 ec       	ldi	r24, 0xC0	; 192
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     de2:	e1 ef       	ldi	r30, 0xF1	; 241
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	90 e1       	ldi	r25, 0x10	; 16
     de8:	90 83       	st	Z, r25
     dea:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dec:	e8 ee       	ldi	r30, 0xE8	; 232
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8e 77       	andi	r24, 0x7E	; 126
     df4:	80 83       	st	Z, r24
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     df6:	2f 96       	adiw	r28, 0x0f	; 15
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	08 95       	ret

00000e14 <ISPProtocol_LeaveISPMode>:

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ISPProtocol_LeaveISPMode+0xa>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e32:	08 ee       	ldi	r16, 0xE8	; 232
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	f8 01       	movw	r30, r16
     e38:	80 81       	ld	r24, Z
     e3a:	8b 77       	andi	r24, 0x7B	; 123
     e3c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e44:	ec ee       	ldi	r30, 0xEC	; 236
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	2f df       	rcall	.-418    	; 0xcb0 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(false);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	21 d1       	rcall	.+578    	; 0x1098 <ISPTarget_ChangeTargetResetLine>
	ISPTarget_DisableTargetISP();
     e56:	aa d0       	rcall	.+340    	; 0xfac <ISPTarget_DisableTargetISP>
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	2a df       	rcall	.-428    	; 0xcb0 <ISPProtocol_DelayMS>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e5c:	e1 ef       	ldi	r30, 0xF1	; 241
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	81 e1       	ldi	r24, 0x11	; 17
     e62:	80 83       	st	Z, r24
     e64:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e66:	f8 01       	movw	r30, r16
     e68:	80 81       	ld	r24, Z
     e6a:	8e 77       	andi	r24, 0x7E	; 126
     e6c:	80 83       	st	Z, r24

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <ISPProtocol_ChipErase>:
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 d0       	rcall	.+0      	; 0xe8a <ISPProtocol_ChipErase+0xe>
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <ISPProtocol_ChipErase+0x10>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <ISPProtocol_ChipErase+0x12>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	66 e0       	ldi	r22, 0x06	; 6
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 32 12 	call	0x2464	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ea2:	e8 ee       	ldi	r30, 0xE8	; 232
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8b 77       	andi	r24, 0x7B	; 123
     eaa:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     eb2:	ec ee       	ldi	r30, 0xEC	; 236
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	80 83       	st	Z, r24
     ebc:	8e 01       	movw	r16, r28
     ebe:	0d 5f       	subi	r16, 0xFD	; 253
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	7e 01       	movw	r14, r28
     ec4:	87 e0       	ldi	r24, 0x07	; 7
     ec6:	e8 0e       	add	r14, r24
     ec8:	f1 1c       	adc	r15, r1

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     eca:	f8 01       	movw	r30, r16
     ecc:	81 91       	ld	r24, Z+
     ece:	8f 01       	movw	r16, r30
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     ed0:	90 91 3e 01 	lds	r25, 0x013E
     ed4:	99 23       	and	r25, r25
     ed6:	29 f0       	breq	.+10     	; 0xee2 <ISPProtocol_ChipErase+0x66>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ed8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eda:	0d b4       	in	r0, 0x2d	; 45
     edc:	07 fe       	sbrs	r0, 7
     ede:	fd cf       	rjmp	.-6      	; 0xeda <ISPProtocol_ChipErase+0x5e>
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <ISPProtocol_ChipErase+0x68>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     ee2:	bb d0       	rcall	.+374    	; 0x105a <ISPTarget_TransferSoftSPIByte>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     ee4:	0e 15       	cp	r16, r14
     ee6:	1f 05       	cpc	r17, r15
     ee8:	81 f7       	brne	.-32     	; 0xeca <ISPProtocol_ChipErase+0x4e>
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	81 11       	cpse	r24, r1
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <ISPProtocol_ChipErase+0x7c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	de de       	rcall	.-580    	; 0xcb0 <ISPProtocol_DelayMS>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <ISPProtocol_ChipErase+0x7e>

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     ef8:	dd d0       	rcall	.+442    	; 0x10b4 <ISPTarget_WaitWhileTargetBusy>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     efa:	e1 ef       	ldi	r30, 0xF1	; 241
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	92 e1       	ldi	r25, 0x12	; 18
     f00:	90 83       	st	Z, r25
     f02:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f04:	e8 ee       	ldi	r30, 0xE8	; 232
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8e 77       	andi	r24, 0x7E	; 126
     f0c:	80 83       	st	Z, r24

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     f0e:	26 96       	adiw	r28, 0x06	; 6
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <__vector_17>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	8f 93       	push	r24
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     f34:	19 99       	sbic	0x03, 1	; 3
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <__vector_17+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
     f38:	80 91 81 01 	lds	r24, 0x0181
     f3c:	88 23       	and	r24, r24
     f3e:	14 f4       	brge	.+4      	; 0xf44 <__vector_17+0x1c>
		  PORTB |=  (1 << 2);
     f40:	2a 9a       	sbi	0x05, 2	; 5
     f42:	19 c0       	rjmp	.+50     	; 0xf76 <__vector_17+0x4e>
		else
		  PORTB &= ~(1 << 2);
     f44:	2a 98       	cbi	0x05, 2	; 5
     f46:	17 c0       	rjmp	.+46     	; 0xf76 <__vector_17+0x4e>
	}
	else
	{
		SoftSPI_Data <<= 1;
     f48:	80 91 81 01 	lds	r24, 0x0181
     f4c:	88 0f       	add	r24, r24
     f4e:	80 93 81 01 	sts	0x0181, r24

		if (!(--SoftSPI_BitsRemaining))
     f52:	80 91 80 01 	lds	r24, 0x0180
     f56:	81 50       	subi	r24, 0x01	; 1
     f58:	80 93 80 01 	sts	0x0180, r24
     f5c:	81 11       	cpse	r24, r1
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__vector_17+0x40>
		{
			TCCR1B = 0;
     f60:	10 92 81 00 	sts	0x0081, r1
			TIFR1  = (1 << OCF1A);
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	86 bb       	out	0x16, r24	; 22
		}

		if (PINB & (1 << 3))
     f68:	1b 9b       	sbis	0x03, 3	; 3
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <__vector_17+0x4e>
		  SoftSPI_Data |= (1 << 0);
     f6c:	80 91 81 01 	lds	r24, 0x0181
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	80 93 81 01 	sts	0x0181, r24
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
     f76:	19 9a       	sbi	0x03, 1	; 3
}
     f78:	8f 91       	pop	r24
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <ISPTarget_ConfigureRescueClock>:
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
		#else
		DDRB |= (1 << 5);
     f84:	25 9a       	sbi	0x04, 5	; 4
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
     f86:	10 92 6f 00 	sts	0x006F, r1
		TCNT1  = 0;
     f8a:	10 92 85 00 	sts	0x0085, r1
     f8e:	10 92 84 00 	sts	0x0084, r1
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	90 93 89 00 	sts	0x0089, r25
     f9a:	80 93 88 00 	sts	0x0088, r24
		TCCR1A = (1 << COM1A0);
     f9e:	80 e4       	ldi	r24, 0x40	; 64
     fa0:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = ((1 << WGM12) | (1 << CS10));
     fa4:	89 e0       	ldi	r24, 0x09	; 9
     fa6:	80 93 81 00 	sts	0x0081, r24
     faa:	08 95       	ret

00000fac <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
     fac:	80 91 3e 01 	lds	r24, 0x013E
     fb0:	88 23       	and	r24, r24
     fb2:	49 f0       	breq	.+18     	; 0xfc6 <ISPTarget_DisableTargetISP+0x1a>

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void);
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     fb4:	84 b1       	in	r24, 0x04	; 4
     fb6:	89 7f       	andi	r24, 0xF9	; 249
     fb8:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
     fba:	85 b1       	in	r24, 0x05	; 5
     fbc:	86 7f       	andi	r24, 0xF6	; 246
     fbe:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
     fc0:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
     fc2:	1d bc       	out	0x2d, r1	; 45
     fc4:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
     fc6:	84 b1       	in	r24, 0x04	; 4
     fc8:	89 7f       	andi	r24, 0xF9	; 249
     fca:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
     fcc:	85 b1       	in	r24, 0x05	; 5
     fce:	86 7f       	andi	r24, 0xF6	; 246
     fd0:	85 b9       	out	0x05, r24	; 5

		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
     fd2:	d8 cf       	rjmp	.-80     	; 0xf84 <ISPTarget_ConfigureRescueClock>
     fd4:	08 95       	ret

00000fd6 <ISPTarget_ConfigureSoftwareSPI>:
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	90 93 6f 00 	sts	0x006F, r25
	TCNT1  = 0;
     fdc:	10 92 85 00 	sts	0x0085, r1
     fe0:	10 92 84 00 	sts	0x0084, r1
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
     fe4:	e8 2f       	mov	r30, r24
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	e4 52       	subi	r30, 0x24	; 36
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	85 91       	lpm	r24, Z+
     ff2:	94 91       	lpm	r25, Z
     ff4:	90 93 89 00 	sts	0x0089, r25
     ff8:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 0;
     ffc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
    1000:	10 92 81 00 	sts	0x0081, r1
    1004:	08 95       	ret

00001006 <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
    1006:	88 e9       	ldi	r24, 0x98	; 152
    1008:	e7 d2       	rcall	.+1486   	; 0x15d8 <V2Params_GetParameterValue>

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
    100a:	87 30       	cpi	r24, 0x07	; 7
    100c:	e0 f4       	brcc	.+56     	; 0x1046 <ISPTarget_EnableTargetISP+0x40>
	{
		HardwareSPIMode = true;
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	90 93 3e 01 	sts	0x013E, r25

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
    1014:	e8 2f       	mov	r30, r24
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	ec 5d       	subi	r30, 0xDC	; 220
    101a:	fd 4f       	sbci	r31, 0xFD	; 253
    101c:	e4 91       	lpm	r30, Z
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
    101e:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
    1020:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
    1022:	84 b1       	in	r24, 0x04	; 4
    1024:	86 60       	ori	r24, 0x06	; 6
    1026:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
    1028:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
    102a:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
    102c:	e6 ff       	sbrs	r30, 6
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <ISPTarget_EnableTargetISP+0x32>
				  SPSR |= (1 << SPI2X);
    1030:	8d b5       	in	r24, 0x2d	; 45
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	8d bd       	out	0x2d, r24	; 45
    1036:	03 c0       	rjmp	.+6      	; 0x103e <ISPTarget_EnableTargetISP+0x38>
				else
				  SPSR &= ~(1 << SPI2X);
    1038:	8d b5       	in	r24, 0x2d	; 45
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	8d bd       	out	0x2d, r24	; 45

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    103e:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
    1040:	e0 65       	ori	r30, 0x50	; 80
    1042:	ec bd       	out	0x2c, r30	; 44
    1044:	08 95       	ret
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    1046:	10 92 3e 01 	sts	0x013E, r1

		DDRB  |= ((1 << 1) | (1 << 2));
    104a:	94 b1       	in	r25, 0x04	; 4
    104c:	96 60       	ori	r25, 0x06	; 6
    104e:	94 b9       	out	0x04, r25	; 4
		PORTB |= ((1 << 0) | (1 << 3));
    1050:	95 b1       	in	r25, 0x05	; 5
    1052:	99 60       	ori	r25, 0x09	; 9
    1054:	95 b9       	out	0x05, r25	; 5

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
    1056:	bf cf       	rjmp	.-130    	; 0xfd6 <ISPTarget_ConfigureSoftwareSPI>
    1058:	08 95       	ret

0000105a <ISPTarget_TransferSoftSPIByte>:
 *
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
    105a:	80 93 81 01 	sts	0x0181, r24
	SoftSPI_BitsRemaining = 8;
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	80 93 80 01 	sts	0x0180, r24

	/* Set initial MOSI pin state according to the byte to be transferred */
	if (SoftSPI_Data & (1 << 7))
    1064:	80 91 81 01 	lds	r24, 0x0181
    1068:	88 23       	and	r24, r24
    106a:	14 f4       	brge	.+4      	; 0x1070 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    106c:	2a 9a       	sbi	0x05, 2	; 5
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    1070:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    1072:	10 92 85 00 	sts	0x0085, r1
    1076:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    107a:	8a e0       	ldi	r24, 0x0A	; 10
    107c:	80 93 81 00 	sts	0x0081, r24
	while (SoftSPI_BitsRemaining && TimeoutTicksRemaining);
    1080:	80 91 80 01 	lds	r24, 0x0180
    1084:	88 23       	and	r24, r24
    1086:	19 f0       	breq	.+6      	; 0x108e <ISPTarget_TransferSoftSPIByte+0x34>
    1088:	8a b5       	in	r24, 0x2a	; 42
    108a:	81 11       	cpse	r24, r1
    108c:	f9 cf       	rjmp	.-14     	; 0x1080 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    108e:	10 92 81 00 	sts	0x0081, r1

	return SoftSPI_Data;
    1092:	80 91 81 01 	lds	r24, 0x0181
}
    1096:	08 95       	ret

00001098 <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    1098:	88 23       	and	r24, r24
    109a:	49 f0       	breq	.+18     	; 0x10ae <ISPTarget_ChangeTargetResetLine+0x16>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    109c:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    109e:	8e e9       	ldi	r24, 0x9E	; 158
    10a0:	9b d2       	rcall	.+1334   	; 0x15d8 <V2Params_GetParameterValue>
    10a2:	81 11       	cpse	r24, r1
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <ISPTarget_ChangeTargetResetLine+0x12>
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    10a6:	2c 9a       	sbi	0x05, 4	; 5
    10a8:	08 95       	ret
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10aa:	2c 98       	cbi	0x05, 4	; 5
    10ac:	08 95       	ret
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    10ae:	24 98       	cbi	0x04, 4	; 4
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10b0:	2c 98       	cbi	0x05, 4	; 5
    10b2:	08 95       	ret

000010b4 <ISPTarget_WaitWhileTargetBusy>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    10b4:	80 91 3e 01 	lds	r24, 0x013E
    10b8:	88 23       	and	r24, r24
    10ba:	31 f0       	breq	.+12     	; 0x10c8 <ISPTarget_WaitWhileTargetBusy+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10bc:	80 ef       	ldi	r24, 0xF0	; 240
    10be:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    10c0:	0d b4       	in	r0, 0x2d	; 45
    10c2:	07 fe       	sbrs	r0, 7
    10c4:	fd cf       	rjmp	.-6      	; 0x10c0 <ISPTarget_WaitWhileTargetBusy+0xc>
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <ISPTarget_WaitWhileTargetBusy+0x18>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10c8:	80 ef       	ldi	r24, 0xF0	; 240
    10ca:	c7 df       	rcall	.-114    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    10cc:	80 91 3e 01 	lds	r24, 0x013E
    10d0:	88 23       	and	r24, r24
    10d2:	29 f0       	breq	.+10     	; 0x10de <ISPTarget_WaitWhileTargetBusy+0x2a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    10d6:	0d b4       	in	r0, 0x2d	; 45
    10d8:	07 fe       	sbrs	r0, 7
    10da:	fd cf       	rjmp	.-6      	; 0x10d6 <ISPTarget_WaitWhileTargetBusy+0x22>
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <ISPTarget_WaitWhileTargetBusy+0x2e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	bc df       	rcall	.-136    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    10e2:	80 91 3e 01 	lds	r24, 0x013E
    10e6:	88 23       	and	r24, r24
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <ISPTarget_WaitWhileTargetBusy+0x40>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    10ec:	0d b4       	in	r0, 0x2d	; 45
    10ee:	07 fe       	sbrs	r0, 7
    10f0:	fd cf       	rjmp	.-6      	; 0x10ec <ISPTarget_WaitWhileTargetBusy+0x38>
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <ISPTarget_WaitWhileTargetBusy+0x44>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	b1 df       	rcall	.-158    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    10f8:	80 91 3e 01 	lds	r24, 0x013E
    10fc:	88 23       	and	r24, r24
    10fe:	31 f0       	breq	.+12     	; 0x110c <ISPTarget_WaitWhileTargetBusy+0x58>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1100:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1102:	0d b4       	in	r0, 0x2d	; 45
    1104:	07 fe       	sbrs	r0, 7
    1106:	fd cf       	rjmp	.-6      	; 0x1102 <ISPTarget_WaitWhileTargetBusy+0x4e>
				return SPDR;
    1108:	8e b5       	in	r24, 0x2e	; 46
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <ISPTarget_WaitWhileTargetBusy+0x5c>
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	a5 df       	rcall	.-182    	; 0x105a <ISPTarget_TransferSoftSPIByte>
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && TimeoutTicksRemaining);
    1110:	80 ff       	sbrs	r24, 0
    1112:	03 c0       	rjmp	.+6      	; 0x111a <ISPTarget_WaitWhileTargetBusy+0x66>
    1114:	8a b5       	in	r24, 0x2a	; 42
    1116:	81 11       	cpse	r24, r1
    1118:	cd cf       	rjmp	.-102    	; 0x10b4 <ISPTarget_WaitWhileTargetBusy>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
    111a:	8a b5       	in	r24, 0x2a	; 42
    111c:	81 11       	cpse	r24, r1
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <ISPTarget_WaitWhileTargetBusy+0x70>
    1120:	81 e8       	ldi	r24, 0x81	; 129
    1122:	08 95       	ret
    1124:	80 e0       	ldi	r24, 0x00	; 0
}
    1126:	08 95       	ret

00001128 <ISPTarget_LoadExtendedAddress>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1128:	80 91 3e 01 	lds	r24, 0x013E
    112c:	88 23       	and	r24, r24
    112e:	31 f0       	breq	.+12     	; 0x113c <ISPTarget_LoadExtendedAddress+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1130:	8d e4       	ldi	r24, 0x4D	; 77
    1132:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1134:	0d b4       	in	r0, 0x2d	; 45
    1136:	07 fe       	sbrs	r0, 7
    1138:	fd cf       	rjmp	.-6      	; 0x1134 <ISPTarget_LoadExtendedAddress+0xc>
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <ISPTarget_LoadExtendedAddress+0x18>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    113c:	8d e4       	ldi	r24, 0x4D	; 77
    113e:	8d df       	rcall	.-230    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1140:	80 91 3e 01 	lds	r24, 0x013E
    1144:	88 23       	and	r24, r24
    1146:	29 f0       	breq	.+10     	; 0x1152 <ISPTarget_LoadExtendedAddress+0x2a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1148:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    114a:	0d b4       	in	r0, 0x2d	; 45
    114c:	07 fe       	sbrs	r0, 7
    114e:	fd cf       	rjmp	.-6      	; 0x114a <ISPTarget_LoadExtendedAddress+0x22>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <ISPTarget_LoadExtendedAddress+0x2e>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	82 df       	rcall	.-252    	; 0x105a <ISPTarget_TransferSoftSPIByte>
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
    1156:	80 91 84 01 	lds	r24, 0x0184
    115a:	90 91 85 01 	lds	r25, 0x0185
    115e:	a0 91 86 01 	lds	r26, 0x0186
    1162:	b0 91 87 01 	lds	r27, 0x0187
    1166:	cd 01       	movw	r24, r26
    1168:	aa 27       	eor	r26, r26
    116a:	bb 27       	eor	r27, r27
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    116c:	20 91 3e 01 	lds	r18, 0x013E
    1170:	22 23       	and	r18, r18
    1172:	29 f0       	breq	.+10     	; 0x117e <ISPTarget_LoadExtendedAddress+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1174:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1176:	0d b4       	in	r0, 0x2d	; 45
    1178:	07 fe       	sbrs	r0, 7
    117a:	fd cf       	rjmp	.-6      	; 0x1176 <ISPTarget_LoadExtendedAddress+0x4e>
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <ISPTarget_LoadExtendedAddress+0x58>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    117e:	6d df       	rcall	.-294    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1180:	80 91 3e 01 	lds	r24, 0x013E
    1184:	88 23       	and	r24, r24
    1186:	29 f0       	breq	.+10     	; 0x1192 <ISPTarget_LoadExtendedAddress+0x6a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1188:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    118a:	0d b4       	in	r0, 0x2d	; 45
    118c:	07 fe       	sbrs	r0, 7
    118e:	fd cf       	rjmp	.-6      	; 0x118a <ISPTarget_LoadExtendedAddress+0x62>
    1190:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	62 cf       	rjmp	.-316    	; 0x105a <ISPTarget_TransferSoftSPIByte>
    1196:	08 95       	ret

00001198 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	16 2f       	mov	r17, r22
    11a2:	d4 2f       	mov	r29, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    11a4:	8e 77       	andi	r24, 0x7E	; 126
    11a6:	e8 2f       	mov	r30, r24
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	e8 30       	cpi	r30, 0x08	; 8
    11ac:	f1 05       	cpc	r31, r1
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <ISPTarget_WaitForProgComplete+0x1a>
    11b0:	4d c0       	rjmp	.+154    	; 0x124c <ISPTarget_WaitForProgComplete+0xb4>
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <ISPTarget_WaitForProgComplete+0x28>
    11b4:	e2 30       	cpi	r30, 0x02	; 2
    11b6:	f1 05       	cpc	r31, r1
    11b8:	69 f0       	breq	.+26     	; 0x11d4 <ISPTarget_WaitForProgComplete+0x3c>
    11ba:	34 97       	sbiw	r30, 0x04	; 4
    11bc:	79 f0       	breq	.+30     	; 0x11dc <ISPTarget_WaitForProgComplete+0x44>
    11be:	48 c0       	rjmp	.+144    	; 0x1250 <ISPTarget_WaitForProgComplete+0xb8>
    11c0:	e0 32       	cpi	r30, 0x20	; 32
    11c2:	f1 05       	cpc	r31, r1
    11c4:	59 f0       	breq	.+22     	; 0x11dc <ISPTarget_WaitForProgComplete+0x44>
    11c6:	e0 34       	cpi	r30, 0x40	; 64
    11c8:	f1 05       	cpc	r31, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <ISPTarget_WaitForProgComplete+0x36>
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <ISPTarget_WaitForProgComplete+0xb4>
    11ce:	70 97       	sbiw	r30, 0x10	; 16
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <ISPTarget_WaitForProgComplete+0x3c>
    11d2:	3e c0       	rjmp	.+124    	; 0x1250 <ISPTarget_WaitForProgComplete+0xb8>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    11d4:	82 2f       	mov	r24, r18
    11d6:	6c dd       	rcall	.-1320   	; 0xcb0 <ISPProtocol_DelayMS>
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    11d8:	80 e0       	ldi	r24, 0x00	; 0
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
			break;
    11da:	3d c0       	rjmp	.+122    	; 0x1256 <ISPTarget_WaitForProgComplete+0xbe>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
    11dc:	c7 2f       	mov	r28, r23
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    11de:	90 91 3e 01 	lds	r25, 0x013E
    11e2:	99 23       	and	r25, r25
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <ISPTarget_WaitForProgComplete+0x58>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11e6:	0e bd       	out	0x2e, r16	; 46
				while (!(SPSR & (1 << SPIF)));
    11e8:	0d b4       	in	r0, 0x2d	; 45
    11ea:	07 fe       	sbrs	r0, 7
    11ec:	fd cf       	rjmp	.-6      	; 0x11e8 <ISPTarget_WaitForProgComplete+0x50>
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <ISPTarget_WaitForProgComplete+0x5c>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    11f0:	80 2f       	mov	r24, r16
    11f2:	33 df       	rcall	.-410    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    11f4:	90 91 3e 01 	lds	r25, 0x013E
    11f8:	99 23       	and	r25, r25
    11fa:	29 f0       	breq	.+10     	; 0x1206 <ISPTarget_WaitForProgComplete+0x6e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    11fc:	ce bd       	out	0x2e, r28	; 46
				while (!(SPSR & (1 << SPIF)));
    11fe:	0d b4       	in	r0, 0x2d	; 45
    1200:	07 fe       	sbrs	r0, 7
    1202:	fd cf       	rjmp	.-6      	; 0x11fe <ISPTarget_WaitForProgComplete+0x66>
    1204:	02 c0       	rjmp	.+4      	; 0x120a <ISPTarget_WaitForProgComplete+0x72>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1206:	8c 2f       	mov	r24, r28
    1208:	28 df       	rcall	.-432    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    120a:	90 91 3e 01 	lds	r25, 0x013E
    120e:	99 23       	and	r25, r25
    1210:	29 f0       	breq	.+10     	; 0x121c <ISPTarget_WaitForProgComplete+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1212:	1e bd       	out	0x2e, r17	; 46
				while (!(SPSR & (1 << SPIF)));
    1214:	0d b4       	in	r0, 0x2d	; 45
    1216:	07 fe       	sbrs	r0, 7
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <ISPTarget_WaitForProgComplete+0x7c>
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <ISPTarget_WaitForProgComplete+0x88>
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    121c:	81 2f       	mov	r24, r17
    121e:	1d df       	rcall	.-454    	; 0x105a <ISPTarget_TransferSoftSPIByte>
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    1220:	90 91 3e 01 	lds	r25, 0x013E
    1224:	99 23       	and	r25, r25
    1226:	31 f0       	breq	.+12     	; 0x1234 <ISPTarget_WaitForProgComplete+0x9c>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1228:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    122a:	0d b4       	in	r0, 0x2d	; 45
    122c:	07 fe       	sbrs	r0, 7
    122e:	fd cf       	rjmp	.-6      	; 0x122a <ISPTarget_WaitForProgComplete+0x92>
				return SPDR;
    1230:	8e b5       	in	r24, 0x2e	; 46
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <ISPTarget_WaitForProgComplete+0xa0>
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	11 df       	rcall	.-478    	; 0x105a <ISPTarget_TransferSoftSPIByte>
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
    1238:	d8 13       	cpse	r29, r24
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <ISPTarget_WaitForProgComplete+0xaa>
    123c:	9a b5       	in	r25, 0x2a	; 42
    123e:	91 11       	cpse	r25, r1
    1240:	ce cf       	rjmp	.-100    	; 0x11de <ISPTarget_WaitForProgComplete+0x46>

			if (!(TimeoutTicksRemaining))
    1242:	8a b5       	in	r24, 0x2a	; 42
    1244:	81 11       	cpse	r24, r1
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <ISPTarget_WaitForProgComplete+0xbc>
			  ProgrammingStatus = STATUS_CMD_TOUT;
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <ISPTarget_WaitForProgComplete+0xbe>

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    124c:	33 df       	rcall	.-410    	; 0x10b4 <ISPTarget_WaitWhileTargetBusy>
			break;
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <ISPTarget_WaitForProgComplete+0xbe>
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <ISPTarget_WaitForProgComplete+0xbe>
    1254:	80 e0       	ldi	r24, 0x00	; 0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    1256:	94 e6       	ldi	r25, 0x64	; 100
    1258:	9a bd       	out	0x2a, r25	; 42

	return ProgrammingStatus;
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <__vector_21>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
    1264:	78 94       	sei
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
    1272:	8a b5       	in	r24, 0x2a	; 42
    1274:	88 23       	and	r24, r24
    1276:	21 f0       	breq	.+8      	; 0x1280 <__vector_21+0x1c>
	  TimeoutTicksRemaining--;
    1278:	8a b5       	in	r24, 0x2a	; 42
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	8a bd       	out	0x2a, r24	; 42
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <__vector_21+0x1e>
	else
	  TCCR0B = 0;
    1280:	15 bc       	out	0x25, r1	; 37
}
    1282:	8f 91       	pop	r24
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <V2Protocol_Init>:
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
    128e:	8b e9       	ldi	r24, 0x9B	; 155
    1290:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
    1296:	80 93 6e 00 	sts	0x006E, r24

	V2Params_LoadNonVolatileParamValues();
    129a:	7a d1       	rcall	.+756    	; 0x1590 <V2Params_LoadNonVolatileParamValues>

	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
    129c:	73 ce       	rjmp	.-794    	; 0xf84 <ISPTarget_ConfigureRescueClock>
    129e:	08 95       	ret

000012a0 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12b0:	c0 91 f1 00 	lds	r28, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    12b4:	84 e6       	ldi	r24, 0x64	; 100
    12b6:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
    12bc:	c4 31       	cpi	r28, 0x14	; 20
    12be:	09 f4       	brne	.+2      	; 0x12c2 <V2Protocol_ProcessCommand+0x22>
    12c0:	e5 c0       	rjmp	.+458    	; 0x148c <V2Protocol_ProcessCommand+0x1ec>
    12c2:	f8 f4       	brcc	.+62     	; 0x1302 <V2Protocol_ProcessCommand+0x62>
    12c4:	ca 30       	cpi	r28, 0x0A	; 10
    12c6:	09 f4       	brne	.+2      	; 0x12ca <V2Protocol_ProcessCommand+0x2a>
    12c8:	c3 c0       	rjmp	.+390    	; 0x1450 <V2Protocol_ProcessCommand+0x1b0>
    12ca:	60 f4       	brcc	.+24     	; 0x12e4 <V2Protocol_ProcessCommand+0x44>
    12cc:	c4 30       	cpi	r28, 0x04	; 4
    12ce:	30 f4       	brcc	.+12     	; 0x12dc <V2Protocol_ProcessCommand+0x3c>
    12d0:	c2 30       	cpi	r28, 0x02	; 2
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <V2Protocol_ProcessCommand+0x36>
    12d4:	5c c0       	rjmp	.+184    	; 0x138e <V2Protocol_ProcessCommand+0xee>
    12d6:	c1 30       	cpi	r28, 0x01	; 1
    12d8:	d1 f1       	breq	.+116    	; 0x134e <V2Protocol_ProcessCommand+0xae>
    12da:	2e c0       	rjmp	.+92     	; 0x1338 <V2Protocol_ProcessCommand+0x98>
    12dc:	c6 30       	cpi	r28, 0x06	; 6
    12de:	09 f4       	brne	.+2      	; 0x12e2 <V2Protocol_ProcessCommand+0x42>
    12e0:	8a c0       	rjmp	.+276    	; 0x13f6 <V2Protocol_ProcessCommand+0x156>
    12e2:	2a c0       	rjmp	.+84     	; 0x1338 <V2Protocol_ProcessCommand+0x98>
    12e4:	c1 31       	cpi	r28, 0x11	; 17
    12e6:	09 f4       	brne	.+2      	; 0x12ea <V2Protocol_ProcessCommand+0x4a>
    12e8:	cb c0       	rjmp	.+406    	; 0x1480 <V2Protocol_ProcessCommand+0x1e0>
    12ea:	20 f4       	brcc	.+8      	; 0x12f4 <V2Protocol_ProcessCommand+0x54>
    12ec:	c0 31       	cpi	r28, 0x10	; 16
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <V2Protocol_ProcessCommand+0x52>
    12f0:	c5 c0       	rjmp	.+394    	; 0x147c <V2Protocol_ProcessCommand+0x1dc>
    12f2:	22 c0       	rjmp	.+68     	; 0x1338 <V2Protocol_ProcessCommand+0x98>
    12f4:	c2 31       	cpi	r28, 0x12	; 18
    12f6:	09 f4       	brne	.+2      	; 0x12fa <V2Protocol_ProcessCommand+0x5a>
    12f8:	cc c0       	rjmp	.+408    	; 0x1492 <V2Protocol_ProcessCommand+0x1f2>
    12fa:	c3 31       	cpi	r28, 0x13	; 19
    12fc:	09 f4       	brne	.+2      	; 0x1300 <V2Protocol_ProcessCommand+0x60>
    12fe:	c2 c0       	rjmp	.+388    	; 0x1484 <V2Protocol_ProcessCommand+0x1e4>
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <V2Protocol_ProcessCommand+0x98>
    1302:	c9 31       	cpi	r28, 0x19	; 25
    1304:	09 f4       	brne	.+2      	; 0x1308 <V2Protocol_ProcessCommand+0x68>
    1306:	ca c0       	rjmp	.+404    	; 0x149c <V2Protocol_ProcessCommand+0x1fc>
    1308:	60 f4       	brcc	.+24     	; 0x1322 <V2Protocol_ProcessCommand+0x82>
    130a:	c6 31       	cpi	r28, 0x16	; 22
    130c:	09 f4       	brne	.+2      	; 0x1310 <V2Protocol_ProcessCommand+0x70>
    130e:	be c0       	rjmp	.+380    	; 0x148c <V2Protocol_ProcessCommand+0x1ec>
    1310:	08 f4       	brcc	.+2      	; 0x1314 <V2Protocol_ProcessCommand+0x74>
    1312:	b8 c0       	rjmp	.+368    	; 0x1484 <V2Protocol_ProcessCommand+0x1e4>
    1314:	c7 31       	cpi	r28, 0x17	; 23
    1316:	09 f4       	brne	.+2      	; 0x131a <V2Protocol_ProcessCommand+0x7a>
    1318:	c1 c0       	rjmp	.+386    	; 0x149c <V2Protocol_ProcessCommand+0x1fc>
    131a:	c8 31       	cpi	r28, 0x18	; 24
    131c:	09 f4       	brne	.+2      	; 0x1320 <V2Protocol_ProcessCommand+0x80>
    131e:	bb c0       	rjmp	.+374    	; 0x1496 <V2Protocol_ProcessCommand+0x1f6>
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <V2Protocol_ProcessCommand+0x98>
    1322:	cd 31       	cpi	r28, 0x1D	; 29
    1324:	09 f4       	brne	.+2      	; 0x1328 <V2Protocol_ProcessCommand+0x88>
    1326:	bd c0       	rjmp	.+378    	; 0x14a2 <V2Protocol_ProcessCommand+0x202>
    1328:	08 f4       	brcc	.+2      	; 0x132c <V2Protocol_ProcessCommand+0x8c>
    132a:	b5 c0       	rjmp	.+362    	; 0x1496 <V2Protocol_ProcessCommand+0x1f6>
    132c:	c0 35       	cpi	r28, 0x50	; 80
    132e:	09 f4       	brne	.+2      	; 0x1332 <V2Protocol_ProcessCommand+0x92>
    1330:	bc c0       	rjmp	.+376    	; 0x14aa <V2Protocol_ProcessCommand+0x20a>
    1332:	c1 35       	cpi	r28, 0x51	; 81
    1334:	09 f4       	brne	.+2      	; 0x1338 <V2Protocol_ProcessCommand+0x98>
    1336:	b7 c0       	rjmp	.+366    	; 0x14a6 <V2Protocol_ProcessCommand+0x206>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1338:	20 91 f3 00 	lds	r18, 0x00F3
    133c:	80 91 f2 00 	lds	r24, 0x00F2
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	92 2b       	or	r25, r18
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
    1344:	80 34       	cpi	r24, 0x40	; 64
    1346:	91 05       	cpc	r25, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <V2Protocol_ProcessCommand+0xac>
    134a:	b1 c0       	rjmp	.+354    	; 0x14ae <V2Protocol_ProcessCommand+0x20e>
    134c:	cb c0       	rjmp	.+406    	; 0x14e4 <V2Protocol_ProcessCommand+0x244>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    134e:	c8 ee       	ldi	r28, 0xE8	; 232
    1350:	d0 e0       	ldi	r29, 0x00	; 0
    1352:	88 81       	ld	r24, Y
    1354:	8b 77       	andi	r24, 0x7B	; 123
    1356:	88 83       	st	Y, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    135e:	ec ee       	ldi	r30, 0xEC	; 236
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1368:	e1 ef       	ldi	r30, 0xF1	; 241
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 83       	st	Z, r24
    1370:	10 82       	st	Z, r1
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	80 83       	st	Z, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	6a e0       	ldi	r22, 0x0A	; 10
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	85 e7       	ldi	r24, 0x75	; 117
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	0e 94 d5 11 	call	0x23aa	; 0x23aa <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1386:	88 81       	ld	r24, Y
    1388:	8e 77       	andi	r24, 0x7E	; 126
    138a:	88 83       	st	Y, r24
    138c:	c0 c0       	rjmp	.+384    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    138e:	d0 91 f1 00 	lds	r29, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
    1392:	c2 30       	cpi	r28, 0x02	; 2
    1394:	09 f0       	breq	.+2      	; 0x1398 <V2Protocol_ProcessCommand+0xf8>
    1396:	c7 c0       	rjmp	.+398    	; 0x1526 <V2Protocol_ProcessCommand+0x286>
    1398:	e1 ef       	ldi	r30, 0xF1	; 241
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	c0 81       	ld	r28, Z
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    139e:	a8 ee       	ldi	r26, 0xE8	; 232
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	8c 91       	ld	r24, X
    13a4:	8b 77       	andi	r24, 0x7B	; 123
    13a6:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    13ae:	ac ee       	ldi	r26, 0xEC	; 236
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	8c 91       	ld	r24, X
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13b8:	90 83       	st	Z, r25
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
    13ba:	8d 2f       	mov	r24, r29
    13bc:	05 d1       	rcall	.+522    	; 0x15c8 <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
    13be:	81 ff       	sbrs	r24, 1
    13c0:	11 c0       	rjmp	.+34     	; 0x13e4 <V2Protocol_ProcessCommand+0x144>
    13c2:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
    13c6:	6c 2f       	mov	r22, r28
    13c8:	8d 2f       	mov	r24, r29
    13ca:	0e d1       	rcall	.+540    	; 0x15e8 <V2Params_SetParameterValue>
    13cc:	0e c0       	rjmp	.+28     	; 0x13ea <V2Protocol_ProcessCommand+0x14a>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
    13ce:	80 ff       	sbrs	r24, 0
    13d0:	09 c0       	rjmp	.+18     	; 0x13e4 <V2Protocol_ProcessCommand+0x144>
    13d2:	01 ef       	ldi	r16, 0xF1	; 241
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	f8 01       	movw	r30, r16
    13d8:	10 82       	st	Z, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
    13da:	8d 2f       	mov	r24, r29
    13dc:	fd d0       	rcall	.+506    	; 0x15d8 <V2Params_GetParameterValue>
    13de:	f8 01       	movw	r30, r16
    13e0:	80 83       	st	Z, r24
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <V2Protocol_ProcessCommand+0x14a>
    13e4:	80 ec       	ldi	r24, 0xC0	; 192
    13e6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ea:	e8 ee       	ldi	r30, 0xE8	; 232
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8e 77       	andi	r24, 0x7E	; 126
    13f2:	80 83       	st	Z, r24
    13f4:	8c c0       	rjmp	.+280    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	64 e0       	ldi	r22, 0x04	; 4
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	84 e8       	ldi	r24, 0x84	; 132
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 8f 12 	call	0x251e	; 0x251e <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1406:	e8 ee       	ldi	r30, 0xE8	; 232
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8b 77       	andi	r24, 0x7B	; 123
    140e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1416:	ec ee       	ldi	r30, 0xEC	; 236
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	80 83       	st	Z, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
    1420:	80 91 84 01 	lds	r24, 0x0184
    1424:	90 91 85 01 	lds	r25, 0x0185
    1428:	a0 91 86 01 	lds	r26, 0x0186
    142c:	b0 91 87 01 	lds	r27, 0x0187
    1430:	bb 23       	and	r27, r27
    1432:	1c f4       	brge	.+6      	; 0x143a <V2Protocol_ProcessCommand+0x19a>
	  MustLoadExtendedAddress = true;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 83 01 	sts	0x0183, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    143a:	e1 ef       	ldi	r30, 0xF1	; 241
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	86 e0       	ldi	r24, 0x06	; 6
    1440:	80 83       	st	Z, r24
    1442:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1444:	e8 ee       	ldi	r30, 0xE8	; 232
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8e 77       	andi	r24, 0x7E	; 126
    144c:	80 83       	st	Z, r24
    144e:	5f c0       	rjmp	.+190    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1450:	e8 ee       	ldi	r30, 0xE8	; 232
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8b 77       	andi	r24, 0x7B	; 123
    1458:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1460:	ac ee       	ldi	r26, 0xEC	; 236
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	8c 91       	ld	r24, X
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    146a:	a1 ef       	ldi	r26, 0xF1	; 241
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	8c 93       	st	X, r24
    1472:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1474:	80 81       	ld	r24, Z
    1476:	8e 77       	andi	r24, 0x7E	; 126
    1478:	80 83       	st	Z, r24
    147a:	49 c0       	rjmp	.+146    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
    147c:	2c dc       	rcall	.-1960   	; 0xcd6 <ISPProtocol_EnterISPMode>
			break;
    147e:	47 c0       	rjmp	.+142    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
    1480:	c9 dc       	rcall	.-1646   	; 0xe14 <ISPProtocol_LeaveISPMode>
			break;
    1482:	45 c0       	rjmp	.+138    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
    1484:	8c 2f       	mov	r24, r28
    1486:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ISPProtocol_ProgramMemory>
			break;
    148a:	41 c0       	rjmp	.+130    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
    148c:	8c 2f       	mov	r24, r28
    148e:	7e d9       	rcall	.-3332   	; 0x78c <ISPProtocol_ReadMemory>
			break;
    1490:	3e c0       	rjmp	.+124    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
    1492:	f4 dc       	rcall	.-1560   	; 0xe7c <ISPProtocol_ChipErase>
			break;
    1494:	3c c0       	rjmp	.+120    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
    1496:	8c 2f       	mov	r24, r28
    1498:	91 da       	rcall	.-2782   	; 0x9bc <ISPProtocol_ReadFuseLockSigOSCCAL>
			break;
    149a:	39 c0       	rjmp	.+114    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
    149c:	8c 2f       	mov	r24, r28
    149e:	f2 da       	rcall	.-2588   	; 0xa84 <ISPProtocol_WriteFuseLock>
			break;
    14a0:	36 c0       	rjmp	.+108    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
    14a2:	3e db       	rcall	.-2436   	; 0xb20 <ISPProtocol_SPIMulti>
			break;
    14a4:	34 c0       	rjmp	.+104    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
    14a6:	13 d5       	rcall	.+2598   	; 0x1ece <XPROGProtocol_SetMode>
			break;
    14a8:	32 c0       	rjmp	.+100    	; 0x150e <V2Protocol_ProcessCommand+0x26e>
		case CMD_XPROG:
			XPROGProtocol_Command();
    14aa:	41 d5       	rcall	.+2690   	; 0x1f2e <XPROGProtocol_Command>
			break;
    14ac:	30 c0       	rjmp	.+96     	; 0x150e <V2Protocol_ProcessCommand+0x26e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14ae:	08 ee       	ldi	r16, 0xE8	; 232
    14b0:	10 e0       	ldi	r17, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    14b2:	0f 2e       	mov	r0, r31
    14b4:	f3 ef       	ldi	r31, 0xF3	; 243
    14b6:	cf 2e       	mov	r12, r31
    14b8:	d1 2c       	mov	r13, r1
    14ba:	f0 2d       	mov	r31, r0
    14bc:	0f 2e       	mov	r0, r31
    14be:	f2 ef       	ldi	r31, 0xF2	; 242
    14c0:	ef 2e       	mov	r14, r31
    14c2:	f1 2c       	mov	r15, r1
    14c4:	f0 2d       	mov	r31, r0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 81       	ld	r24, Z
    14ca:	8b 77       	andi	r24, 0x7B	; 123
    14cc:	80 83       	st	Z, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    14ce:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    14d2:	f6 01       	movw	r30, r12
    14d4:	20 81       	ld	r18, Z
    14d6:	f7 01       	movw	r30, r14
    14d8:	80 81       	ld	r24, Z
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	92 2b       	or	r25, r18
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
    14de:	80 34       	cpi	r24, 0x40	; 64
    14e0:	91 05       	cpc	r25, r1
    14e2:	89 f3       	breq	.-30     	; 0x14c6 <V2Protocol_ProcessCommand+0x226>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14e4:	e8 ee       	ldi	r30, 0xE8	; 232
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8b 77       	andi	r24, 0x7B	; 123
    14ec:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    14f4:	ac ee       	ldi	r26, 0xEC	; 236
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	8c 91       	ld	r24, X
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14fe:	a1 ef       	ldi	r26, 0xF1	; 241
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	cc 93       	st	X, r28
    1504:	89 ec       	ldi	r24, 0xC9	; 201
    1506:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1508:	80 81       	ld	r24, Z
    150a:	8e 77       	andi	r24, 0x7E	; 126
    150c:	80 83       	st	Z, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
    150e:	15 bc       	out	0x25, r1	; 37

	Endpoint_WaitUntilReady();
    1510:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    151a:	ec ee       	ldi	r30, 0xEC	; 236
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8e 7f       	andi	r24, 0xFE	; 254
    1522:	80 83       	st	Z, r24
    1524:	15 c0       	rjmp	.+42     	; 0x1550 <V2Protocol_ProcessCommand+0x2b0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1526:	e8 ee       	ldi	r30, 0xE8	; 232
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	90 81       	ld	r25, Z
    152c:	9b 77       	andi	r25, 0x7B	; 123
    152e:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1536:	ec ee       	ldi	r30, 0xEC	; 236
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	90 81       	ld	r25, Z
    153c:	91 60       	ori	r25, 0x01	; 1
    153e:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1540:	c0 93 f1 00 	sts	0x00F1, r28
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
    1544:	8d 2f       	mov	r24, r29
    1546:	40 d0       	rcall	.+128    	; 0x15c8 <V2Params_GetParameterPrivileges>
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
    1548:	c3 30       	cpi	r28, 0x03	; 3
    154a:	09 f0       	breq	.+2      	; 0x154e <V2Protocol_ProcessCommand+0x2ae>
    154c:	4b cf       	rjmp	.-362    	; 0x13e4 <V2Protocol_ProcessCommand+0x144>
    154e:	3f cf       	rjmp	.-386    	; 0x13ce <V2Protocol_ProcessCommand+0x12e>
	TCCR0B = 0;

	Endpoint_WaitUntilReady();
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	08 95       	ret

00001562 <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
    1562:	90 91 3f 01 	lds	r25, 0x013F
    1566:	98 17       	cp	r25, r24
    1568:	31 f0       	breq	.+12     	; 0x1576 <V2Params_GetParamFromTable+0x14>
    156a:	e2 e4       	ldi	r30, 0x42	; 66
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	90 81       	ld	r25, Z
    1570:	98 13       	cpse	r25, r24
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <V2Params_GetParamFromTable+0x1e>
    1574:	02 c0       	rjmp	.+4      	; 0x157a <V2Params_GetParamFromTable+0x18>
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
    1576:	ef e3       	ldi	r30, 0x3F	; 63
    1578:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;
    157a:	8e 2f       	mov	r24, r30
    157c:	9f 2f       	mov	r25, r31
    157e:	08 95       	ret

		CurrTableItem++;
    1580:	33 96       	adiw	r30, 0x03	; 3
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	ed 35       	cpi	r30, 0x5D	; 93
    1586:	f9 07       	cpc	r31, r25
    1588:	91 f7       	brne	.-28     	; 0x156e <V2Params_GetParamFromTable+0xc>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
}
    158e:	08 95       	ret

00001590 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 57 17 	call	0x2eae	; 0x2eae <eeprom_read_byte>
    159c:	d8 2f       	mov	r29, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 57 17 	call	0x2eae	; 0x2eae <eeprom_read_byte>
    15a6:	c8 2f       	mov	r28, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
    15a8:	df 3f       	cpi	r29, 0xFF	; 255
    15aa:	21 f0       	breq	.+8      	; 0x15b4 <V2Params_LoadNonVolatileParamValues+0x24>
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
    15ac:	8e e9       	ldi	r24, 0x9E	; 158
    15ae:	d9 df       	rcall	.-78     	; 0x1562 <V2Params_GetParamFromTable>
    15b0:	fc 01       	movw	r30, r24
    15b2:	d2 83       	std	Z+2, r29	; 0x02

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
    15b4:	cf 3f       	cpi	r28, 0xFF	; 255
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <V2Params_LoadNonVolatileParamValues+0x30>
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
    15b8:	88 e9       	ldi	r24, 0x98	; 152
    15ba:	d3 df       	rcall	.-90     	; 0x1562 <V2Params_GetParamFromTable>
    15bc:	fc 01       	movw	r30, r24
    15be:	c2 83       	std	Z+2, r28	; 0x02
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <V2Params_UpdateParamValues>:

/** Updates any parameter values that are sourced from hardware rather than explicitly set by the host, such as
 *  VTARGET levels from the ADC on supported AVR models.
 */
void V2Params_UpdateParamValues(void)
{
    15c6:	08 95       	ret

000015c8 <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
    15c8:	cc df       	rcall	.-104    	; 0x1562 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <V2Params_GetParameterPrivileges+0xc>
	  return 0;

	return ParamInfo->ParamPrivileges;
    15ce:	fc 01       	movw	r30, r24
    15d0:	81 81       	ldd	r24, Z+1	; 0x01
    15d2:	08 95       	ret
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
    15d4:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamPrivileges;
}
    15d6:	08 95       	ret

000015d8 <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
    15d8:	c4 df       	rcall	.-120    	; 0x1562 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <V2Params_GetParameterValue+0xc>
	  return 0;

	return ParamInfo->ParamValue;
    15de:	fc 01       	movw	r30, r24
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	08 95       	ret
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
    15e4:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamValue;
}
    15e6:	08 95       	ret

000015e8 <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	c8 2f       	mov	r28, r24
    15ee:	d6 2f       	mov	r29, r22
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
    15f0:	b8 df       	rcall	.-144    	; 0x1562 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	89 f0       	breq	.+34     	; 0x1618 <V2Params_SetParameterValue+0x30>
	  return;

	ParamInfo->ParamValue = Value;
    15f6:	fc 01       	movw	r30, r24
    15f8:	d2 83       	std	Z+2, r29	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
    15fa:	ce 39       	cpi	r28, 0x9E	; 158
    15fc:	31 f4       	brne	.+12     	; 0x160a <V2Params_SetParameterValue+0x22>
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
    15fe:	6d 2f       	mov	r22, r29
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <eeprom_update_byte>
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <V2Params_SetParameterValue+0x30>

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
    160a:	c8 39       	cpi	r28, 0x98	; 152
    160c:	29 f4       	brne	.+10     	; 0x1618 <V2Params_SetParameterValue+0x30>
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
    160e:	6d 2f       	mov	r22, r29
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <eeprom_update_byte>
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once - use function to reduce code size */
	XPROGTarget_SendByte(TPI_CMD_SOUT(Address));
    161e:	98 2f       	mov	r25, r24
    1620:	9f 70       	andi	r25, 0x0F	; 15
    1622:	90 69       	ori	r25, 0x90	; 144
    1624:	80 73       	andi	r24, 0x30	; 48
    1626:	88 0f       	add	r24, r24
    1628:	89 2b       	or	r24, r25
    162a:	53 c6       	rjmp	.+3238   	; 0x22d2 <XPROGTarget_SendByte>
    162c:	08 95       	ret

0000162e <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	d8 2f       	mov	r29, r24
    1634:	c9 2f       	mov	r28, r25
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1636:	88 e6       	ldi	r24, 0x68	; 104
    1638:	4c d6       	rcall	.+3224   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    163a:	8d 2f       	mov	r24, r29
    163c:	4a d6       	rcall	.+3220   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    163e:	89 e6       	ldi	r24, 0x69	; 105
    1640:	48 d6       	rcall	.+3216   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1642:	8c 2f       	mov	r24, r28
    1644:	46 d6       	rcall	.+3212   	; 0x22d2 <XPROGTarget_SendByte>
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS(TPI_REG_STATUS));
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	41 d6       	rcall	.+3202   	; 0x22d2 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1650:	55 d6       	rcall	.+3242   	; 0x22fc <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1652:	9a b5       	in	r25, 0x2a	; 42
    1654:	99 23       	and	r25, r25
    1656:	21 f0       	breq	.+8      	; 0x1660 <TINYNVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1658:	81 ff       	sbrs	r24, 1
    165a:	f8 cf       	rjmp	.-16     	; 0x164c <TINYNVM_WaitWhileNVMBusBusy>
		  return true;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1660:	80 e0       	ldi	r24, 0x00	; 0

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
		  return true;
	}
}
    1662:	08 95       	ret

00001664 <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    1664:	90 91 5d 01 	lds	r25, 0x015D
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once - use function to reduce code size */
	XPROGTarget_SendByte(TPI_CMD_SIN(Address));
    1668:	89 2f       	mov	r24, r25
    166a:	8f 70       	andi	r24, 0x0F	; 15
    166c:	80 61       	ori	r24, 0x10	; 16
    166e:	90 73       	andi	r25, 0x30	; 48
    1670:	99 0f       	add	r25, r25
    1672:	89 2b       	or	r24, r25
    1674:	2e d6       	rcall	.+3164   	; 0x22d2 <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1676:	42 d6       	rcall	.+3204   	; 0x22fc <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1678:	9a b5       	in	r25, 0x2a	; 42
    167a:	99 23       	and	r25, r25
    167c:	21 f0       	breq	.+8      	; 0x1686 <TINYNVM_WaitWhileNVMControllerBusy+0x22>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    167e:	88 23       	and	r24, r24
    1680:	8c f3       	brlt	.-30     	; 0x1664 <TINYNVM_WaitWhileNVMControllerBusy>
		  return true;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1686:	80 e0       	ldi	r24, 0x00	; 0

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1688:	08 95       	ret

0000168a <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the TPI interface was enabled successfully, \c false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	28 97       	sbiw	r28, 0x08	; 8
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    16a8:	63 d6       	rcall	.+3270   	; 0x2370 <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_CTRL));
    16aa:	82 ec       	ldi	r24, 0xC2	; 194
    16ac:	12 d6       	rcall	.+3108   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	10 d6       	rcall	.+3104   	; 0x22d2 <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    16b2:	80 ee       	ldi	r24, 0xE0	; 224
    16b4:	0e d6       	rcall	.+3100   	; 0x22d2 <XPROGTarget_SendByte>
    16b6:	8e 01       	movw	r16, r28
    16b8:	07 5f       	subi	r16, 0xF7	; 247
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	6c 01       	movw	r12, r24
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    16c2:	68 94       	set
    16c4:	ff 24       	eor	r15, r15
    16c6:	f3 f8       	bld	r15, 3
    16c8:	e5 e6       	ldi	r30, 0x65	; 101
    16ca:	f1 e0       	ldi	r31, 0x01	; 1
    16cc:	de 01       	movw	r26, r28
    16ce:	11 96       	adiw	r26, 0x01	; 1
    16d0:	8f 2d       	mov	r24, r15
    16d2:	01 90       	ld	r0, Z+
    16d4:	0d 92       	st	X+, r0
    16d6:	8a 95       	dec	r24
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <TINYNVM_EnableTPI+0x48>
    16da:	f8 01       	movw	r30, r16
    16dc:	82 91       	ld	r24, -Z
    16de:	8f 01       	movw	r16, r30
    16e0:	f8 d5       	rcall	.+3056   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_CTRL));
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    16e2:	0c 15       	cp	r16, r12
    16e4:	1d 05       	cpc	r17, r13
    16e6:	81 f7       	brne	.-32     	; 0x16c8 <TINYNVM_EnableTPI+0x3e>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    16e8:	b1 df       	rcall	.-158    	; 0x164c <TINYNVM_WaitWhileNVMBusBusy>
}
    16ea:	28 96       	adiw	r28, 0x08	; 8
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	08 95       	ret

00001706 <TINYNVM_DisableTPI>:

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1706:	a2 df       	rcall	.-188    	; 0x164c <TINYNVM_WaitWhileNVMBusBusy>

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_STATUS));
    1708:	80 ec       	ldi	r24, 0xC0	; 192
    170a:	e3 d5       	rcall	.+3014   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(0x00);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	e1 d5       	rcall	.+3010   	; 0x22d2 <XPROGTarget_SendByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS(TPI_REG_STATUS));
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	df d5       	rcall	.+3006   	; 0x22d2 <XPROGTarget_SendByte>
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1714:	f3 d5       	rcall	.+3046   	; 0x22fc <XPROGTarget_ReceiveByte>
    1716:	81 11       	cpse	r24, r1
    1718:	f7 cf       	rjmp	.-18     	; 0x1708 <TINYNVM_DisableTPI+0x2>

	XPROGTarget_DisableTargetTPI();
    171a:	c5 c5       	rjmp	.+2954   	; 0x22a6 <XPROGTarget_DisableTargetTPI>
    171c:	08 95       	ret

0000171e <TINYNVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	8c 01       	movw	r16, r24
    172c:	e6 2e       	mov	r14, r22
    172e:	f7 2e       	mov	r15, r23
    1730:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1732:	98 df       	rcall	.-208    	; 0x1664 <TINYNVM_WaitWhileNVMControllerBusy>
    1734:	88 23       	and	r24, r24
    1736:	01 f1       	breq	.+64     	; 0x1778 <TINYNVM_ReadMemory+0x5a>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1738:	80 91 5e 01 	lds	r24, 0x015E
    173c:	70 df       	rcall	.-288    	; 0x161e <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	c8 d5       	rcall	.+2960   	; 0x22d2 <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1742:	c8 01       	movw	r24, r16
    1744:	74 df       	rcall	.-280    	; 0x162e <TINYNVM_SendPointerAddress>

	while (ReadSize-- && TimeoutTicksRemaining)
    1746:	20 97       	sbiw	r28, 0x00	; 0
    1748:	91 f0       	breq	.+36     	; 0x176e <TINYNVM_ReadMemory+0x50>
    174a:	8a b5       	in	r24, 0x2a	; 42
    174c:	88 23       	and	r24, r24
    174e:	79 f0       	breq	.+30     	; 0x176e <TINYNVM_ReadMemory+0x50>
    1750:	0e 2d       	mov	r16, r14
    1752:	1f 2d       	mov	r17, r15
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD(TPI_POINTER_INDIRECT_PI));
    1754:	84 e2       	ldi	r24, 0x24	; 36
    1756:	bd d5       	rcall	.+2938   	; 0x22d2 <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1758:	d1 d5       	rcall	.+2978   	; 0x22fc <XPROGTarget_ReceiveByte>
    175a:	f8 01       	movw	r30, r16
    175c:	81 93       	st	Z+, r24
    175e:	8f 01       	movw	r16, r30
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    1760:	c1 30       	cpi	r28, 0x01	; 1
    1762:	d1 05       	cpc	r29, r1
    1764:	21 f0       	breq	.+8      	; 0x176e <TINYNVM_ReadMemory+0x50>
    1766:	8a b5       	in	r24, 0x2a	; 42
    1768:	21 97       	sbiw	r28, 0x01	; 1
    176a:	81 11       	cpse	r24, r1
    176c:	f3 cf       	rjmp	.-26     	; 0x1754 <TINYNVM_ReadMemory+0x36>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD(TPI_POINTER_INDIRECT_PI));
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
    176e:	9a b5       	in	r25, 0x2a	; 42
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	91 11       	cpse	r25, r1
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <TINYNVM_ReadMemory+0x5a>
    1776:	80 e0       	ldi	r24, 0x00	; 0
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	08 95       	ret

00001786 <TINYNVM_WriteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	6c 01       	movw	r12, r24
    1796:	eb 01       	movw	r28, r22
    1798:	8a 01       	movw	r16, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    179a:	64 df       	rcall	.-312    	; 0x1664 <TINYNVM_WaitWhileNVMControllerBusy>
    179c:	f8 2e       	mov	r15, r24
    179e:	88 23       	and	r24, r24
    17a0:	29 f1       	breq	.+74     	; 0x17ec <TINYNVM_WriteMemory+0x66>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    17a2:	00 ff       	sbrs	r16, 0
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <TINYNVM_WriteMemory+0x2e>
	  WriteBuffer[WriteLength++] = 0xFF;
    17a6:	fe 01       	movw	r30, r28
    17a8:	e0 0f       	add	r30, r16
    17aa:	f1 1f       	adc	r31, r17
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	80 83       	st	Z, r24
    17b0:	0f 5f       	subi	r16, 0xFF	; 255
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    17b4:	80 91 5e 01 	lds	r24, 0x015E
    17b8:	32 df       	rcall	.-412    	; 0x161e <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    17ba:	8d e1       	ldi	r24, 0x1D	; 29
    17bc:	8a d5       	rcall	.+2836   	; 0x22d2 <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    17be:	c6 01       	movw	r24, r12
    17c0:	36 df       	rcall	.-404    	; 0x162e <TINYNVM_SendPointerAddress>

	while (WriteLength)
    17c2:	01 15       	cp	r16, r1
    17c4:	11 05       	cpc	r17, r1
    17c6:	91 f0       	breq	.+36     	; 0x17ec <TINYNVM_WriteMemory+0x66>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    17c8:	4d df       	rcall	.-358    	; 0x1664 <TINYNVM_WaitWhileNVMControllerBusy>
    17ca:	f8 2e       	mov	r15, r24
    17cc:	88 23       	and	r24, r24
    17ce:	71 f0       	breq	.+28     	; 0x17ec <TINYNVM_WriteMemory+0x66>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT_PI));
    17d0:	84 e6       	ldi	r24, 0x64	; 100
    17d2:	7f d5       	rcall	.+2814   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    17d4:	88 81       	ld	r24, Y
    17d6:	7d d5       	rcall	.+2810   	; 0x22d2 <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT_PI));
    17d8:	84 e6       	ldi	r24, 0x64	; 100
    17da:	7b d5       	rcall	.+2806   	; 0x22d2 <XPROGTarget_SendByte>
    17dc:	22 96       	adiw	r28, 0x02	; 2
    17de:	fe 01       	movw	r30, r28
    17e0:	31 97       	sbiw	r30, 0x01	; 1
		XPROGTarget_SendByte(*(WriteBuffer++));
    17e2:	80 81       	ld	r24, Z
    17e4:	76 d5       	rcall	.+2796   	; 0x22d2 <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    17e6:	02 50       	subi	r16, 0x02	; 2
    17e8:	11 09       	sbc	r17, r1
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    17ea:	71 f7       	brne	.-36     	; 0x17c8 <TINYNVM_WriteMemory+0x42>
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    17ec:	8f 2d       	mov	r24, r15
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	08 95       	ret

000017fe <TINYNVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	18 2f       	mov	r17, r24
    1806:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1808:	2d df       	rcall	.-422    	; 0x1664 <TINYNVM_WaitWhileNVMControllerBusy>
    180a:	88 23       	and	r24, r24
    180c:	69 f0       	breq	.+26     	; 0x1828 <TINYNVM_EraseMemory+0x2a>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    180e:	80 91 5e 01 	lds	r24, 0x015E
    1812:	05 df       	rcall	.-502    	; 0x161e <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1814:	81 2f       	mov	r24, r17
    1816:	5d d5       	rcall	.+2746   	; 0x22d2 <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1818:	ce 01       	movw	r24, r28
    181a:	81 60       	ori	r24, 0x01	; 1
    181c:	08 df       	rcall	.-496    	; 0x162e <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT));
    181e:	80 e6       	ldi	r24, 0x60	; 96
    1820:	58 d5       	rcall	.+2736   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	56 d5       	rcall	.+2732   	; 0x22d2 <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1826:	1e df       	rcall	.-452    	; 0x1664 <TINYNVM_WaitWhileNVMControllerBusy>
	  return false;

	return true;
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	08 95       	ret

00001830 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	17 2f       	mov	r17, r23
    1838:	d8 2f       	mov	r29, r24
    183a:	c9 2f       	mov	r28, r25
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    183c:	86 2f       	mov	r24, r22
    183e:	49 d5       	rcall	.+2706   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1840:	81 2f       	mov	r24, r17
    1842:	47 d5       	rcall	.+2702   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    1844:	8d 2f       	mov	r24, r29
    1846:	45 d5       	rcall	.+2698   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1848:	8c 2f       	mov	r24, r28
    184a:	43 d5       	rcall	.+2694   	; 0x22d2 <XPROGTarget_SendByte>
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    1858:	40 91 61 01 	lds	r20, 0x0161
    185c:	50 91 62 01 	lds	r21, 0x0162
    1860:	60 91 63 01 	lds	r22, 0x0163
    1864:	70 91 64 01 	lds	r23, 0x0164
    1868:	8a 01       	movw	r16, r20
    186a:	9b 01       	movw	r18, r22
    186c:	08 2b       	or	r16, r24
    186e:	c9 01       	movw	r24, r18
    1870:	b8 01       	movw	r22, r16

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    1872:	de df       	rcall	.-68     	; 0x1830 <XMEGANVM_SendAddress>
}
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
    187a:	80 e8       	ldi	r24, 0x80	; 128
    187c:	2a d5       	rcall	.+2644   	; 0x22d2 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    187e:	3e d5       	rcall	.+2684   	; 0x22fc <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1880:	9a b5       	in	r25, 0x2a	; 42
    1882:	99 23       	and	r25, r25
    1884:	21 f0       	breq	.+8      	; 0x188e <XMEGANVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1886:	81 ff       	sbrs	r24, 1
    1888:	f8 cf       	rjmp	.-16     	; 0x187a <XMEGANVM_WaitWhileNVMBusBusy>
		  return true;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    188e:	80 e0       	ldi	r24, 0x00	; 0

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    1890:	08 95       	ret

00001892 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1892:	8b e6       	ldi	r24, 0x6B	; 107
    1894:	1e d5       	rcall	.+2620   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1896:	8f e0       	ldi	r24, 0x0F	; 15
    1898:	dd df       	rcall	.-70     	; 0x1854 <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	1a d5       	rcall	.+2612   	; 0x22d2 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    189e:	2e d5       	rcall	.+2652   	; 0x22fc <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    18a0:	9a b5       	in	r25, 0x2a	; 42
    18a2:	99 23       	and	r25, r25
    18a4:	21 f0       	breq	.+8      	; 0x18ae <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    18a6:	88 23       	and	r24, r24
    18a8:	c4 f3       	brlt	.-16     	; 0x189a <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
		  return true;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    18ae:	80 e0       	ldi	r24, 0x00	; 0

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    18b0:	08 95       	ret

000018b2 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	28 97       	sbiw	r28, 0x08	; 8
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    18d0:	33 d5       	rcall	.+2662   	; 0x2338 <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
    18d2:	81 ec       	ldi	r24, 0xC1	; 193
    18d4:	fe d4       	rcall	.+2556   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    18d6:	89 e5       	ldi	r24, 0x59	; 89
    18d8:	fc d4       	rcall	.+2552   	; 0x22d2 <XPROGTarget_SendByte>

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
    18da:	82 ec       	ldi	r24, 0xC2	; 194
    18dc:	fa d4       	rcall	.+2548   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	f8 d4       	rcall	.+2544   	; 0x22d2 <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    18e2:	80 ee       	ldi	r24, 0xE0	; 224
    18e4:	f6 d4       	rcall	.+2540   	; 0x22d2 <XPROGTarget_SendByte>
    18e6:	8e 01       	movw	r16, r28
    18e8:	07 5f       	subi	r16, 0xF7	; 247
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	ce 01       	movw	r24, r28
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	6c 01       	movw	r12, r24
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    18f2:	68 94       	set
    18f4:	ff 24       	eor	r15, r15
    18f6:	f3 f8       	bld	r15, 3
    18f8:	ed e6       	ldi	r30, 0x6D	; 109
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	de 01       	movw	r26, r28
    18fe:	11 96       	adiw	r26, 0x01	; 1
    1900:	8f 2d       	mov	r24, r15
    1902:	01 90       	ld	r0, Z+
    1904:	0d 92       	st	X+, r0
    1906:	8a 95       	dec	r24
    1908:	e1 f7       	brne	.-8      	; 0x1902 <XMEGANVM_EnablePDI+0x50>
    190a:	f8 01       	movw	r30, r16
    190c:	82 91       	ld	r24, -Z
    190e:	8f 01       	movw	r16, r30
    1910:	e0 d4       	rcall	.+2496   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    1912:	0c 15       	cp	r16, r12
    1914:	1d 05       	cpc	r17, r13
    1916:	81 f7       	brne	.-32     	; 0x18f8 <XMEGANVM_EnablePDI+0x46>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    1918:	b0 df       	rcall	.-160    	; 0x187a <XMEGANVM_WaitWhileNVMBusBusy>
}
    191a:	28 96       	adiw	r28, 0x08	; 8
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	08 95       	ret

00001936 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    1936:	a1 df       	rcall	.-190    	; 0x187a <XMEGANVM_WaitWhileNVMBusBusy>
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
    1938:	81 ec       	ldi	r24, 0xC1	; 193
    193a:	cb d4       	rcall	.+2454   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(0x00);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	c9 d4       	rcall	.+2450   	; 0x22d2 <XPROGTarget_SendByte>

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
    1940:	81 e8       	ldi	r24, 0x81	; 129
    1942:	c7 d4       	rcall	.+2446   	; 0x22d2 <XPROGTarget_SendByte>
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1944:	db d4       	rcall	.+2486   	; 0x22fc <XPROGTarget_ReceiveByte>
    1946:	81 11       	cpse	r24, r1
    1948:	f7 cf       	rjmp	.-18     	; 0x1938 <XMEGANVM_DisablePDI+0x2>

	XPROGTarget_DisableTargetPDI();
    194a:	9b c4       	rjmp	.+2358   	; 0x2282 <XPROGTarget_DisableTargetPDI>
    194c:	08 95       	ret

0000194e <XMEGANVM_GetMemoryCRC>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	18 2f       	mov	r17, r24
    1958:	eb 01       	movw	r28, r22
	*CRCDest = 0;
    195a:	18 82       	st	Y, r1
    195c:	19 82       	std	Y+1, r1	; 0x01
    195e:	1a 82       	std	Y+2, r1	; 0x02
    1960:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1962:	97 df       	rcall	.-210    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1964:	88 23       	and	r24, r24
    1966:	51 f1       	breq	.+84     	; 0x19bc <XMEGANVM_GetMemoryCRC+0x6e>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1968:	8c e4       	ldi	r24, 0x4C	; 76
    196a:	b3 d4       	rcall	.+2406   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    196c:	8a e0       	ldi	r24, 0x0A	; 10
    196e:	72 df       	rcall	.-284    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    1970:	81 2f       	mov	r24, r17
    1972:	af d4       	rcall	.+2398   	; 0x22d2 <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1974:	8c e4       	ldi	r24, 0x4C	; 76
    1976:	ad d4       	rcall	.+2394   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1978:	8b e0       	ldi	r24, 0x0B	; 11
    197a:	6c df       	rcall	.-296    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	a9 d4       	rcall	.+2386   	; 0x22d2 <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1980:	7c df       	rcall	.-264    	; 0x187a <XMEGANVM_WaitWhileNVMBusBusy>
    1982:	88 23       	and	r24, r24
    1984:	d9 f0       	breq	.+54     	; 0x19bc <XMEGANVM_GetMemoryCRC+0x6e>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1986:	85 df       	rcall	.-246    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1988:	88 23       	and	r24, r24
    198a:	c1 f0       	breq	.+48     	; 0x19bc <XMEGANVM_GetMemoryCRC+0x6e>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    198c:	8b e6       	ldi	r24, 0x6B	; 107
    198e:	a1 d4       	rcall	.+2370   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1990:	84 e0       	ldi	r24, 0x04	; 4
    1992:	60 df       	rcall	.-320    	; 0x1854 <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1994:	80 ea       	ldi	r24, 0xA0	; 160
    1996:	9d d4       	rcall	.+2362   	; 0x22d2 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	9b d4       	rcall	.+2358   	; 0x22d2 <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    199c:	84 e2       	ldi	r24, 0x24	; 36
    199e:	99 d4       	rcall	.+2354   	; 0x22d2 <XPROGTarget_SendByte>
    19a0:	8e 01       	movw	r16, r28
    19a2:	23 96       	adiw	r28, 0x03	; 3
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    19a4:	ab d4       	rcall	.+2390   	; 0x22fc <XPROGTarget_ReceiveByte>
    19a6:	f8 01       	movw	r30, r16
    19a8:	81 93       	st	Z+, r24
    19aa:	8f 01       	movw	r16, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
    19ac:	ec 17       	cp	r30, r28
    19ae:	fd 07       	cpc	r31, r29
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <XMEGANVM_GetMemoryCRC+0x56>
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    19b2:	9a b5       	in	r25, 0x2a	; 42
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	91 11       	cpse	r25, r1
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <XMEGANVM_GetMemoryCRC+0x6e>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
    19c6:	cf 92       	push	r12
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	6b 01       	movw	r12, r22
    19d8:	7c 01       	movw	r14, r24
    19da:	8a 01       	movw	r16, r20
    19dc:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19de:	59 df       	rcall	.-334    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <XMEGANVM_ReadMemory+0x20>
    19e4:	33 c0       	rjmp	.+102    	; 0x1a4c <XMEGANVM_ReadMemory+0x86>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    19e6:	8c e4       	ldi	r24, 0x4C	; 76
    19e8:	74 d4       	rcall	.+2280   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19ea:	8a e0       	ldi	r24, 0x0A	; 10
    19ec:	33 df       	rcall	.-410    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    19ee:	83 e4       	ldi	r24, 0x43	; 67
    19f0:	70 d4       	rcall	.+2272   	; 0x22d2 <XPROGTarget_SendByte>

	if (ReadSize > 1)
    19f2:	c2 30       	cpi	r28, 0x02	; 2
    19f4:	d1 05       	cpc	r29, r1
    19f6:	e8 f0       	brcs	.+58     	; 0x1a32 <XMEGANVM_ReadMemory+0x6c>
	{
		/* Load the PDI pointer register with the start address we want to read from */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    19f8:	8b e6       	ldi	r24, 0x6B	; 107
    19fa:	6b d4       	rcall	.+2262   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(ReadAddress);
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	17 df       	rcall	.-466    	; 0x1830 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to read */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1a02:	80 ea       	ldi	r24, 0xA0	; 160
    1a04:	66 d4       	rcall	.+2252   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(ReadSize - 1);
    1a06:	8c 2f       	mov	r24, r28
    1a08:	81 50       	subi	r24, 0x01	; 1
    1a0a:	63 d4       	rcall	.+2246   	; 0x22d2 <XPROGTarget_SendByte>

		/* Send a LD command with indirect access and post-increment to read out the bytes */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1a0c:	84 e2       	ldi	r24, 0x24	; 36
    1a0e:	61 d4       	rcall	.+2242   	; 0x22d2 <XPROGTarget_SendByte>
		while (ReadSize-- && TimeoutTicksRemaining)
    1a10:	20 97       	sbiw	r28, 0x00	; 0
    1a12:	b9 f0       	breq	.+46     	; 0x1a42 <XMEGANVM_ReadMemory+0x7c>
    1a14:	8a b5       	in	r24, 0x2a	; 42
    1a16:	88 23       	and	r24, r24
    1a18:	a1 f0       	breq	.+40     	; 0x1a42 <XMEGANVM_ReadMemory+0x7c>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1a1a:	70 d4       	rcall	.+2272   	; 0x22fc <XPROGTarget_ReceiveByte>
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	81 93       	st	Z+, r24
    1a20:	8f 01       	movw	r16, r30
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
		XPROGTarget_SendByte(ReadSize - 1);

		/* Send a LD command with indirect access and post-increment to read out the bytes */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (ReadSize-- && TimeoutTicksRemaining)
    1a22:	c1 30       	cpi	r28, 0x01	; 1
    1a24:	d1 05       	cpc	r29, r1
    1a26:	69 f0       	breq	.+26     	; 0x1a42 <XMEGANVM_ReadMemory+0x7c>
    1a28:	8a b5       	in	r24, 0x2a	; 42
    1a2a:	21 97       	sbiw	r28, 0x01	; 1
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	f5 cf       	rjmp	.-22     	; 0x1a1a <XMEGANVM_ReadMemory+0x54>
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <XMEGANVM_ReadMemory+0x7c>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}
	else
	{
		/* Send a LDS command with the read address to read out the requested byte */
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1a32:	8c e0       	ldi	r24, 0x0C	; 12
    1a34:	4e d4       	rcall	.+2204   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(ReadAddress);
    1a36:	c7 01       	movw	r24, r14
    1a38:	b6 01       	movw	r22, r12
    1a3a:	fa de       	rcall	.-524    	; 0x1830 <XMEGANVM_SendAddress>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1a3c:	5f d4       	rcall	.+2238   	; 0x22fc <XPROGTarget_ReceiveByte>
    1a3e:	f8 01       	movw	r30, r16
    1a40:	80 83       	st	Z, r24
	}

	return (TimeoutTicksRemaining > 0);
    1a42:	9a b5       	in	r25, 0x2a	; 42
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	91 11       	cpse	r25, r1
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <XMEGANVM_ReadMemory+0x86>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
}
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	df 90       	pop	r13
    1a5a:	cf 90       	pop	r12
    1a5c:	08 95       	ret

00001a5e <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	18 2f       	mov	r17, r24
    1a6e:	6a 01       	movw	r12, r20
    1a70:	7b 01       	movw	r14, r22
    1a72:	d2 2f       	mov	r29, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a74:	0e df       	rcall	.-484    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a76:	c8 2f       	mov	r28, r24
    1a78:	88 23       	and	r24, r24
    1a7a:	69 f0       	breq	.+26     	; 0x1a96 <XMEGANVM_WriteByteMemory+0x38>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1a7c:	8c e4       	ldi	r24, 0x4C	; 76
    1a7e:	29 d4       	rcall	.+2130   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a80:	8a e0       	ldi	r24, 0x0A	; 10
    1a82:	e8 de       	rcall	.-560    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1a84:	81 2f       	mov	r24, r17
    1a86:	25 d4       	rcall	.+2122   	; 0x22d2 <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1a88:	8c e4       	ldi	r24, 0x4C	; 76
    1a8a:	23 d4       	rcall	.+2118   	; 0x22d2 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	b6 01       	movw	r22, r12
    1a90:	cf de       	rcall	.-610    	; 0x1830 <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    1a92:	8d 2f       	mov	r24, r29
    1a94:	1e d4       	rcall	.+2108   	; 0x22d2 <XPROGTarget_SendByte>

	return true;
}
    1a96:	8c 2f       	mov	r24, r28
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	ff 90       	pop	r15
    1aa0:	ef 90       	pop	r14
    1aa2:	df 90       	pop	r13
    1aa4:	cf 90       	pop	r12
    1aa6:	08 95       	ret

00001aa8 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    1aa8:	4f 92       	push	r4
    1aaa:	5f 92       	push	r5
    1aac:	6f 92       	push	r6
    1aae:	7f 92       	push	r7
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	88 2e       	mov	r8, r24
    1aca:	96 2e       	mov	r9, r22
    1acc:	d4 2f       	mov	r29, r20
    1ace:	c2 2f       	mov	r28, r18
    1ad0:	27 01       	movw	r4, r14
    1ad2:	38 01       	movw	r6, r16
	if (PageMode & XPROG_PAGEMODE_ERASE)
    1ad4:	20 ff       	sbrs	r18, 0
    1ad6:	11 c0       	rjmp	.+34     	; 0x1afa <XMEGANVM_WritePageMemory+0x52>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ad8:	dc de       	rcall	.-584    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1ada:	18 2f       	mov	r17, r24
    1adc:	88 23       	and	r24, r24
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <XMEGANVM_WritePageMemory+0x3a>
    1ae0:	45 c0       	rjmp	.+138    	; 0x1b6c <XMEGANVM_WritePageMemory+0xc4>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1ae2:	8c e4       	ldi	r24, 0x4C	; 76
    1ae4:	f6 d3       	rcall	.+2028   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ae6:	8a e0       	ldi	r24, 0x0A	; 10
    1ae8:	b5 de       	rcall	.-662    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    1aea:	89 2d       	mov	r24, r9
    1aec:	f2 d3       	rcall	.+2020   	; 0x22d2 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1aee:	8c e4       	ldi	r24, 0x4C	; 76
    1af0:	f0 d3       	rcall	.+2016   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1af2:	8b e0       	ldi	r24, 0x0B	; 11
    1af4:	af de       	rcall	.-674    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	ec d3       	rcall	.+2008   	; 0x22d2 <XPROGTarget_SendByte>
	}

	if (WriteSize)
    1afa:	a1 14       	cp	r10, r1
    1afc:	b1 04       	cpc	r11, r1
    1afe:	09 f1       	breq	.+66     	; 0x1b42 <XMEGANVM_WritePageMemory+0x9a>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b00:	c8 de       	rcall	.-624    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b02:	18 2f       	mov	r17, r24
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <XMEGANVM_WritePageMemory+0x62>
    1b08:	31 c0       	rjmp	.+98     	; 0x1b6c <XMEGANVM_WritePageMemory+0xc4>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b0a:	8c e4       	ldi	r24, 0x4C	; 76
    1b0c:	e2 d3       	rcall	.+1988   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b0e:	8a e0       	ldi	r24, 0x0A	; 10
    1b10:	a1 de       	rcall	.-702    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    1b12:	88 2d       	mov	r24, r8
    1b14:	de d3       	rcall	.+1980   	; 0x22d2 <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1b16:	8b e6       	ldi	r24, 0x6B	; 107
    1b18:	dc d3       	rcall	.+1976   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1b1a:	c3 01       	movw	r24, r6
    1b1c:	b2 01       	movw	r22, r4
    1b1e:	88 de       	rcall	.-752    	; 0x1830 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1b20:	80 ea       	ldi	r24, 0xA0	; 160
    1b22:	d7 d3       	rcall	.+1966   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	8a 0d       	add	r24, r10
    1b28:	d4 d3       	rcall	.+1960   	; 0x22d2 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1b2a:	84 e6       	ldi	r24, 0x64	; 100
    1b2c:	d2 d3       	rcall	.+1956   	; 0x22d2 <XPROGTarget_SendByte>
    1b2e:	0c 2d       	mov	r16, r12
    1b30:	1d 2d       	mov	r17, r13
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1b32:	f8 01       	movw	r30, r16
    1b34:	81 91       	ld	r24, Z+
    1b36:	8f 01       	movw	r16, r30
    1b38:	cc d3       	rcall	.+1944   	; 0x22d2 <XPROGTarget_SendByte>
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1
    1b3c:	af 1a       	sub	r10, r31
    1b3e:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
    1b40:	c1 f7       	brne	.-16     	; 0x1b32 <XMEGANVM_WritePageMemory+0x8a>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
    1b42:	c1 ff       	sbrs	r28, 1
    1b44:	12 c0       	rjmp	.+36     	; 0x1b6a <XMEGANVM_WritePageMemory+0xc2>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b46:	a5 de       	rcall	.-694    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b48:	18 2f       	mov	r17, r24
    1b4a:	88 23       	and	r24, r24
    1b4c:	79 f0       	breq	.+30     	; 0x1b6c <XMEGANVM_WritePageMemory+0xc4>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b4e:	8c e4       	ldi	r24, 0x4C	; 76
    1b50:	c0 d3       	rcall	.+1920   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b52:	8a e0       	ldi	r24, 0x0A	; 10
    1b54:	7f de       	rcall	.-770    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    1b56:	8d 2f       	mov	r24, r29
    1b58:	bc d3       	rcall	.+1912   	; 0x22d2 <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1b5a:	8c e4       	ldi	r24, 0x4C	; 76
    1b5c:	ba d3       	rcall	.+1908   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1b5e:	c3 01       	movw	r24, r6
    1b60:	b2 01       	movw	r22, r4
    1b62:	66 de       	rcall	.-820    	; 0x1830 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	b5 d3       	rcall	.+1898   	; 0x22d2 <XPROGTarget_SendByte>
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <XMEGANVM_WritePageMemory+0xc4>
	}

	return true;
    1b6a:	11 e0       	ldi	r17, 0x01	; 1
}
    1b6c:	81 2f       	mov	r24, r17
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	9f 90       	pop	r9
    1b84:	8f 90       	pop	r8
    1b86:	7f 90       	pop	r7
    1b88:	6f 90       	pop	r6
    1b8a:	5f 90       	pop	r5
    1b8c:	4f 90       	pop	r4
    1b8e:	08 95       	ret

00001b90 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	cf 93       	push	r28
    1b9a:	c8 2f       	mov	r28, r24
    1b9c:	6a 01       	movw	r12, r20
    1b9e:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ba0:	78 de       	rcall	.-784    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <XMEGANVM_EraseMemory+0x18>
    1ba6:	63 c0       	rjmp	.+198    	; 0x1c6e <XMEGANVM_EraseMemory+0xde>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1ba8:	c0 34       	cpi	r28, 0x40	; 64
    1baa:	69 f4       	brne	.+26     	; 0x1bc6 <XMEGANVM_EraseMemory+0x36>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1bac:	8c e4       	ldi	r24, 0x4C	; 76
    1bae:	91 d3       	rcall	.+1826   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	50 de       	rcall	.-864    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1bb4:	80 e4       	ldi	r24, 0x40	; 64
    1bb6:	8d d3       	rcall	.+1818   	; 0x22d2 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1bb8:	8c e4       	ldi	r24, 0x4C	; 76
    1bba:	8b d3       	rcall	.+1814   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bbc:	8b e0       	ldi	r24, 0x0B	; 11
    1bbe:	4a de       	rcall	.-876    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	87 d3       	rcall	.+1806   	; 0x22d2 <XPROGTarget_SendByte>
    1bc4:	53 c0       	rjmp	.+166    	; 0x1c6c <XMEGANVM_EraseMemory+0xdc>
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1bc6:	c0 33       	cpi	r28, 0x30	; 48
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <XMEGANVM_EraseMemory+0x3c>
    1bca:	43 c0       	rjmp	.+134    	; 0x1c52 <XMEGANVM_EraseMemory+0xc2>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1bcc:	8c e4       	ldi	r24, 0x4C	; 76
    1bce:	81 d3       	rcall	.+1794   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bd0:	8a e0       	ldi	r24, 0x0A	; 10
    1bd2:	40 de       	rcall	.-896    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1bd4:	86 e3       	ldi	r24, 0x36	; 54
    1bd6:	7d d3       	rcall	.+1786   	; 0x22d2 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1bd8:	8c e4       	ldi	r24, 0x4C	; 76
    1bda:	7b d3       	rcall	.+1782   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bdc:	8b e0       	ldi	r24, 0x0B	; 11
    1bde:	3a de       	rcall	.-908    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	77 d3       	rcall	.+1774   	; 0x22d2 <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1be4:	56 de       	rcall	.-852    	; 0x1892 <XMEGANVM_WaitWhileNVMControllerBusy>
    1be6:	88 23       	and	r24, r24
    1be8:	09 f4       	brne	.+2      	; 0x1bec <XMEGANVM_EraseMemory+0x5c>
    1bea:	41 c0       	rjmp	.+130    	; 0x1c6e <XMEGANVM_EraseMemory+0xde>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1bec:	8c e4       	ldi	r24, 0x4C	; 76
    1bee:	71 d3       	rcall	.+1762   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bf0:	8a e0       	ldi	r24, 0x0A	; 10
    1bf2:	30 de       	rcall	.-928    	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1bf4:	83 e3       	ldi	r24, 0x33	; 51
    1bf6:	6d d3       	rcall	.+1754   	; 0x22d2 <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1bf8:	8b e6       	ldi	r24, 0x6B	; 107
    1bfa:	6b d3       	rcall	.+1750   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	b6 01       	movw	r22, r12
    1c00:	17 de       	rcall	.-978    	; 0x1830 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    1c02:	80 ea       	ldi	r24, 0xA0	; 160
    1c04:	66 d3       	rcall	.+1740   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1c06:	80 91 5f 01 	lds	r24, 0x015F
    1c0a:	81 50       	subi	r24, 0x01	; 1
    1c0c:	62 d3       	rcall	.+1732   	; 0x22d2 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    1c0e:	84 e6       	ldi	r24, 0x64	; 100
    1c10:	60 d3       	rcall	.+1728   	; 0x22d2 <XPROGTarget_SendByte>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1c12:	80 91 5f 01 	lds	r24, 0x015F
    1c16:	90 91 60 01 	lds	r25, 0x0160
    1c1a:	89 2b       	or	r24, r25
    1c1c:	69 f0       	breq	.+26     	; 0x1c38 <XMEGANVM_EraseMemory+0xa8>
    1c1e:	c0 e0       	ldi	r28, 0x00	; 0
		  XPROGTarget_SendByte(0x00);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	57 d3       	rcall	.+1710   	; 0x22d2 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1c24:	cf 5f       	subi	r28, 0xFF	; 255
    1c26:	2c 2f       	mov	r18, r28
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	80 91 5f 01 	lds	r24, 0x015F
    1c2e:	90 91 60 01 	lds	r25, 0x0160
    1c32:	28 17       	cp	r18, r24
    1c34:	39 07       	cpc	r19, r25
    1c36:	a0 f3       	brcs	.-24     	; 0x1c20 <XMEGANVM_EraseMemory+0x90>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c38:	8c e4       	ldi	r24, 0x4C	; 76
    1c3a:	4b d3       	rcall	.+1686   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c3c:	8a e0       	ldi	r24, 0x0A	; 10
    1c3e:	0a de       	rcall	.-1004   	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1c40:	80 e3       	ldi	r24, 0x30	; 48
    1c42:	47 d3       	rcall	.+1678   	; 0x22d2 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c44:	8c e4       	ldi	r24, 0x4C	; 76
    1c46:	45 d3       	rcall	.+1674   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1c48:	8b e0       	ldi	r24, 0x0B	; 11
    1c4a:	04 de       	rcall	.-1016   	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	41 d3       	rcall	.+1666   	; 0x22d2 <XPROGTarget_SendByte>
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <XMEGANVM_EraseMemory+0xdc>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c52:	8c e4       	ldi	r24, 0x4C	; 76
    1c54:	3e d3       	rcall	.+1660   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c56:	8a e0       	ldi	r24, 0x0A	; 10
    1c58:	fd dd       	rcall	.-1030   	; 0x1854 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1c5a:	8c 2f       	mov	r24, r28
    1c5c:	3a d3       	rcall	.+1652   	; 0x22d2 <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1c5e:	8c e4       	ldi	r24, 0x4C	; 76
    1c60:	38 d3       	rcall	.+1648   	; 0x22d2 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1c62:	c7 01       	movw	r24, r14
    1c64:	b6 01       	movw	r22, r12
    1c66:	e4 dd       	rcall	.-1080   	; 0x1830 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	33 d3       	rcall	.+1638   	; 0x22d2 <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1c6c:	06 de       	rcall	.-1012   	; 0x187a <XMEGANVM_WaitWhileNVMBusBusy>
	  return false;

	return true;
}
    1c6e:	cf 91       	pop	r28
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	08 95       	ret

00001c7a <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    1c7a:	af 92       	push	r10
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	c8 50       	subi	r28, 0x08	; 8
    1c94:	d1 40       	sbci	r29, 0x01	; 1
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	68 e0       	ldi	r22, 0x08	; 8
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	db d3       	rcall	.+1974   	; 0x2464 <Endpoint_Read_Stream_LE>
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;

				Temp = Data.Bytes[0];
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
				Data.Bytes[0] = Data.Bytes[3];
    1cb0:	3e 81       	ldd	r19, Y+6	; 0x06
				Data.Bytes[3] = Temp;

				Temp = Data.Bytes[1];
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
				Data.Bytes[1] = Data.Bytes[2];
    1cb4:	2d 81       	ldd	r18, Y+5	; 0x05
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    1cb6:	3b 83       	std	Y+3, r19	; 0x03
    1cb8:	2c 83       	std	Y+4, r18	; 0x04
    1cba:	9d 83       	std	Y+5, r25	; 0x05
    1cbc:	8e 83       	std	Y+6, r24	; 0x06
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;

				Temp = Data.Bytes[0];
    1cbe:	7f 81       	ldd	r23, Y+7	; 0x07
				Data.Bytes[0] = Data.Bytes[1];
    1cc0:	68 85       	ldd	r22, Y+8	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    1cc2:	6f 83       	std	Y+7, r22	; 0x07
    1cc4:	78 87       	std	Y+8, r23	; 0x08
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	ce 01       	movw	r24, r28
    1ccc:	09 96       	adiw	r24, 0x09	; 9
    1cce:	ca d3       	rcall	.+1940   	; 0x2464 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1cd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd2:	98 85       	ldd	r25, Y+8	; 0x08
    1cd4:	09 96       	adiw	r24, 0x09	; 9
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
    1cd6:	8f 73       	andi	r24, 0x3F	; 63
    1cd8:	99 27       	eor	r25, r25
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1cda:	89 2b       	or	r24, r25
    1cdc:	31 f4       	brne	.+12     	; 0x1cea <XPROGProtocol_WriteMemory+0x70>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cde:	e8 ee       	ldi	r30, 0xE8	; 232
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8b 77       	andi	r24, 0x7B	; 123
    1ce6:	80 83       	st	Z, r24
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    1ce8:	5c d6       	rcall	.+3256   	; 0x29a2 <Endpoint_WaitUntilReady>
    1cea:	e8 ee       	ldi	r30, 0xE8	; 232
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8b 77       	andi	r24, 0x7B	; 123
    1cf2:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1cfa:	ec ee       	ldi	r30, 0xEC	; 236
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	81 60       	ori	r24, 0x01	; 1
    1d02:	80 83       	st	Z, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    1d04:	80 91 82 01 	lds	r24, 0x0182
    1d08:	81 11       	cpse	r24, r1
    1d0a:	2f c0       	rjmp	.+94     	; 0x1d6a <XPROGProtocol_WriteMemory+0xf0>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <XPROGProtocol_WriteMemory+0x9a>
    1d12:	4d c0       	rjmp	.+154    	; 0x1dae <XPROGProtocol_WriteMemory+0x134>
    1d14:	30 f4       	brcc	.+12     	; 0x1d22 <XPROGProtocol_WriteMemory+0xa8>
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <XPROGProtocol_WriteMemory+0xa2>
    1d1a:	45 c0       	rjmp	.+138    	; 0x1da6 <XPROGProtocol_WriteMemory+0x12c>
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	51 f0       	breq	.+20     	; 0x1d34 <XPROGProtocol_WriteMemory+0xba>
    1d20:	11 c0       	rjmp	.+34     	; 0x1d44 <XPROGProtocol_WriteMemory+0xca>
    1d22:	85 30       	cpi	r24, 0x05	; 5
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <XPROGProtocol_WriteMemory+0xb6>
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <XPROGProtocol_WriteMemory+0xb0>
    1d28:	46 c0       	rjmp	.+140    	; 0x1db6 <XPROGProtocol_WriteMemory+0x13c>
    1d2a:	86 30       	cpi	r24, 0x06	; 6
    1d2c:	39 f0       	breq	.+14     	; 0x1d3c <XPROGProtocol_WriteMemory+0xc2>
    1d2e:	0a c0       	rjmp	.+20     	; 0x1d44 <XPROGProtocol_WriteMemory+0xca>
			case XPROG_MEM_TYPE_FUSE:
				WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
				PagedMemory      = false;
				break;
			case XPROG_MEM_TYPE_LOCKBITS:
				WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
    1d30:	88 e0       	ldi	r24, 0x08	; 8
    1d32:	42 c0       	rjmp	.+132    	; 0x1db8 <XPROGProtocol_WriteMemory+0x13e>
	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
    1d34:	66 e2       	ldi	r22, 0x26	; 38

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
    1d36:	83 e2       	ldi	r24, 0x23	; 35
		{
			case XPROG_MEM_TYPE_APPL:
				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
				break;
			case XPROG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
    1d38:	4c e2       	ldi	r20, 0x2C	; 44
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <XPROGProtocol_WriteMemory+0xd0>
	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
    1d3c:	66 e2       	ldi	r22, 0x26	; 38

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
    1d3e:	83 e2       	ldi	r24, 0x23	; 35
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
				break;
			case XPROG_MEM_TYPE_USERSIG:
				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
    1d40:	4a e1       	ldi	r20, 0x1A	; 26
				break;
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <XPROGProtocol_WriteMemory+0xd0>
	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
    1d44:	66 e2       	ldi	r22, 0x26	; 38

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
    1d46:	83 e2       	ldi	r24, 0x23	; 35
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
    1d48:	4e e2       	ldi	r20, 0x2E	; 46
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1d4a:	af 80       	ldd	r10, Y+7	; 0x07
    1d4c:	b8 84       	ldd	r11, Y+8	; 0x08
    1d4e:	eb 80       	ldd	r14, Y+3	; 0x03
    1d50:	fc 80       	ldd	r15, Y+4	; 0x04
    1d52:	0d 81       	ldd	r16, Y+5	; 0x05
    1d54:	1e 81       	ldd	r17, Y+6	; 0x06
    1d56:	9e 01       	movw	r18, r28
    1d58:	27 5f       	subi	r18, 0xF7	; 247
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	69 01       	movw	r12, r18
    1d5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d60:	a3 de       	rcall	.-698    	; 0x1aa8 <XMEGANVM_WritePageMemory>
    1d62:	88 23       	and	r24, r24
    1d64:	71 f0       	breq	.+28     	; 0x1d82 <XPROGProtocol_WriteMemory+0x108>
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	11 c0       	rjmp	.+34     	; 0x1d8c <XPROGProtocol_WriteMemory+0x112>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    1d6a:	4f 81       	ldd	r20, Y+7	; 0x07
    1d6c:	58 85       	ldd	r21, Y+8	; 0x08
    1d6e:	be 01       	movw	r22, r28
    1d70:	67 5f       	subi	r22, 0xF7	; 247
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	06 dd       	rcall	.-1524   	; 0x1786 <TINYNVM_WriteMemory>
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <XPROGProtocol_WriteMemory+0x10c>
		      WriteMemory_XPROG_Params.Length)))
		{
			ReturnStatus = XPROG_ERR_TIMEOUT;
    1d7e:	93 e0       	ldi	r25, 0x03	; 3
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <XPROGProtocol_WriteMemory+0x112>
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData[0]))))
		{
			ReturnStatus = XPROG_ERR_TIMEOUT;
    1d82:	93 e0       	ldi	r25, 0x03	; 3
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <XPROGProtocol_WriteMemory+0x112>
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <XPROGProtocol_WriteMemory+0x112>
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d8c:	e1 ef       	ldi	r30, 0xF1	; 241
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 e5       	ldi	r24, 0x50	; 80
    1d92:	80 83       	st	Z, r24
    1d94:	84 e0       	ldi	r24, 0x04	; 4
    1d96:	80 83       	st	Z, r24
    1d98:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d9a:	e8 ee       	ldi	r30, 0xE8	; 232
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8e 77       	andi	r24, 0x7E	; 126
    1da2:	80 83       	st	Z, r24
    1da4:	13 c0       	rjmp	.+38     	; 0x1dcc <XPROGProtocol_WriteMemory+0x152>
	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
    1da6:	66 e2       	ldi	r22, 0x26	; 38

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Assume FLASH page programming by default, as it is the common case */
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
    1da8:	83 e2       	ldi	r24, 0x23	; 35
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
		{
			case XPROG_MEM_TYPE_APPL:
				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
    1daa:	44 e2       	ldi	r20, 0x24	; 36
    1dac:	ce cf       	rjmp	.-100    	; 0x1d4a <XPROGProtocol_WriteMemory+0xd0>
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
			case XPROG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
    1dae:	66 e3       	ldi	r22, 0x36	; 54
			case XPROG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
			case XPROG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
    1db0:	83 e3       	ldi	r24, 0x33	; 51
				break;
			case XPROG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
			case XPROG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
    1db2:	45 e3       	ldi	r20, 0x35	; 53
    1db4:	ca cf       	rjmp	.-108    	; 0x1d4a <XPROGProtocol_WriteMemory+0xd0>
				break;
			case XPROG_MEM_TYPE_USERSIG:
				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
				break;
			case XPROG_MEM_TYPE_FUSE:
				WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
    1db6:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
    1db8:	4b 81       	ldd	r20, Y+3	; 0x03
    1dba:	5c 81       	ldd	r21, Y+4	; 0x04
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	29 85       	ldd	r18, Y+9	; 0x09
    1dc2:	4d de       	rcall	.-870    	; 0x1a5e <XMEGANVM_WriteByteMemory>
    1dc4:	81 11       	cpse	r24, r1
    1dc6:	e1 cf       	rjmp	.-62     	; 0x1d8a <XPROGProtocol_WriteMemory+0x110>
													   WriteMemory_XPROG_Params.ProgData[0]))))
		{
			ReturnStatus = XPROG_ERR_TIMEOUT;
    1dc8:	93 e0       	ldi	r25, 0x03	; 3
    1dca:	e0 cf       	rjmp	.-64     	; 0x1d8c <XPROGProtocol_WriteMemory+0x112>

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
    1dcc:	c8 5f       	subi	r28, 0xF8	; 248
    1dce:	de 4f       	sbci	r29, 0xFE	; 254
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	08 95       	ret

00001df0 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	c7 50       	subi	r28, 0x07	; 7
    1dfa:	d1 40       	sbci	r29, 0x01	; 1
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	67 e0       	ldi	r22, 0x07	; 7
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	ce 01       	movw	r24, r28
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	28 d3       	rcall	.+1616   	; 0x2464 <Endpoint_Read_Stream_LE>
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;

				Temp = Data.Bytes[0];
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
				Data.Bytes[0] = Data.Bytes[3];
    1e16:	3d 81       	ldd	r19, Y+5	; 0x05
				Data.Bytes[3] = Temp;

				Temp = Data.Bytes[1];
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
				Data.Bytes[1] = Data.Bytes[2];
    1e1a:	2c 81       	ldd	r18, Y+4	; 0x04
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    1e1c:	3a 83       	std	Y+2, r19	; 0x02
    1e1e:	2b 83       	std	Y+3, r18	; 0x03
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8d 83       	std	Y+5, r24	; 0x05
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;

				Temp = Data.Bytes[0];
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
				Data.Bytes[0] = Data.Bytes[1];
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8f 83       	std	Y+7, r24	; 0x07
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e2c:	e8 ee       	ldi	r30, 0xE8	; 232
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8b 77       	andi	r24, 0x7B	; 123
    1e34:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1e3c:	ec ee       	ldi	r30, 0xEC	; 236
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	81 60       	ori	r24, 0x01	; 1
    1e44:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    1e46:	80 91 82 01 	lds	r24, 0x0182
    1e4a:	81 11       	cpse	r24, r1
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <XPROGProtocol_ReadMemory+0x78>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    1e4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e50:	3f 81       	ldd	r19, Y+7	; 0x07
    1e52:	6a 81       	ldd	r22, Y+2	; 0x02
    1e54:	7b 81       	ldd	r23, Y+3	; 0x03
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	ae 01       	movw	r20, r28
    1e5c:	48 5f       	subi	r20, 0xF8	; 248
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	b2 dd       	rcall	.-1180   	; 0x19c6 <XMEGANVM_ReadMemory>
    1e62:	81 11       	cpse	r24, r1
    1e64:	12 c0       	rjmp	.+36     	; 0x1e8a <XPROGProtocol_ReadMemory+0x9a>
    1e66:	20 c0       	rjmp	.+64     	; 0x1ea8 <XPROGProtocol_ReadMemory+0xb8>
		  ReturnStatus = XPROG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    1e68:	4e 81       	ldd	r20, Y+6	; 0x06
    1e6a:	5f 81       	ldd	r21, Y+7	; 0x07
    1e6c:	be 01       	movw	r22, r28
    1e6e:	68 5f       	subi	r22, 0xF8	; 248
    1e70:	7f 4f       	sbci	r23, 0xFF	; 255
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	53 dc       	rcall	.-1882   	; 0x171e <TINYNVM_ReadMemory>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <XPROGProtocol_ReadMemory+0x9a>
    1e7c:	15 c0       	rjmp	.+42     	; 0x1ea8 <XPROGProtocol_ReadMemory+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e7e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8e 77       	andi	r24, 0x7E	; 126
    1e86:	80 83       	st	Z, r24
    1e88:	18 c0       	rjmp	.+48     	; 0x1eba <XPROGProtocol_ReadMemory+0xca>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e8a:	e1 ef       	ldi	r30, 0xF1	; 241
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 e5       	ldi	r24, 0x50	; 80
    1e90:	80 83       	st	Z, r24
    1e92:	85 e0       	ldi	r24, 0x05	; 5
    1e94:	80 83       	st	Z, r24
    1e96:	10 82       	st	Z, r1
	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPROG_ERR_OK)
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
    1e98:	6e 81       	ldd	r22, Y+6	; 0x06
    1e9a:	7f 81       	ldd	r23, Y+7	; 0x07
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	08 96       	adiw	r24, 0x08	; 8
    1ea4:	82 d2       	rcall	.+1284   	; 0x23aa <Endpoint_Write_Stream_LE>
    1ea6:	eb cf       	rjmp	.-42     	; 0x1e7e <XPROGProtocol_ReadMemory+0x8e>
    1ea8:	e1 ef       	ldi	r30, 0xF1	; 241
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 e5       	ldi	r24, 0x50	; 80
    1eae:	80 83       	st	Z, r24
    1eb0:	85 e0       	ldi	r24, 0x05	; 5
    1eb2:	80 83       	st	Z, r24
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	80 83       	st	Z, r24
    1eb8:	e2 cf       	rjmp	.-60     	; 0x1e7e <XPROGProtocol_ReadMemory+0x8e>

	Endpoint_ClearIN();
}
    1eba:	c9 5f       	subi	r28, 0xF9	; 249
    1ebc:	de 4f       	sbci	r29, 0xFE	; 254
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	08 95       	ret

00001ece <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	1f 92       	push	r1
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	bf d2       	rcall	.+1406   	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ee6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	8b 77       	andi	r24, 0x7B	; 123
    1eee:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1ef6:	ec ee       	ldi	r30, 0xEC	; 236
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	81 60       	ori	r24, 0x01	; 1
    1efe:	80 83       	st	Z, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	80 93 82 01 	sts	0x0182, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f06:	81 e5       	ldi	r24, 0x51	; 81
    1f08:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPROG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <XPROGProtocol_SetMode+0x48>
    1f12:	80 ec       	ldi	r24, 0xC0	; 192
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <XPROGProtocol_SetMode+0x4a>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f1c:	e8 ee       	ldi	r30, 0xE8	; 232
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8e 77       	andi	r24, 0x7E	; 126
    1f24:	80 83       	st	Z, r24
	Endpoint_ClearIN();
}
    1f26:	0f 90       	pop	r0
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	08 95       	ret

00001f2e <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <XPROGProtocol_Command+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <XPROGProtocol_Command+0x8>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <XPROGProtocol_Command+0xa>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f3c:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
    1f40:	84 30       	cpi	r24, 0x04	; 4
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <XPROGProtocol_Command+0x18>
    1f44:	c1 c0       	rjmp	.+386    	; 0x20c8 <XPROGProtocol_Command+0x19a>
    1f46:	38 f4       	brcc	.+14     	; 0x1f56 <XPROGProtocol_Command+0x28>
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	a1 f1       	breq	.+104    	; 0x1fb4 <XPROGProtocol_Command+0x86>
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <XPROGProtocol_Command+0x22>
    1f4e:	53 c0       	rjmp	.+166    	; 0x1ff6 <XPROGProtocol_Command+0xc8>
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	51 f0       	breq	.+20     	; 0x1f68 <XPROGProtocol_Command+0x3a>
    1f54:	62 c1       	rjmp	.+708    	; 0x221a <XPROGProtocol_Command+0x2ec>
    1f56:	86 30       	cpi	r24, 0x06	; 6
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <XPROGProtocol_Command+0x2e>
    1f5a:	ba c0       	rjmp	.+372    	; 0x20d0 <XPROGProtocol_Command+0x1a2>
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <XPROGProtocol_Command+0x32>
    1f5e:	b6 c0       	rjmp	.+364    	; 0x20cc <XPROGProtocol_Command+0x19e>
    1f60:	87 30       	cpi	r24, 0x07	; 7
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <XPROGProtocol_Command+0x38>
    1f64:	e5 c0       	rjmp	.+458    	; 0x2130 <XPROGProtocol_Command+0x202>
    1f66:	59 c1       	rjmp	.+690    	; 0x221a <XPROGProtocol_Command+0x2ec>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f68:	e8 ee       	ldi	r30, 0xE8	; 232
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8b 77       	andi	r24, 0x7B	; 123
    1f70:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1f78:	ec ee       	ldi	r30, 0xEC	; 236
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	81 60       	ori	r24, 0x01	; 1
    1f80:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    1f82:	80 91 82 01 	lds	r24, 0x0182
    1f86:	81 11       	cpse	r24, r1
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <XPROGProtocol_Command+0x60>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    1f8a:	93 dc       	rcall	.-1754   	; 0x18b2 <XMEGANVM_EnablePDI>
    1f8c:	05 c0       	rjmp	.+10     	; 0x1f98 <XPROGProtocol_Command+0x6a>
	else if (XPROG_SelectedProtocol == XPROG_PROTOCOL_TPI)
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	11 f4       	brne	.+4      	; 0x1f96 <XPROGProtocol_Command+0x68>
	  NVMBusEnabled = TINYNVM_EnableTPI();
    1f92:	7b db       	rcall	.-2314   	; 0x168a <TINYNVM_EnableTPI>
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <XPROGProtocol_Command+0x6a>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
    1f96:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f98:	e1 ef       	ldi	r30, 0xF1	; 241
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	20 e5       	ldi	r18, 0x50	; 80
    1f9e:	20 83       	st	Z, r18
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	90 83       	st	Z, r25
	else if (XPROG_SelectedProtocol == XPROG_PROTOCOL_TPI)
	  NVMBusEnabled = TINYNVM_EnableTPI();

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_ENTER_PROGMODE);
	Endpoint_Write_8(NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED);
    1fa4:	98 27       	eor	r25, r24
    1fa6:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fa8:	e8 ee       	ldi	r30, 0xE8	; 232
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8e 77       	andi	r24, 0x7E	; 126
    1fb0:	80 83       	st	Z, r24
    1fb2:	33 c1       	rjmp	.+614    	; 0x221a <XPROGProtocol_Command+0x2ec>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fb4:	e8 ee       	ldi	r30, 0xE8	; 232
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8b 77       	andi	r24, 0x7B	; 123
    1fbc:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1fc4:	ec ee       	ldi	r30, 0xEC	; 236
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	80 83       	st	Z, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    1fce:	80 91 82 01 	lds	r24, 0x0182
    1fd2:	81 11       	cpse	r24, r1
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <XPROGProtocol_Command+0xac>
	  XMEGANVM_DisablePDI();
    1fd6:	af dc       	rcall	.-1698   	; 0x1936 <XMEGANVM_DisablePDI>
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <XPROGProtocol_Command+0xae>
	else
	  TINYNVM_DisableTPI();
    1fda:	95 db       	rcall	.-2262   	; 0x1706 <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fdc:	e1 ef       	ldi	r30, 0xF1	; 241
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 e5       	ldi	r24, 0x50	; 80
    1fe2:	80 83       	st	Z, r24
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	80 83       	st	Z, r24
    1fe8:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fea:	e8 ee       	ldi	r30, 0xE8	; 232
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8e 77       	andi	r24, 0x7E	; 126
    1ff2:	80 83       	st	Z, r24
    1ff4:	12 c1       	rjmp	.+548    	; 0x221a <XPROGProtocol_Command+0x2ec>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	65 e0       	ldi	r22, 0x05	; 5
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	ce 01       	movw	r24, r28
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	30 d2       	rcall	.+1120   	; 0x2464 <Endpoint_Read_Stream_LE>
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;

				Temp = Data.Bytes[0];
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
				Data.Bytes[0] = Data.Bytes[3];
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
				Data.Bytes[3] = Temp;

				Temp = Data.Bytes[1];
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
				Data.Bytes[1] = Data.Bytes[2];
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    200c:	3a 83       	std	Y+2, r19	; 0x02
    200e:	2b 83       	std	Y+3, r18	; 0x03
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8d 83       	std	Y+5, r24	; 0x05
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2014:	e8 ee       	ldi	r30, 0xE8	; 232
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8b 77       	andi	r24, 0x7B	; 123
    201c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    2024:	ec ee       	ldi	r30, 0xEC	; 236
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	81 60       	ori	r24, 0x01	; 1
    202c:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    202e:	80 91 82 01 	lds	r24, 0x0182
    2032:	81 11       	cpse	r24, r1
    2034:	2c c0       	rjmp	.+88     	; 0x208e <XPROGProtocol_Command+0x160>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	99 f0       	breq	.+38     	; 0x2062 <XPROGProtocol_Command+0x134>
    203c:	30 f4       	brcc	.+12     	; 0x204a <XPROGProtocol_Command+0x11c>
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	61 f0       	breq	.+24     	; 0x205a <XPROGProtocol_Command+0x12c>
    2042:	68 f4       	brcc	.+26     	; 0x205e <XPROGProtocol_Command+0x130>
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	c9 f0       	breq	.+50     	; 0x207a <XPROGProtocol_Command+0x14c>
    2048:	16 c0       	rjmp	.+44     	; 0x2076 <XPROGProtocol_Command+0x148>
    204a:	86 30       	cpi	r24, 0x06	; 6
    204c:	71 f0       	breq	.+28     	; 0x206a <XPROGProtocol_Command+0x13c>
    204e:	58 f0       	brcs	.+22     	; 0x2066 <XPROGProtocol_Command+0x138>
    2050:	87 30       	cpi	r24, 0x07	; 7
    2052:	69 f0       	breq	.+26     	; 0x206e <XPROGProtocol_Command+0x140>
    2054:	88 30       	cpi	r24, 0x08	; 8
    2056:	69 f0       	breq	.+26     	; 0x2072 <XPROGProtocol_Command+0x144>
    2058:	0e c0       	rjmp	.+28     	; 0x2076 <XPROGProtocol_Command+0x148>
		{
			case XPROG_ERASE_CHIP:
				EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
				break;
			case XPROG_ERASE_APP:
				EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	0f c0       	rjmp	.+30     	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			case XPROG_ERASE_BOOT:
				EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
    205e:	88 e6       	ldi	r24, 0x68	; 104
    2060:	0d c0       	rjmp	.+26     	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			case XPROG_ERASE_EEPROM:
				EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
    2062:	80 e3       	ldi	r24, 0x30	; 48
    2064:	0b c0       	rjmp	.+22     	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			case XPROG_ERASE_APP_PAGE:
				EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
    2066:	82 e2       	ldi	r24, 0x22	; 34
    2068:	09 c0       	rjmp	.+18     	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			case XPROG_ERASE_BOOT_PAGE:
				EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
    206a:	8a e2       	ldi	r24, 0x2A	; 42
    206c:	07 c0       	rjmp	.+14     	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			case XPROG_ERASE_EEPROM_PAGE:
				EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
    206e:	82 e3       	ldi	r24, 0x32	; 50
    2070:	05 c0       	rjmp	.+10     	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			case XPROG_ERASE_USERSIG:
				EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
    2072:	88 e1       	ldi	r24, 0x18	; 24
    2074:	03 c0       	rjmp	.+6      	; 0x207c <XPROGProtocol_Command+0x14e>
				break;
			default:
				EraseCommand = XMEGA_NVM_CMD_NOOP;
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	01 c0       	rjmp	.+2      	; 0x207c <XPROGProtocol_Command+0x14e>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
		{
			case XPROG_ERASE_CHIP:
				EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
    207a:	80 e4       	ldi	r24, 0x40	; 64
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    207c:	4a 81       	ldd	r20, Y+2	; 0x02
    207e:	5b 81       	ldd	r21, Y+3	; 0x03
    2080:	6c 81       	ldd	r22, Y+4	; 0x04
    2082:	7d 81       	ldd	r23, Y+5	; 0x05
    2084:	85 dd       	rcall	.-1270   	; 0x1b90 <XMEGANVM_EraseMemory>
    2086:	81 11       	cpse	r24, r1
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <XPROGProtocol_Command+0x17a>
		  ReturnStatus = XPROG_ERR_TIMEOUT;
    208a:	93 e0       	ldi	r25, 0x03	; 3
    208c:	10 c0       	rjmp	.+32     	; 0x20ae <XPROGProtocol_Command+0x180>
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPROG_ERASE_CHIP)
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	11 f0       	breq	.+4      	; 0x2098 <XPROGProtocol_Command+0x16a>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
    2094:	84 e1       	ldi	r24, 0x14	; 20
    2096:	01 c0       	rjmp	.+2      	; 0x209a <XPROGProtocol_Command+0x16c>
		  ReturnStatus = XPROG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPROG_ERASE_CHIP)
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
    2098:	80 e1       	ldi	r24, 0x10	; 16
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    209a:	6a 81       	ldd	r22, Y+2	; 0x02
    209c:	7b 81       	ldd	r23, Y+3	; 0x03
    209e:	af db       	rcall	.-2210   	; 0x17fe <TINYNVM_EraseMemory>
    20a0:	81 11       	cpse	r24, r1
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <XPROGProtocol_Command+0x17e>
		  ReturnStatus = XPROG_ERR_TIMEOUT;
    20a4:	93 e0       	ldi	r25, 0x03	; 3
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <XPROGProtocol_Command+0x180>
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <XPROGProtocol_Command+0x180>
    20ac:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20ae:	e1 ef       	ldi	r30, 0xF1	; 241
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 e5       	ldi	r24, 0x50	; 80
    20b4:	80 83       	st	Z, r24
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	80 83       	st	Z, r24
    20ba:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20bc:	e8 ee       	ldi	r30, 0xE8	; 232
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8e 77       	andi	r24, 0x7E	; 126
    20c4:	80 83       	st	Z, r24
    20c6:	a9 c0       	rjmp	.+338    	; 0x221a <XPROGProtocol_Command+0x2ec>
			break;
		case XPROG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPROG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    20c8:	d8 dd       	rcall	.-1104   	; 0x1c7a <XPROGProtocol_WriteMemory>
			break;
    20ca:	a7 c0       	rjmp	.+334    	; 0x221a <XPROGProtocol_Command+0x2ec>
		case XPROG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    20cc:	91 de       	rcall	.-734    	; 0x1df0 <XPROGProtocol_ReadMemory>
			break;
    20ce:	a5 c0       	rjmp	.+330    	; 0x221a <XPROGProtocol_Command+0x2ec>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	ce 01       	movw	r24, r28
    20da:	06 96       	adiw	r24, 0x06	; 6
    20dc:	c3 d1       	rcall	.+902    	; 0x2464 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20de:	e8 ee       	ldi	r30, 0xE8	; 232
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8b 77       	andi	r24, 0x7B	; 123
    20e6:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    20ee:	ec ee       	ldi	r30, 0xEC	; 236
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	81 60       	ori	r24, 0x01	; 1
    20f6:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
    20f8:	80 91 82 01 	lds	r24, 0x0182
    20fc:	81 11       	cpse	r24, r1
    20fe:	6c c0       	rjmp	.+216    	; 0x21d8 <XPROGProtocol_Command+0x2aa>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	31 f0       	breq	.+12     	; 0x2112 <XPROGProtocol_Command+0x1e4>
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	11 f4       	brne	.+4      	; 0x210e <XPROGProtocol_Command+0x1e0>
		{
			case XPROG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
				break;
			case XPROG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
    210a:	89 e3       	ldi	r24, 0x39	; 57
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <XPROGProtocol_Command+0x1e6>
				break;
			default:
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
    210e:	88 e7       	ldi	r24, 0x78	; 120
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <XPROGProtocol_Command+0x1e6>

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
		{
			case XPROG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
    2112:	88 e3       	ldi	r24, 0x38	; 56
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    2114:	be 01       	movw	r22, r28
    2116:	6f 5f       	subi	r22, 0xFF	; 255
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	19 dc       	rcall	.-1998   	; 0x194e <XMEGANVM_GetMemoryCRC>
    211c:	81 11       	cpse	r24, r1
    211e:	65 c0       	rjmp	.+202    	; 0x21ea <XPROGProtocol_Command+0x2bc>
		  ReturnStatus = XPROG_ERR_TIMEOUT;
    2120:	83 e0       	ldi	r24, 0x03	; 3
    2122:	5b c0       	rjmp	.+182    	; 0x21da <XPROGProtocol_Command+0x2ac>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2124:	e8 ee       	ldi	r30, 0xE8	; 232
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8e 77       	andi	r24, 0x7E	; 126
    212c:	80 83       	st	Z, r24
    212e:	75 c0       	rjmp	.+234    	; 0x221a <XPROGProtocol_Command+0x2ec>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2130:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPROG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	29 f1       	breq	.+74     	; 0x2182 <XPROGProtocol_Command+0x254>
    2138:	28 f4       	brcc	.+10     	; 0x2144 <XPROGProtocol_Command+0x216>
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	41 f0       	breq	.+16     	; 0x214e <XPROGProtocol_Command+0x220>
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	b1 f0       	breq	.+44     	; 0x216e <XPROGProtocol_Command+0x240>
    2142:	31 c0       	rjmp	.+98     	; 0x21a6 <XPROGProtocol_Command+0x278>
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	19 f1       	breq	.+70     	; 0x218e <XPROGProtocol_Command+0x260>
    2148:	85 30       	cpi	r24, 0x05	; 5
    214a:	39 f1       	breq	.+78     	; 0x219a <XPROGProtocol_Command+0x26c>
    214c:	2c c0       	rjmp	.+88     	; 0x21a6 <XPROGProtocol_Command+0x278>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    214e:	e1 ef       	ldi	r30, 0xF1	; 241
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
				Data.Bytes[2] = UEDATX;
    2154:	90 81       	ld	r25, Z
				Data.Bytes[1] = UEDATX;
    2156:	20 81       	ld	r18, Z
				Data.Bytes[0] = UEDATX;
    2158:	30 81       	ld	r19, Z
	{
		case XPROG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
    215a:	30 93 61 01 	sts	0x0161, r19
    215e:	20 93 62 01 	sts	0x0162, r18
    2162:	90 93 63 01 	sts	0x0163, r25
    2166:	80 93 64 01 	sts	0x0164, r24
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	1d c0       	rjmp	.+58     	; 0x21a8 <XPROGProtocol_Command+0x27a>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    216e:	e1 ef       	ldi	r30, 0xF1	; 241
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
				Data.Bytes[0] = UEDATX;
    2174:	90 81       	ld	r25, Z
	{
		case XPROG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
    2176:	90 93 5f 01 	sts	0x015F, r25
    217a:	80 93 60 01 	sts	0x0160, r24
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	13 c0       	rjmp	.+38     	; 0x21a8 <XPROGProtocol_Command+0x27a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2182:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
    2186:	80 93 5e 01 	sts	0x015E, r24
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0d c0       	rjmp	.+26     	; 0x21a8 <XPROGProtocol_Command+0x27a>
    218e:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
    2192:	80 93 5d 01 	sts	0x015D, r24
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <XPROGProtocol_Command+0x27a>
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    219a:	e1 ef       	ldi	r30, 0xF1	; 241
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
				Dummy = UEDATX;
    21a0:	80 81       	ld	r24, Z
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <XPROGProtocol_Command+0x27a>
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPROG_ERR_FAILED;
    21a6:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    21a8:	e8 ee       	ldi	r30, 0xE8	; 232
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8b 77       	andi	r24, 0x7B	; 123
    21b0:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    21b8:	ac ee       	ldi	r26, 0xEC	; 236
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	8c 91       	ld	r24, X
    21be:	81 60       	ori	r24, 0x01	; 1
    21c0:	8c 93       	st	X, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21c2:	a1 ef       	ldi	r26, 0xF1	; 241
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	80 e5       	ldi	r24, 0x50	; 80
    21c8:	8c 93       	st	X, r24
    21ca:	87 e0       	ldi	r24, 0x07	; 7
    21cc:	8c 93       	st	X, r24
    21ce:	9c 93       	st	X, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21d0:	80 81       	ld	r24, Z
    21d2:	8e 77       	andi	r24, 0x7E	; 126
    21d4:	80 83       	st	Z, r24
    21d6:	21 c0       	rjmp	.+66     	; 0x221a <XPROGProtocol_Command+0x2ec>
		  ReturnStatus = XPROG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPROG_ERR_FAILED;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21da:	e1 ef       	ldi	r30, 0xF1	; 241
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	90 e5       	ldi	r25, 0x50	; 80
    21e0:	90 83       	st	Z, r25
    21e2:	96 e0       	ldi	r25, 0x06	; 6
    21e4:	90 83       	st	Z, r25
    21e6:	80 83       	st	Z, r24
    21e8:	9d cf       	rjmp	.-198    	; 0x2124 <XPROGProtocol_Command+0x1f6>
    21ea:	e1 ef       	ldi	r30, 0xF1	; 241
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 e5       	ldi	r24, 0x50	; 80
    21f0:	80 83       	st	Z, r24
    21f2:	86 e0       	ldi	r24, 0x06	; 6
    21f4:	80 83       	st	Z, r24
    21f6:	10 82       	st	Z, r1
	Endpoint_Write_8(XPROG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPROG_ERR_OK)
	{
		Endpoint_Write_8(MemoryCRC >> 16);
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	ab 81       	ldd	r26, Y+3	; 0x03
    21fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2200:	cd 01       	movw	r24, r26
    2202:	aa 27       	eor	r26, r26
    2204:	bb 27       	eor	r27, r27
    2206:	80 83       	st	Z, r24
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	ab 81       	ldd	r26, Y+3	; 0x03
    220e:	bc 81       	ldd	r27, Y+4	; 0x04
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2210:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
    2212:	89 2f       	mov	r24, r25
    2214:	99 27       	eor	r25, r25
    2216:	80 83       	st	Z, r24
    2218:	85 cf       	rjmp	.-246    	; 0x2124 <XPROGProtocol_Command+0x1f6>
			break;
		case XPROG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
    221a:	26 96       	adiw	r28, 0x06	; 6
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
    222c:	4d 99       	sbic	0x09, 5	; 9
    222e:	fe cf       	rjmp	.-4      	; 0x222c <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
    2230:	4d 9b       	sbis	0x09, 5	; 9
    2232:	fe cf       	rjmp	.-4      	; 0x2230 <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
    2234:	4d 99       	sbic	0x09, 5	; 9
    2236:	fe cf       	rjmp	.-4      	; 0x2234 <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
    2238:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    223a:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    223c:	e9 ec       	ldi	r30, 0xC9	; 201
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 7e       	andi	r24, 0xEF	; 239
    2244:	80 83       	st	Z, r24
	UCSR1B |=  (1 << TXEN1);
    2246:	80 81       	ld	r24, Z
    2248:	88 60       	ori	r24, 0x08	; 8
    224a:	80 83       	st	Z, r24

	IsSending = true;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	80 93 88 01 	sts	0x0188, r24
    2252:	08 95       	ret

00002254 <XPROGTarget_SetRxMode>:
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    2254:	e8 ec       	ldi	r30, 0xC8	; 200
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	86 ff       	sbrs	r24, 6
    225c:	fd cf       	rjmp	.-6      	; 0x2258 <XPROGTarget_SetRxMode+0x4>
	UCSR1A |=  (1 << TXC1);
    225e:	e8 ec       	ldi	r30, 0xC8	; 200
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	80 64       	ori	r24, 0x40	; 64
    2266:	80 83       	st	Z, r24

	UCSR1B &= ~(1 << TXEN1);
    2268:	e9 ec       	ldi	r30, 0xC9	; 201
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	87 7f       	andi	r24, 0xF7	; 247
    2270:	80 83       	st	Z, r24
	UCSR1B |=  (1 << RXEN1);
    2272:	80 81       	ld	r24, Z
    2274:	80 61       	ori	r24, 0x10	; 16
    2276:	80 83       	st	Z, r24

	DDRD   &= ~(1 << 3);
    2278:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    227a:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    227c:	10 92 88 01 	sts	0x0188, r1
    2280:	08 95       	ret

00002282 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    2282:	80 91 88 01 	lds	r24, 0x0188
    2286:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    2288:	e5 df       	rcall	.-54     	; 0x2254 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    228a:	80 ec       	ldi	r24, 0xC0	; 192
    228c:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
    2290:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    2294:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    2298:	8a b1       	in	r24, 0x0a	; 10
    229a:	87 7d       	andi	r24, 0xD7	; 215
    229c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    229e:	8b b1       	in	r24, 0x0b	; 11
    22a0:	83 7d       	andi	r24, 0xD3	; 211
    22a2:	8b b9       	out	0x0b, r24	; 11
    22a4:	08 95       	ret

000022a6 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    22a6:	80 91 88 01 	lds	r24, 0x0188
    22aa:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    22ac:	d3 df       	rcall	.-90     	; 0x2254 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    22ae:	e8 ec       	ldi	r30, 0xC8	; 200
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	80 6c       	ori	r24, 0xC0	; 192
    22b6:	80 83       	st	Z, r24
	UCSR1B  = 0;
    22b8:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    22bc:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    22c0:	8a b1       	in	r24, 0x0a	; 10
    22c2:	87 7d       	andi	r24, 0xD7	; 215
    22c4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    22c6:	8b b1       	in	r24, 0x0b	; 11
    22c8:	83 7d       	andi	r24, 0xD3	; 211
    22ca:	8b b9       	out	0x0b, r24	; 11

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    22cc:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    22ce:	2c 98       	cbi	0x05, 4	; 5
    22d0:	08 95       	ret

000022d2 <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    22d2:	cf 93       	push	r28
    22d4:	c8 2f       	mov	r28, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    22d6:	80 91 88 01 	lds	r24, 0x0188
    22da:	81 11       	cpse	r24, r1
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
    22de:	a6 df       	rcall	.-180    	; 0x222c <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    22e0:	e8 ec       	ldi	r30, 0xC8	; 200
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	90 81       	ld	r25, Z
    22e6:	95 ff       	sbrs	r25, 5
    22e8:	fd cf       	rjmp	.-6      	; 0x22e4 <XPROGTarget_SendByte+0x12>
	UCSR1A |= (1 << TXC1);
    22ea:	e8 ec       	ldi	r30, 0xC8	; 200
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	90 81       	ld	r25, Z
    22f0:	90 64       	ori	r25, 0x40	; 64
    22f2:	90 83       	st	Z, r25
	UDR1    = Byte;
    22f4:	c0 93 ce 00 	sts	0x00CE, r28
}
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    22fc:	80 91 88 01 	lds	r24, 0x0188
    2300:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    2302:	a8 df       	rcall	.-176    	; 0x2254 <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
    2304:	e8 ec       	ldi	r30, 0xC8	; 200
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	88 23       	and	r24, r24
    230c:	1c f0       	brlt	.+6      	; 0x2314 <XPROGTarget_ReceiveByte+0x18>
    230e:	8a b5       	in	r24, 0x2a	; 42
    2310:	81 11       	cpse	r24, r1
    2312:	fa cf       	rjmp	.-12     	; 0x2308 <XPROGTarget_ReceiveByte+0xc>

	return UDR1;
    2314:	80 91 ce 00 	lds	r24, 0x00CE
}
    2318:	08 95       	ret

0000231a <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    231a:	80 91 88 01 	lds	r24, 0x0188
    231e:	81 11       	cpse	r24, r1
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    2322:	84 df       	rcall	.-248    	; 0x222c <XPROGTarget_SetTxMode>
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    2324:	8c e0       	ldi	r24, 0x0C	; 12

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    2326:	4d 99       	sbic	0x09, 5	; 9
    2328:	fe cf       	rjmp	.-4      	; 0x2326 <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    232a:	4d 9b       	sbis	0x09, 5	; 9
    232c:	fe cf       	rjmp	.-4      	; 0x232a <XPROGTarget_SendIdle+0x10>
		while (PIND & (1 << 5));
    232e:	4d 99       	sbic	0x09, 5	; 9
    2330:	fe cf       	rjmp	.-4      	; 0x232e <XPROGTarget_SendIdle+0x14>
    2332:	81 50       	subi	r24, 0x01	; 1
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    2334:	c1 f7       	brne	.-16     	; 0x2326 <XPROGTarget_SendIdle+0xc>
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    2336:	08 95       	ret

00002338 <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    2338:	10 92 88 01 	sts	0x0188, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    233c:	8a b1       	in	r24, 0x0a	; 10
    233e:	88 62       	ori	r24, 0x28	; 40
    2340:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    2342:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    2344:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2346:	8f e8       	ldi	r24, 0x8F	; 143
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <XPROGTarget_EnableTargetPDI+0x12>
    234e:	00 c0       	rjmp	.+0      	; 0x2350 <XPROGTarget_EnableTargetPDI+0x18>
    2350:	00 00       	nop
	_delay_us(100);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    2352:	83 e0       	ldi	r24, 0x03	; 3
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	90 93 cd 00 	sts	0x00CD, r25
    235a:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    235e:	88 e0       	ldi	r24, 0x08	; 8
    2360:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    2364:	8f e6       	ldi	r24, 0x6F	; 111
    2366:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    236a:	d7 df       	rcall	.-82     	; 0x231a <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
    236c:	d6 cf       	rjmp	.-84     	; 0x231a <XPROGTarget_SendIdle>
    236e:	08 95       	ret

00002370 <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
    2370:	10 92 88 01 	sts	0x0188, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    2374:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    2376:	2c 98       	cbi	0x05, 4	; 5
    2378:	8f e8       	ldi	r24, 0x8F	; 143
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <XPROGTarget_EnableTargetTPI+0xc>
    2380:	00 c0       	rjmp	.+0      	; 0x2382 <XPROGTarget_EnableTargetTPI+0x12>
    2382:	00 00       	nop
	_delay_us(100);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    2384:	8a b1       	in	r24, 0x0a	; 10
    2386:	88 62       	ori	r24, 0x28	; 40
    2388:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    238a:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    238c:	83 e0       	ldi	r24, 0x03	; 3
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	90 93 cd 00 	sts	0x00CD, r25
    2394:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    2398:	88 e0       	ldi	r24, 0x08	; 8
    239a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    239e:	8f e6       	ldi	r24, 0x6F	; 111
    23a0:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    23a4:	ba df       	rcall	.-140    	; 0x231a <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
    23a6:	b9 cf       	rjmp	.-142    	; 0x231a <XPROGTarget_SendIdle>
    23a8:	08 95       	ret

000023aa <Endpoint_Write_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	8c 01       	movw	r16, r24
    23c4:	eb 01       	movw	r28, r22
    23c6:	5a 01       	movw	r10, r20
    23c8:	ec d2       	rcall	.+1496   	; 0x29a2 <Endpoint_WaitUntilReady>
    23ca:	81 11       	cpse	r24, r1
    23cc:	3e c0       	rjmp	.+124    	; 0x244a <Endpoint_Write_Stream_LE+0xa0>
    23ce:	a1 14       	cp	r10, r1
    23d0:	b1 04       	cpc	r11, r1
    23d2:	39 f0       	breq	.+14     	; 0x23e2 <Endpoint_Write_Stream_LE+0x38>
    23d4:	f5 01       	movw	r30, r10
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	c8 1b       	sub	r28, r24
    23dc:	d9 0b       	sbc	r29, r25
    23de:	08 0f       	add	r16, r24
    23e0:	19 1f       	adc	r17, r25
    23e2:	20 97       	sbiw	r28, 0x00	; 0
    23e4:	89 f1       	breq	.+98     	; 0x2448 <Endpoint_Write_Stream_LE+0x9e>
    23e6:	e1 2c       	mov	r14, r1
    23e8:	f1 2c       	mov	r15, r1
    23ea:	0f 2e       	mov	r0, r31
    23ec:	f8 ee       	ldi	r31, 0xE8	; 232
    23ee:	8f 2e       	mov	r8, r31
    23f0:	91 2c       	mov	r9, r1
    23f2:	f0 2d       	mov	r31, r0
    23f4:	0f 2e       	mov	r0, r31
    23f6:	f1 ef       	ldi	r31, 0xF1	; 241
    23f8:	cf 2e       	mov	r12, r31
    23fa:	d1 2c       	mov	r13, r1
    23fc:	f0 2d       	mov	r31, r0
    23fe:	f4 01       	movw	r30, r8
    2400:	80 81       	ld	r24, Z
    2402:	85 fd       	sbrc	r24, 5
    2404:	14 c0       	rjmp	.+40     	; 0x242e <Endpoint_Write_Stream_LE+0x84>
    2406:	80 81       	ld	r24, Z
    2408:	8e 77       	andi	r24, 0x7E	; 126
    240a:	80 83       	st	Z, r24
    240c:	37 d5       	rcall	.+2670   	; 0x2e7c <USB_USBTask>
    240e:	a1 14       	cp	r10, r1
    2410:	b1 04       	cpc	r11, r1
    2412:	49 f0       	breq	.+18     	; 0x2426 <Endpoint_Write_Stream_LE+0x7c>
    2414:	f5 01       	movw	r30, r10
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	e8 0e       	add	r14, r24
    241c:	f9 1e       	adc	r15, r25
    241e:	f1 82       	std	Z+1, r15	; 0x01
    2420:	e0 82       	st	Z, r14
    2422:	85 e0       	ldi	r24, 0x05	; 5
    2424:	12 c0       	rjmp	.+36     	; 0x244a <Endpoint_Write_Stream_LE+0xa0>
    2426:	bd d2       	rcall	.+1402   	; 0x29a2 <Endpoint_WaitUntilReady>
    2428:	88 23       	and	r24, r24
    242a:	51 f0       	breq	.+20     	; 0x2440 <Endpoint_Write_Stream_LE+0x96>
    242c:	0e c0       	rjmp	.+28     	; 0x244a <Endpoint_Write_Stream_LE+0xa0>
    242e:	f8 01       	movw	r30, r16
    2430:	81 91       	ld	r24, Z+
    2432:	8f 01       	movw	r16, r30
    2434:	f6 01       	movw	r30, r12
    2436:	80 83       	st	Z, r24
    2438:	21 97       	sbiw	r28, 0x01	; 1
    243a:	ff ef       	ldi	r31, 0xFF	; 255
    243c:	ef 1a       	sub	r14, r31
    243e:	ff 0a       	sbc	r15, r31
    2440:	20 97       	sbiw	r28, 0x00	; 0
    2442:	e9 f6       	brne	.-70     	; 0x23fe <Endpoint_Write_Stream_LE+0x54>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	01 c0       	rjmp	.+2      	; 0x244a <Endpoint_Write_Stream_LE+0xa0>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	8f 90       	pop	r8
    2462:	08 95       	ret

00002464 <Endpoint_Read_Stream_LE>:
    2464:	8f 92       	push	r8
    2466:	9f 92       	push	r9
    2468:	af 92       	push	r10
    246a:	bf 92       	push	r11
    246c:	cf 92       	push	r12
    246e:	df 92       	push	r13
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	8c 01       	movw	r16, r24
    247e:	eb 01       	movw	r28, r22
    2480:	5a 01       	movw	r10, r20
    2482:	8f d2       	rcall	.+1310   	; 0x29a2 <Endpoint_WaitUntilReady>
    2484:	81 11       	cpse	r24, r1
    2486:	3e c0       	rjmp	.+124    	; 0x2504 <Endpoint_Read_Stream_LE+0xa0>
    2488:	a1 14       	cp	r10, r1
    248a:	b1 04       	cpc	r11, r1
    248c:	39 f0       	breq	.+14     	; 0x249c <Endpoint_Read_Stream_LE+0x38>
    248e:	f5 01       	movw	r30, r10
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	c8 1b       	sub	r28, r24
    2496:	d9 0b       	sbc	r29, r25
    2498:	08 0f       	add	r16, r24
    249a:	19 1f       	adc	r17, r25
    249c:	20 97       	sbiw	r28, 0x00	; 0
    249e:	89 f1       	breq	.+98     	; 0x2502 <Endpoint_Read_Stream_LE+0x9e>
    24a0:	e1 2c       	mov	r14, r1
    24a2:	f1 2c       	mov	r15, r1
    24a4:	0f 2e       	mov	r0, r31
    24a6:	f8 ee       	ldi	r31, 0xE8	; 232
    24a8:	8f 2e       	mov	r8, r31
    24aa:	91 2c       	mov	r9, r1
    24ac:	f0 2d       	mov	r31, r0
    24ae:	0f 2e       	mov	r0, r31
    24b0:	f1 ef       	ldi	r31, 0xF1	; 241
    24b2:	cf 2e       	mov	r12, r31
    24b4:	d1 2c       	mov	r13, r1
    24b6:	f0 2d       	mov	r31, r0
    24b8:	f4 01       	movw	r30, r8
    24ba:	80 81       	ld	r24, Z
    24bc:	85 fd       	sbrc	r24, 5
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <Endpoint_Read_Stream_LE+0x84>
    24c0:	80 81       	ld	r24, Z
    24c2:	8b 77       	andi	r24, 0x7B	; 123
    24c4:	80 83       	st	Z, r24
    24c6:	da d4       	rcall	.+2484   	; 0x2e7c <USB_USBTask>
    24c8:	a1 14       	cp	r10, r1
    24ca:	b1 04       	cpc	r11, r1
    24cc:	49 f0       	breq	.+18     	; 0x24e0 <Endpoint_Read_Stream_LE+0x7c>
    24ce:	f5 01       	movw	r30, r10
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	e8 0e       	add	r14, r24
    24d6:	f9 1e       	adc	r15, r25
    24d8:	f1 82       	std	Z+1, r15	; 0x01
    24da:	e0 82       	st	Z, r14
    24dc:	85 e0       	ldi	r24, 0x05	; 5
    24de:	12 c0       	rjmp	.+36     	; 0x2504 <Endpoint_Read_Stream_LE+0xa0>
    24e0:	60 d2       	rcall	.+1216   	; 0x29a2 <Endpoint_WaitUntilReady>
    24e2:	88 23       	and	r24, r24
    24e4:	51 f0       	breq	.+20     	; 0x24fa <Endpoint_Read_Stream_LE+0x96>
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <Endpoint_Read_Stream_LE+0xa0>
    24e8:	f6 01       	movw	r30, r12
    24ea:	80 81       	ld	r24, Z
    24ec:	f8 01       	movw	r30, r16
    24ee:	81 93       	st	Z+, r24
    24f0:	8f 01       	movw	r16, r30
    24f2:	21 97       	sbiw	r28, 0x01	; 1
    24f4:	ff ef       	ldi	r31, 0xFF	; 255
    24f6:	ef 1a       	sub	r14, r31
    24f8:	ff 0a       	sbc	r15, r31
    24fa:	20 97       	sbiw	r28, 0x00	; 0
    24fc:	e9 f6       	brne	.-70     	; 0x24b8 <Endpoint_Read_Stream_LE+0x54>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <Endpoint_Read_Stream_LE+0xa0>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	8f 90       	pop	r8
    251c:	08 95       	ret

0000251e <Endpoint_Read_Stream_BE>:
    251e:	8f 92       	push	r8
    2520:	9f 92       	push	r9
    2522:	af 92       	push	r10
    2524:	bf 92       	push	r11
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	8c 01       	movw	r16, r24
    2538:	eb 01       	movw	r28, r22
    253a:	5a 01       	movw	r10, r20
    253c:	32 d2       	rcall	.+1124   	; 0x29a2 <Endpoint_WaitUntilReady>
    253e:	81 11       	cpse	r24, r1
    2540:	43 c0       	rjmp	.+134    	; 0x25c8 <Endpoint_Read_Stream_BE+0xaa>
    2542:	ce 01       	movw	r24, r28
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	08 0f       	add	r16, r24
    2548:	19 1f       	adc	r17, r25
    254a:	a1 14       	cp	r10, r1
    254c:	b1 04       	cpc	r11, r1
    254e:	39 f0       	breq	.+14     	; 0x255e <Endpoint_Read_Stream_BE+0x40>
    2550:	f5 01       	movw	r30, r10
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	c8 1b       	sub	r28, r24
    2558:	d9 0b       	sbc	r29, r25
    255a:	08 1b       	sub	r16, r24
    255c:	19 0b       	sbc	r17, r25
    255e:	20 97       	sbiw	r28, 0x00	; 0
    2560:	91 f1       	breq	.+100    	; 0x25c6 <Endpoint_Read_Stream_BE+0xa8>
    2562:	e1 2c       	mov	r14, r1
    2564:	f1 2c       	mov	r15, r1
    2566:	0f 2e       	mov	r0, r31
    2568:	f8 ee       	ldi	r31, 0xE8	; 232
    256a:	8f 2e       	mov	r8, r31
    256c:	91 2c       	mov	r9, r1
    256e:	f0 2d       	mov	r31, r0
    2570:	0f 2e       	mov	r0, r31
    2572:	f1 ef       	ldi	r31, 0xF1	; 241
    2574:	cf 2e       	mov	r12, r31
    2576:	d1 2c       	mov	r13, r1
    2578:	f0 2d       	mov	r31, r0
    257a:	f4 01       	movw	r30, r8
    257c:	80 81       	ld	r24, Z
    257e:	85 fd       	sbrc	r24, 5
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <Endpoint_Read_Stream_BE+0x8c>
    2582:	80 81       	ld	r24, Z
    2584:	8b 77       	andi	r24, 0x7B	; 123
    2586:	80 83       	st	Z, r24
    2588:	79 d4       	rcall	.+2290   	; 0x2e7c <USB_USBTask>
    258a:	a1 14       	cp	r10, r1
    258c:	b1 04       	cpc	r11, r1
    258e:	49 f0       	breq	.+18     	; 0x25a2 <Endpoint_Read_Stream_BE+0x84>
    2590:	f5 01       	movw	r30, r10
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	e8 0e       	add	r14, r24
    2598:	f9 1e       	adc	r15, r25
    259a:	f1 82       	std	Z+1, r15	; 0x01
    259c:	e0 82       	st	Z, r14
    259e:	85 e0       	ldi	r24, 0x05	; 5
    25a0:	13 c0       	rjmp	.+38     	; 0x25c8 <Endpoint_Read_Stream_BE+0xaa>
    25a2:	ff d1       	rcall	.+1022   	; 0x29a2 <Endpoint_WaitUntilReady>
    25a4:	88 23       	and	r24, r24
    25a6:	59 f0       	breq	.+22     	; 0x25be <Endpoint_Read_Stream_BE+0xa0>
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <Endpoint_Read_Stream_BE+0xaa>
    25aa:	f6 01       	movw	r30, r12
    25ac:	80 81       	ld	r24, Z
    25ae:	f8 01       	movw	r30, r16
    25b0:	80 83       	st	Z, r24
    25b2:	01 50       	subi	r16, 0x01	; 1
    25b4:	11 09       	sbc	r17, r1
    25b6:	21 97       	sbiw	r28, 0x01	; 1
    25b8:	ff ef       	ldi	r31, 0xFF	; 255
    25ba:	ef 1a       	sub	r14, r31
    25bc:	ff 0a       	sbc	r15, r31
    25be:	20 97       	sbiw	r28, 0x00	; 0
    25c0:	e1 f6       	brne	.-72     	; 0x257a <Endpoint_Read_Stream_BE+0x5c>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <Endpoint_Read_Stream_BE+0xaa>
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	9f 90       	pop	r9
    25de:	8f 90       	pop	r8
    25e0:	08 95       	ret

000025e2 <Endpoint_Write_Control_Stream_LE>:
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	20 91 91 01 	lds	r18, 0x0191
    25f4:	30 91 92 01 	lds	r19, 0x0192
    25f8:	26 17       	cp	r18, r22
    25fa:	37 07       	cpc	r19, r23
    25fc:	58 f0       	brcs	.+22     	; 0x2614 <Endpoint_Write_Control_Stream_LE+0x32>
    25fe:	61 15       	cp	r22, r1
    2600:	71 05       	cpc	r23, r1
    2602:	39 f4       	brne	.+14     	; 0x2612 <Endpoint_Write_Control_Stream_LE+0x30>
    2604:	e8 ee       	ldi	r30, 0xE8	; 232
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	20 81       	ld	r18, Z
    260a:	2e 77       	andi	r18, 0x7E	; 126
    260c:	20 83       	st	Z, r18
    260e:	9b 01       	movw	r18, r22
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <Endpoint_Write_Control_Stream_LE+0x32>
    2612:	9b 01       	movw	r18, r22
    2614:	a8 2f       	mov	r26, r24
    2616:	b9 2f       	mov	r27, r25
    2618:	10 e0       	ldi	r17, 0x00	; 0
    261a:	e8 ee       	ldi	r30, 0xE8	; 232
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	63 ef       	ldi	r22, 0xF3	; 243
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	42 ef       	ldi	r20, 0xF2	; 242
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	0f 2e       	mov	r0, r31
    2628:	f1 ef       	ldi	r31, 0xF1	; 241
    262a:	cf 2e       	mov	r12, r31
    262c:	d1 2c       	mov	r13, r1
    262e:	f0 2d       	mov	r31, r0
    2630:	01 e0       	ldi	r16, 0x01	; 1
    2632:	f1 2c       	mov	r15, r1
    2634:	2f c0       	rjmp	.+94     	; 0x2694 <Endpoint_Write_Control_Stream_LE+0xb2>
    2636:	8e b3       	in	r24, 0x1e	; 30
    2638:	88 23       	and	r24, r24
    263a:	09 f4       	brne	.+2      	; 0x263e <Endpoint_Write_Control_Stream_LE+0x5c>
    263c:	41 c0       	rjmp	.+130    	; 0x26c0 <Endpoint_Write_Control_Stream_LE+0xde>
    263e:	85 30       	cpi	r24, 0x05	; 5
    2640:	09 f4       	brne	.+2      	; 0x2644 <Endpoint_Write_Control_Stream_LE+0x62>
    2642:	40 c0       	rjmp	.+128    	; 0x26c4 <Endpoint_Write_Control_Stream_LE+0xe2>
    2644:	80 81       	ld	r24, Z
    2646:	83 fd       	sbrc	r24, 3
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <Endpoint_Write_Control_Stream_LE+0xe6>
    264a:	80 81       	ld	r24, Z
    264c:	82 fd       	sbrc	r24, 2
    264e:	31 c0       	rjmp	.+98     	; 0x26b2 <Endpoint_Write_Control_Stream_LE+0xd0>
    2650:	80 81       	ld	r24, Z
    2652:	80 ff       	sbrs	r24, 0
    2654:	1f c0       	rjmp	.+62     	; 0x2694 <Endpoint_Write_Control_Stream_LE+0xb2>
    2656:	eb 01       	movw	r28, r22
    2658:	18 81       	ld	r17, Y
    265a:	ea 01       	movw	r28, r20
    265c:	88 81       	ld	r24, Y
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	91 2b       	or	r25, r17
    2662:	21 15       	cp	r18, r1
    2664:	31 05       	cpc	r19, r1
    2666:	79 f0       	breq	.+30     	; 0x2686 <Endpoint_Write_Control_Stream_LE+0xa4>
    2668:	80 31       	cpi	r24, 0x10	; 16
    266a:	91 05       	cpc	r25, r1
    266c:	60 f4       	brcc	.+24     	; 0x2686 <Endpoint_Write_Control_Stream_LE+0xa4>
    266e:	1d 91       	ld	r17, X+
    2670:	e6 01       	movw	r28, r12
    2672:	18 83       	st	Y, r17
    2674:	21 50       	subi	r18, 0x01	; 1
    2676:	31 09       	sbc	r19, r1
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	21 15       	cp	r18, r1
    267c:	31 05       	cpc	r19, r1
    267e:	19 f0       	breq	.+6      	; 0x2686 <Endpoint_Write_Control_Stream_LE+0xa4>
    2680:	80 31       	cpi	r24, 0x10	; 16
    2682:	91 05       	cpc	r25, r1
    2684:	a1 f7       	brne	.-24     	; 0x266e <Endpoint_Write_Control_Stream_LE+0x8c>
    2686:	10 2f       	mov	r17, r16
    2688:	40 97       	sbiw	r24, 0x10	; 16
    268a:	09 f0       	breq	.+2      	; 0x268e <Endpoint_Write_Control_Stream_LE+0xac>
    268c:	1f 2d       	mov	r17, r15
    268e:	80 81       	ld	r24, Z
    2690:	8e 77       	andi	r24, 0x7E	; 126
    2692:	80 83       	st	Z, r24
    2694:	21 15       	cp	r18, r1
    2696:	31 05       	cpc	r19, r1
    2698:	71 f6       	brne	.-100    	; 0x2636 <Endpoint_Write_Control_Stream_LE+0x54>
    269a:	11 11       	cpse	r17, r1
    269c:	cc cf       	rjmp	.-104    	; 0x2636 <Endpoint_Write_Control_Stream_LE+0x54>
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <Endpoint_Write_Control_Stream_LE+0xd0>
    26a0:	8e b3       	in	r24, 0x1e	; 30
    26a2:	88 23       	and	r24, r24
    26a4:	99 f0       	breq	.+38     	; 0x26cc <Endpoint_Write_Control_Stream_LE+0xea>
    26a6:	85 30       	cpi	r24, 0x05	; 5
    26a8:	99 f0       	breq	.+38     	; 0x26d0 <Endpoint_Write_Control_Stream_LE+0xee>
    26aa:	80 81       	ld	r24, Z
    26ac:	83 ff       	sbrs	r24, 3
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <Endpoint_Write_Control_Stream_LE+0xd4>
    26b0:	11 c0       	rjmp	.+34     	; 0x26d4 <Endpoint_Write_Control_Stream_LE+0xf2>
    26b2:	e8 ee       	ldi	r30, 0xE8	; 232
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	82 ff       	sbrs	r24, 2
    26ba:	f2 cf       	rjmp	.-28     	; 0x26a0 <Endpoint_Write_Control_Stream_LE+0xbe>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	0b c0       	rjmp	.+22     	; 0x26d6 <Endpoint_Write_Control_Stream_LE+0xf4>
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <Endpoint_Write_Control_Stream_LE+0xf4>
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <Endpoint_Write_Control_Stream_LE+0xf4>
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <Endpoint_Write_Control_Stream_LE+0xf4>
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <Endpoint_Write_Control_Stream_LE+0xf4>
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <Endpoint_Write_Control_Stream_LE+0xf4>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	08 95       	ret

000026e6 <Endpoint_Write_Control_PStream_LE>:
    26e6:	cf 92       	push	r12
    26e8:	df 92       	push	r13
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	20 91 91 01 	lds	r18, 0x0191
    26f8:	30 91 92 01 	lds	r19, 0x0192
    26fc:	26 17       	cp	r18, r22
    26fe:	37 07       	cpc	r19, r23
    2700:	58 f0       	brcs	.+22     	; 0x2718 <Endpoint_Write_Control_PStream_LE+0x32>
    2702:	61 15       	cp	r22, r1
    2704:	71 05       	cpc	r23, r1
    2706:	39 f4       	brne	.+14     	; 0x2716 <Endpoint_Write_Control_PStream_LE+0x30>
    2708:	e8 ee       	ldi	r30, 0xE8	; 232
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	20 81       	ld	r18, Z
    270e:	2e 77       	andi	r18, 0x7E	; 126
    2710:	20 83       	st	Z, r18
    2712:	9b 01       	movw	r18, r22
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <Endpoint_Write_Control_PStream_LE+0x32>
    2716:	9b 01       	movw	r18, r22
    2718:	e8 2f       	mov	r30, r24
    271a:	f9 2f       	mov	r31, r25
    271c:	10 e0       	ldi	r17, 0x00	; 0
    271e:	a8 ee       	ldi	r26, 0xE8	; 232
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	63 ef       	ldi	r22, 0xF3	; 243
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	42 ef       	ldi	r20, 0xF2	; 242
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	0f 2e       	mov	r0, r31
    272c:	f1 ef       	ldi	r31, 0xF1	; 241
    272e:	cf 2e       	mov	r12, r31
    2730:	d1 2c       	mov	r13, r1
    2732:	f0 2d       	mov	r31, r0
    2734:	01 e0       	ldi	r16, 0x01	; 1
    2736:	f1 2c       	mov	r15, r1
    2738:	30 c0       	rjmp	.+96     	; 0x279a <Endpoint_Write_Control_PStream_LE+0xb4>
    273a:	8e b3       	in	r24, 0x1e	; 30
    273c:	88 23       	and	r24, r24
    273e:	09 f4       	brne	.+2      	; 0x2742 <Endpoint_Write_Control_PStream_LE+0x5c>
    2740:	42 c0       	rjmp	.+132    	; 0x27c6 <Endpoint_Write_Control_PStream_LE+0xe0>
    2742:	85 30       	cpi	r24, 0x05	; 5
    2744:	09 f4       	brne	.+2      	; 0x2748 <Endpoint_Write_Control_PStream_LE+0x62>
    2746:	41 c0       	rjmp	.+130    	; 0x27ca <Endpoint_Write_Control_PStream_LE+0xe4>
    2748:	8c 91       	ld	r24, X
    274a:	83 fd       	sbrc	r24, 3
    274c:	40 c0       	rjmp	.+128    	; 0x27ce <Endpoint_Write_Control_PStream_LE+0xe8>
    274e:	8c 91       	ld	r24, X
    2750:	82 fd       	sbrc	r24, 2
    2752:	32 c0       	rjmp	.+100    	; 0x27b8 <Endpoint_Write_Control_PStream_LE+0xd2>
    2754:	8c 91       	ld	r24, X
    2756:	80 ff       	sbrs	r24, 0
    2758:	20 c0       	rjmp	.+64     	; 0x279a <Endpoint_Write_Control_PStream_LE+0xb4>
    275a:	eb 01       	movw	r28, r22
    275c:	18 81       	ld	r17, Y
    275e:	ea 01       	movw	r28, r20
    2760:	88 81       	ld	r24, Y
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	91 2b       	or	r25, r17
    2766:	21 15       	cp	r18, r1
    2768:	31 05       	cpc	r19, r1
    276a:	81 f0       	breq	.+32     	; 0x278c <Endpoint_Write_Control_PStream_LE+0xa6>
    276c:	80 31       	cpi	r24, 0x10	; 16
    276e:	91 05       	cpc	r25, r1
    2770:	68 f4       	brcc	.+26     	; 0x278c <Endpoint_Write_Control_PStream_LE+0xa6>
    2772:	14 91       	lpm	r17, Z
    2774:	e6 01       	movw	r28, r12
    2776:	18 83       	st	Y, r17
    2778:	31 96       	adiw	r30, 0x01	; 1
    277a:	21 50       	subi	r18, 0x01	; 1
    277c:	31 09       	sbc	r19, r1
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	21 15       	cp	r18, r1
    2782:	31 05       	cpc	r19, r1
    2784:	19 f0       	breq	.+6      	; 0x278c <Endpoint_Write_Control_PStream_LE+0xa6>
    2786:	80 31       	cpi	r24, 0x10	; 16
    2788:	91 05       	cpc	r25, r1
    278a:	99 f7       	brne	.-26     	; 0x2772 <Endpoint_Write_Control_PStream_LE+0x8c>
    278c:	10 2f       	mov	r17, r16
    278e:	40 97       	sbiw	r24, 0x10	; 16
    2790:	09 f0       	breq	.+2      	; 0x2794 <Endpoint_Write_Control_PStream_LE+0xae>
    2792:	1f 2d       	mov	r17, r15
    2794:	8c 91       	ld	r24, X
    2796:	8e 77       	andi	r24, 0x7E	; 126
    2798:	8c 93       	st	X, r24
    279a:	21 15       	cp	r18, r1
    279c:	31 05       	cpc	r19, r1
    279e:	69 f6       	brne	.-102    	; 0x273a <Endpoint_Write_Control_PStream_LE+0x54>
    27a0:	11 11       	cpse	r17, r1
    27a2:	cb cf       	rjmp	.-106    	; 0x273a <Endpoint_Write_Control_PStream_LE+0x54>
    27a4:	09 c0       	rjmp	.+18     	; 0x27b8 <Endpoint_Write_Control_PStream_LE+0xd2>
    27a6:	8e b3       	in	r24, 0x1e	; 30
    27a8:	88 23       	and	r24, r24
    27aa:	99 f0       	breq	.+38     	; 0x27d2 <Endpoint_Write_Control_PStream_LE+0xec>
    27ac:	85 30       	cpi	r24, 0x05	; 5
    27ae:	99 f0       	breq	.+38     	; 0x27d6 <Endpoint_Write_Control_PStream_LE+0xf0>
    27b0:	80 81       	ld	r24, Z
    27b2:	83 ff       	sbrs	r24, 3
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <Endpoint_Write_Control_PStream_LE+0xd6>
    27b6:	11 c0       	rjmp	.+34     	; 0x27da <Endpoint_Write_Control_PStream_LE+0xf4>
    27b8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	82 ff       	sbrs	r24, 2
    27c0:	f2 cf       	rjmp	.-28     	; 0x27a6 <Endpoint_Write_Control_PStream_LE+0xc0>
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	0b c0       	rjmp	.+22     	; 0x27dc <Endpoint_Write_Control_PStream_LE+0xf6>
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	09 c0       	rjmp	.+18     	; 0x27dc <Endpoint_Write_Control_PStream_LE+0xf6>
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	07 c0       	rjmp	.+14     	; 0x27dc <Endpoint_Write_Control_PStream_LE+0xf6>
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <Endpoint_Write_Control_PStream_LE+0xf6>
    27d2:	82 e0       	ldi	r24, 0x02	; 2
    27d4:	03 c0       	rjmp	.+6      	; 0x27dc <Endpoint_Write_Control_PStream_LE+0xf6>
    27d6:	83 e0       	ldi	r24, 0x03	; 3
    27d8:	01 c0       	rjmp	.+2      	; 0x27dc <Endpoint_Write_Control_PStream_LE+0xf6>
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	ff 90       	pop	r15
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	08 95       	ret

000027ec <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    27ec:	4f 92       	push	r4
    27ee:	5f 92       	push	r5
    27f0:	6f 92       	push	r6
    27f2:	7f 92       	push	r7
    27f4:	8f 92       	push	r8
    27f6:	9f 92       	push	r9
    27f8:	af 92       	push	r10
    27fa:	bf 92       	push	r11
    27fc:	cf 92       	push	r12
    27fe:	df 92       	push	r13
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    280c:	00 91 91 01 	lds	r16, 0x0191
    2810:	10 91 92 01 	lds	r17, 0x0192
    2814:	06 17       	cp	r16, r22
    2816:	17 07       	cpc	r17, r23
    2818:	58 f0       	brcs	.+22     	; 0x2830 <Endpoint_Write_Control_EStream_LE+0x44>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    281a:	61 15       	cp	r22, r1
    281c:	71 05       	cpc	r23, r1
    281e:	39 f4       	brne	.+14     	; 0x282e <Endpoint_Write_Control_EStream_LE+0x42>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2820:	e8 ee       	ldi	r30, 0xE8	; 232
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	20 81       	ld	r18, Z
    2826:	2e 77       	andi	r18, 0x7E	; 126
    2828:	20 83       	st	Z, r18
    282a:	8b 01       	movw	r16, r22
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <Endpoint_Write_Control_EStream_LE+0x44>
    282e:	8b 01       	movw	r16, r22
    2830:	e8 2e       	mov	r14, r24
    2832:	f9 2e       	mov	r15, r25
    2834:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2836:	c8 ee       	ldi	r28, 0xE8	; 232
    2838:	d0 e0       	ldi	r29, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    283a:	0f 2e       	mov	r0, r31
    283c:	f3 ef       	ldi	r31, 0xF3	; 243
    283e:	af 2e       	mov	r10, r31
    2840:	b1 2c       	mov	r11, r1
    2842:	f0 2d       	mov	r31, r0
    2844:	0f 2e       	mov	r0, r31
    2846:	f2 ef       	ldi	r31, 0xF2	; 242
    2848:	6f 2e       	mov	r6, r31
    284a:	71 2c       	mov	r7, r1
    284c:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    284e:	0f 2e       	mov	r0, r31
    2850:	f1 ef       	ldi	r31, 0xF1	; 241
    2852:	cf 2e       	mov	r12, r31
    2854:	d1 2c       	mov	r13, r1
    2856:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2858:	55 24       	eor	r5, r5
    285a:	53 94       	inc	r5
    285c:	41 2c       	mov	r4, r1
    285e:	39 c0       	rjmp	.+114    	; 0x28d2 <Endpoint_Write_Control_EStream_LE+0xe6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2860:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2862:	88 23       	and	r24, r24
    2864:	09 f4       	brne	.+2      	; 0x2868 <Endpoint_Write_Control_EStream_LE+0x7c>
    2866:	4b c0       	rjmp	.+150    	; 0x28fe <Endpoint_Write_Control_EStream_LE+0x112>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2868:	85 30       	cpi	r24, 0x05	; 5
    286a:	09 f4       	brne	.+2      	; 0x286e <Endpoint_Write_Control_EStream_LE+0x82>
    286c:	4a c0       	rjmp	.+148    	; 0x2902 <Endpoint_Write_Control_EStream_LE+0x116>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    286e:	88 81       	ld	r24, Y
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2870:	83 fd       	sbrc	r24, 3
    2872:	49 c0       	rjmp	.+146    	; 0x2906 <Endpoint_Write_Control_EStream_LE+0x11a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2874:	88 81       	ld	r24, Y
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2876:	82 fd       	sbrc	r24, 2
    2878:	3b c0       	rjmp	.+118    	; 0x28f0 <Endpoint_Write_Control_EStream_LE+0x104>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    287a:	88 81       	ld	r24, Y
		  break;

		if (Endpoint_IsINReady())
    287c:	80 ff       	sbrs	r24, 0
    287e:	29 c0       	rjmp	.+82     	; 0x28d2 <Endpoint_Write_Control_EStream_LE+0xe6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2880:	f5 01       	movw	r30, r10
    2882:	80 81       	ld	r24, Z
    2884:	f3 01       	movw	r30, r6
    2886:	80 80       	ld	r8, Z
    2888:	91 2c       	mov	r9, r1
    288a:	98 2a       	or	r9, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    288c:	01 15       	cp	r16, r1
    288e:	11 05       	cpc	r17, r1
    2890:	b9 f0       	breq	.+46     	; 0x28c0 <Endpoint_Write_Control_EStream_LE+0xd4>
    2892:	f0 e1       	ldi	r31, 0x10	; 16
    2894:	8f 16       	cp	r8, r31
    2896:	91 04       	cpc	r9, r1
    2898:	98 f4       	brcc	.+38     	; 0x28c0 <Endpoint_Write_Control_EStream_LE+0xd4>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    289a:	c7 01       	movw	r24, r14
    289c:	08 d3       	rcall	.+1552   	; 0x2eae <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    289e:	f6 01       	movw	r30, r12
    28a0:	80 83       	st	Z, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    28a2:	ff ef       	ldi	r31, 0xFF	; 255
    28a4:	ef 1a       	sub	r14, r31
    28a6:	ff 0a       	sbc	r15, r31
				Length--;
    28a8:	01 50       	subi	r16, 0x01	; 1
    28aa:	11 09       	sbc	r17, r1
				BytesInEndpoint++;
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	88 1a       	sub	r8, r24
    28b0:	98 0a       	sbc	r9, r24

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    28b2:	01 15       	cp	r16, r1
    28b4:	11 05       	cpc	r17, r1
    28b6:	21 f0       	breq	.+8      	; 0x28c0 <Endpoint_Write_Control_EStream_LE+0xd4>
    28b8:	e0 e1       	ldi	r30, 0x10	; 16
    28ba:	8e 16       	cp	r8, r30
    28bc:	91 04       	cpc	r9, r1
    28be:	69 f7       	brne	.-38     	; 0x289a <Endpoint_Write_Control_EStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    28c0:	95 2d       	mov	r25, r5
    28c2:	f0 e1       	ldi	r31, 0x10	; 16
    28c4:	8f 16       	cp	r8, r31
    28c6:	91 04       	cpc	r9, r1
    28c8:	09 f0       	breq	.+2      	; 0x28cc <Endpoint_Write_Control_EStream_LE+0xe0>
    28ca:	94 2d       	mov	r25, r4
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28cc:	88 81       	ld	r24, Y
    28ce:	8e 77       	andi	r24, 0x7E	; 126
    28d0:	88 83       	st	Y, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    28d2:	01 15       	cp	r16, r1
    28d4:	11 05       	cpc	r17, r1
    28d6:	21 f6       	brne	.-120    	; 0x2860 <Endpoint_Write_Control_EStream_LE+0x74>
    28d8:	91 11       	cpse	r25, r1
    28da:	c2 cf       	rjmp	.-124    	; 0x2860 <Endpoint_Write_Control_EStream_LE+0x74>
    28dc:	09 c0       	rjmp	.+18     	; 0x28f0 <Endpoint_Write_Control_EStream_LE+0x104>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    28de:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    28e0:	88 23       	and	r24, r24
    28e2:	99 f0       	breq	.+38     	; 0x290a <Endpoint_Write_Control_EStream_LE+0x11e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    28e4:	85 30       	cpi	r24, 0x05	; 5
    28e6:	99 f0       	breq	.+38     	; 0x290e <Endpoint_Write_Control_EStream_LE+0x122>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28e8:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    28ea:	83 ff       	sbrs	r24, 3
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <Endpoint_Write_Control_EStream_LE+0x108>
    28ee:	11 c0       	rjmp	.+34     	; 0x2912 <Endpoint_Write_Control_EStream_LE+0x126>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    28f0:	e8 ee       	ldi	r30, 0xE8	; 232
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    28f6:	82 ff       	sbrs	r24, 2
    28f8:	f2 cf       	rjmp	.-28     	; 0x28de <Endpoint_Write_Control_EStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	0b c0       	rjmp	.+22     	; 0x2914 <Endpoint_Write_Control_EStream_LE+0x128>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	09 c0       	rjmp	.+18     	; 0x2914 <Endpoint_Write_Control_EStream_LE+0x128>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2902:	83 e0       	ldi	r24, 0x03	; 3
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <Endpoint_Write_Control_EStream_LE+0x128>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <Endpoint_Write_Control_EStream_LE+0x128>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <Endpoint_Write_Control_EStream_LE+0x128>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	01 c0       	rjmp	.+2      	; 0x2914 <Endpoint_Write_Control_EStream_LE+0x128>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2912:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	ef 90       	pop	r14
    2920:	df 90       	pop	r13
    2922:	cf 90       	pop	r12
    2924:	bf 90       	pop	r11
    2926:	af 90       	pop	r10
    2928:	9f 90       	pop	r9
    292a:	8f 90       	pop	r8
    292c:	7f 90       	pop	r7
    292e:	6f 90       	pop	r6
    2930:	5f 90       	pop	r5
    2932:	4f 90       	pop	r4
    2934:	08 95       	ret

00002936 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    2936:	8f 70       	andi	r24, 0x0F	; 15
    2938:	80 93 e9 00 	sts	0x00E9, r24
    293c:	eb ee       	ldi	r30, 0xEB	; 235
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	81 60       	ori	r24, 0x01	; 1
    2944:	80 83       	st	Z, r24
    2946:	ed ee       	ldi	r30, 0xED	; 237
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	10 82       	st	Z, r1
    294c:	60 93 ec 00 	sts	0x00EC, r22
    2950:	40 83       	st	Z, r20
    2952:	80 91 ee 00 	lds	r24, 0x00EE
    2956:	88 1f       	adc	r24, r24
    2958:	88 27       	eor	r24, r24
    295a:	88 1f       	adc	r24, r24
    295c:	08 95       	ret

0000295e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    295e:	80 91 8b 01 	lds	r24, 0x018B
    2962:	88 23       	and	r24, r24
    2964:	3c f0       	brlt	.+14     	; 0x2974 <Endpoint_ClearStatusStage+0x16>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2966:	e8 ee       	ldi	r30, 0xE8	; 232
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	12 c0       	rjmp	.+36     	; 0x2990 <Endpoint_ClearStatusStage+0x32>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    296c:	8e b3       	in	r24, 0x1e	; 30
    296e:	81 11       	cpse	r24, r1
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <Endpoint_ClearStatusStage+0x1a>
    2972:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2974:	e8 ee       	ldi	r30, 0xE8	; 232
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    297a:	82 ff       	sbrs	r24, 2
    297c:	f7 cf       	rjmp	.-18     	; 0x296c <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    297e:	e8 ee       	ldi	r30, 0xE8	; 232
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	8b 77       	andi	r24, 0x7B	; 123
    2986:	80 83       	st	Z, r24
    2988:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    298a:	8e b3       	in	r24, 0x1e	; 30
    298c:	88 23       	and	r24, r24
    298e:	41 f0       	breq	.+16     	; 0x29a0 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2990:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2992:	80 ff       	sbrs	r24, 0
    2994:	fa cf       	rjmp	.-12     	; 0x298a <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2996:	e8 ee       	ldi	r30, 0xE8	; 232
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	8e 77       	andi	r24, 0x7E	; 126
    299e:	80 83       	st	Z, r24
    29a0:	08 95       	ret

000029a2 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    29aa:	20 91 e4 00 	lds	r18, 0x00E4
    29ae:	30 91 e5 00 	lds	r19, 0x00E5
    29b2:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    29b4:	ac ee       	ldi	r26, 0xEC	; 236
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    29b8:	e8 ee       	ldi	r30, 0xE8	; 232
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    29bc:	0b ee       	ldi	r16, 0xEB	; 235
    29be:	10 e0       	ldi	r17, 0x00	; 0
    29c0:	44 ee       	ldi	r20, 0xE4	; 228
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <Endpoint_WaitUntilReady+0x26>
    29c6:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    29c8:	9c 91       	ld	r25, X
    29ca:	89 2f       	mov	r24, r25
    29cc:	81 70       	andi	r24, 0x01	; 1
    29ce:	90 fd       	sbrc	r25, 0
    29d0:	1c c0       	rjmp	.+56     	; 0x2a0a <Endpoint_WaitUntilReady+0x68>
    29d2:	1f c0       	rjmp	.+62     	; 0x2a12 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    29d4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    29d6:	88 23       	and	r24, r24
    29d8:	81 f0       	breq	.+32     	; 0x29fa <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    29da:	85 30       	cpi	r24, 0x05	; 5
    29dc:	81 f0       	breq	.+32     	; 0x29fe <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    29de:	e8 01       	movw	r28, r16
    29e0:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    29e2:	85 fd       	sbrc	r24, 5
    29e4:	0e c0       	rjmp	.+28     	; 0x2a02 <Endpoint_WaitUntilReady+0x60>
    29e6:	ea 01       	movw	r28, r20
    29e8:	88 81       	ld	r24, Y
    29ea:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    29ec:	28 17       	cp	r18, r24
    29ee:	39 07       	cpc	r19, r25
    29f0:	59 f3       	breq	.-42     	; 0x29c8 <Endpoint_WaitUntilReady+0x26>
    29f2:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    29f4:	41 f7       	brne	.-48     	; 0x29c6 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    29f6:	84 e0       	ldi	r24, 0x04	; 4
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <Endpoint_WaitUntilReady+0x76>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <Endpoint_WaitUntilReady+0x76>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    29fe:	83 e0       	ldi	r24, 0x03	; 3
    2a00:	0b c0       	rjmp	.+22     	; 0x2a18 <Endpoint_WaitUntilReady+0x76>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	09 c0       	rjmp	.+18     	; 0x2a18 <Endpoint_WaitUntilReady+0x76>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <Endpoint_WaitUntilReady+0x76>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2a0a:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2a0c:	80 ff       	sbrs	r24, 0
    2a0e:	e2 cf       	rjmp	.-60     	; 0x29d4 <Endpoint_WaitUntilReady+0x32>
    2a10:	fa cf       	rjmp	.-12     	; 0x2a06 <Endpoint_WaitUntilReady+0x64>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2a12:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2a14:	92 ff       	sbrs	r25, 2
    2a16:	de cf       	rjmp	.-68     	; 0x29d4 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2a2a:	47 d0       	rcall	.+142    	; 0x2aba <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2a2c:	4e d0       	rcall	.+156    	; 0x2aca <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2a2e:	c8 ed       	ldi	r28, 0xD8	; 216
    2a30:	d0 e0       	ldi	r29, 0x00	; 0
    2a32:	88 81       	ld	r24, Y
    2a34:	8f 77       	andi	r24, 0x7F	; 127
    2a36:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2a38:	88 81       	ld	r24, Y
    2a3a:	80 68       	ori	r24, 0x80	; 128
    2a3c:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2a3e:	88 81       	ld	r24, Y
    2a40:	8f 7d       	andi	r24, 0xDF	; 223
    2a42:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2a44:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2a46:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    2a48:	10 92 89 01 	sts	0x0189, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2a4c:	00 ee       	ldi	r16, 0xE0	; 224
    2a4e:	10 e0       	ldi	r17, 0x00	; 0
    2a50:	f8 01       	movw	r30, r16
    2a52:	80 81       	ld	r24, Z
    2a54:	8b 7f       	andi	r24, 0xFB	; 251
    2a56:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2a58:	88 81       	ld	r24, Y
    2a5a:	81 60       	ori	r24, 0x01	; 1
    2a5c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2a5e:	42 e1       	ldi	r20, 0x12	; 18
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	68 df       	rcall	.-304    	; 0x2936 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2a66:	e1 ee       	ldi	r30, 0xE1	; 225
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	8e 7f       	andi	r24, 0xFE	; 254
    2a6e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2a70:	e2 ee       	ldi	r30, 0xE2	; 226
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	81 60       	ori	r24, 0x01	; 1
    2a78:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 60       	ori	r24, 0x08	; 8
    2a7e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2a80:	f8 01       	movw	r30, r16
    2a82:	80 81       	ld	r24, Z
    2a84:	8e 7f       	andi	r24, 0xFE	; 254
    2a86:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2a88:	88 81       	ld	r24, Y
    2a8a:	80 61       	ori	r24, 0x10	; 16
    2a8c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	08 95       	ret

00002a98 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2a98:	e8 ed       	ldi	r30, 0xD8	; 216
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 7e       	andi	r24, 0xEF	; 239
    2aa0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2aa2:	e7 ed       	ldi	r30, 0xD7	; 215
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	81 60       	ori	r24, 0x01	; 1
    2aaa:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2aac:	84 e0       	ldi	r24, 0x04	; 4
    2aae:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	80 93 8a 01 	sts	0x018A, r24

	USB_ResetInterface();
    2ab6:	b5 cf       	rjmp	.-150    	; 0x2a22 <USB_ResetInterface>
    2ab8:	08 95       	ret

00002aba <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2aba:	e8 ed       	ldi	r30, 0xD8	; 216
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	8e 7f       	andi	r24, 0xFE	; 254
    2ac2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2ac4:	10 92 e2 00 	sts	0x00E2, r1
    2ac8:	08 95       	ret

00002aca <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2aca:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2ace:	10 92 e1 00 	sts	0x00E1, r1
    2ad2:	08 95       	ret

00002ad4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2ad4:	1f 92       	push	r1
    2ad6:	0f 92       	push	r0
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	0f 92       	push	r0
    2adc:	11 24       	eor	r1, r1
    2ade:	2f 93       	push	r18
    2ae0:	3f 93       	push	r19
    2ae2:	4f 93       	push	r20
    2ae4:	5f 93       	push	r21
    2ae6:	6f 93       	push	r22
    2ae8:	7f 93       	push	r23
    2aea:	8f 93       	push	r24
    2aec:	9f 93       	push	r25
    2aee:	af 93       	push	r26
    2af0:	bf 93       	push	r27
    2af2:	ef 93       	push	r30
    2af4:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2af6:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2afa:	80 ff       	sbrs	r24, 0
    2afc:	1d c0       	rjmp	.+58     	; 0x2b38 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2afe:	80 91 d8 00 	lds	r24, 0x00D8
    2b02:	80 ff       	sbrs	r24, 0
    2b04:	19 c0       	rjmp	.+50     	; 0x2b38 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2b06:	ea ed       	ldi	r30, 0xDA	; 218
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8e 7f       	andi	r24, 0xFE	; 254
    2b0e:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2b10:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2b14:	80 ff       	sbrs	r24, 0
    2b16:	0c c0       	rjmp	.+24     	; 0x2b30 <__vector_10+0x5c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2b18:	80 e1       	ldi	r24, 0x10	; 16
    2b1a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2b1c:	82 e1       	ldi	r24, 0x12	; 18
    2b1e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2b20:	09 b4       	in	r0, 0x29	; 41
    2b22:	00 fe       	sbrs	r0, 0
    2b24:	fd cf       	rjmp	.-6      	; 0x2b20 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    2b2a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <EVENT_USB_Device_Connect>
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2b30:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2b32:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    2b34:	0e 94 58 01 	call	0x2b0	; 0x2b0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2b38:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2b3c:	80 ff       	sbrs	r24, 0
    2b3e:	15 c0       	rjmp	.+42     	; 0x2b6a <__vector_10+0x96>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2b40:	80 91 e2 00 	lds	r24, 0x00E2
    2b44:	80 ff       	sbrs	r24, 0
    2b46:	11 c0       	rjmp	.+34     	; 0x2b6a <__vector_10+0x96>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2b48:	e2 ee       	ldi	r30, 0xE2	; 226
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8e 7f       	andi	r24, 0xFE	; 254
    2b50:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2b52:	80 81       	ld	r24, Z
    2b54:	80 61       	ori	r24, 0x10	; 16
    2b56:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2b58:	e8 ed       	ldi	r30, 0xD8	; 216
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 62       	ori	r24, 0x20	; 32
    2b60:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2b62:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2b64:	85 e0       	ldi	r24, 0x05	; 5
    2b66:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    2b68:	88 d1       	rcall	.+784    	; 0x2e7a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2b6a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2b6e:	84 ff       	sbrs	r24, 4
    2b70:	2d c0       	rjmp	.+90     	; 0x2bcc <__vector_10+0xf8>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2b72:	80 91 e2 00 	lds	r24, 0x00E2
    2b76:	84 ff       	sbrs	r24, 4
    2b78:	29 c0       	rjmp	.+82     	; 0x2bcc <__vector_10+0xf8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2b7a:	80 e1       	ldi	r24, 0x10	; 16
    2b7c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2b7e:	82 e1       	ldi	r24, 0x12	; 18
    2b80:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2b82:	09 b4       	in	r0, 0x29	; 41
    2b84:	00 fe       	sbrs	r0, 0
    2b86:	fd cf       	rjmp	.-6      	; 0x2b82 <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2b88:	e8 ed       	ldi	r30, 0xD8	; 216
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8f 7d       	andi	r24, 0xDF	; 223
    2b90:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2b92:	e1 ee       	ldi	r30, 0xE1	; 225
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8f 7e       	andi	r24, 0xEF	; 239
    2b9a:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2b9c:	e2 ee       	ldi	r30, 0xE2	; 226
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8f 7e       	andi	r24, 0xEF	; 239
    2ba4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2ba6:	80 81       	ld	r24, Z
    2ba8:	81 60       	ori	r24, 0x01	; 1
    2baa:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2bac:	80 91 89 01 	lds	r24, 0x0189
    2bb0:	88 23       	and	r24, r24
    2bb2:	19 f0       	breq	.+6      	; 0x2bba <__vector_10+0xe6>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	8e bb       	out	0x1e, r24	; 30
    2bb8:	08 c0       	rjmp	.+16     	; 0x2bca <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2bba:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2bbe:	88 23       	and	r24, r24
    2bc0:	14 f0       	brlt	.+4      	; 0x2bc6 <__vector_10+0xf2>
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <__vector_10+0xf4>
    2bc6:	83 e0       	ldi	r24, 0x03	; 3
    2bc8:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2bca:	57 d1       	rcall	.+686    	; 0x2e7a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2bcc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2bd0:	83 ff       	sbrs	r24, 3
    2bd2:	1d c0       	rjmp	.+58     	; 0x2c0e <__vector_10+0x13a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2bd4:	80 91 e2 00 	lds	r24, 0x00E2
    2bd8:	83 ff       	sbrs	r24, 3
    2bda:	19 c0       	rjmp	.+50     	; 0x2c0e <__vector_10+0x13a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2bdc:	e1 ee       	ldi	r30, 0xE1	; 225
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	87 7f       	andi	r24, 0xF7	; 247
    2be4:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    2bea:	10 92 89 01 	sts	0x0189, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2bee:	80 81       	ld	r24, Z
    2bf0:	8e 7f       	andi	r24, 0xFE	; 254
    2bf2:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2bf4:	e2 ee       	ldi	r30, 0xE2	; 226
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	8e 7f       	andi	r24, 0xFE	; 254
    2bfc:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2bfe:	80 81       	ld	r24, Z
    2c00:	80 61       	ori	r24, 0x10	; 16
    2c02:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2c04:	42 e1       	ldi	r20, 0x12	; 18
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	95 de       	rcall	.-726    	; 0x2936 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2c0c:	36 d1       	rcall	.+620    	; 0x2e7a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2c0e:	ff 91       	pop	r31
    2c10:	ef 91       	pop	r30
    2c12:	bf 91       	pop	r27
    2c14:	af 91       	pop	r26
    2c16:	9f 91       	pop	r25
    2c18:	8f 91       	pop	r24
    2c1a:	7f 91       	pop	r23
    2c1c:	6f 91       	pop	r22
    2c1e:	5f 91       	pop	r21
    2c20:	4f 91       	pop	r20
    2c22:	3f 91       	pop	r19
    2c24:	2f 91       	pop	r18
    2c26:	0f 90       	pop	r0
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	0f 90       	pop	r0
    2c2c:	1f 90       	pop	r1
    2c2e:	18 95       	reti

00002c30 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <USB_Device_ProcessControlRequest+0x8>
    2c38:	1f 92       	push	r1
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	eb e8       	ldi	r30, 0x8B	; 139
    2c40:	f1 e0       	ldi	r31, 0x01	; 1
    2c42:	23 e9       	ldi	r18, 0x93	; 147
    2c44:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2c46:	a1 ef       	ldi	r26, 0xF1	; 241
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2c4c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2c4e:	e2 17       	cp	r30, r18
    2c50:	f3 07       	cpc	r31, r19
    2c52:	d9 f7       	brne	.-10     	; 0x2c4a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2c54:	12 d1       	rcall	.+548    	; 0x2e7a <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2c56:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2c5a:	83 ff       	sbrs	r24, 3
    2c5c:	f2 c0       	rjmp	.+484    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2c5e:	eb e8       	ldi	r30, 0x8B	; 139
    2c60:	f1 e0       	ldi	r31, 0x01	; 1
    2c62:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    2c64:	81 81       	ldd	r24, Z+1	; 0x01
    2c66:	85 30       	cpi	r24, 0x05	; 5
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <USB_Device_ProcessControlRequest+0x3c>
    2c6a:	68 c0       	rjmp	.+208    	; 0x2d3c <USB_Device_ProcessControlRequest+0x10c>
    2c6c:	30 f4       	brcc	.+12     	; 0x2c7a <USB_Device_ProcessControlRequest+0x4a>
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	79 f1       	breq	.+94     	; 0x2cd0 <USB_Device_ProcessControlRequest+0xa0>
    2c72:	68 f0       	brcs	.+26     	; 0x2c8e <USB_Device_ProcessControlRequest+0x5e>
    2c74:	83 30       	cpi	r24, 0x03	; 3
    2c76:	61 f1       	breq	.+88     	; 0x2cd0 <USB_Device_ProcessControlRequest+0xa0>
    2c78:	e4 c0       	rjmp	.+456    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <USB_Device_ProcessControlRequest+0x50>
    2c7e:	b0 c0       	rjmp	.+352    	; 0x2de0 <USB_Device_ProcessControlRequest+0x1b0>
    2c80:	89 30       	cpi	r24, 0x09	; 9
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <USB_Device_ProcessControlRequest+0x56>
    2c84:	bd c0       	rjmp	.+378    	; 0x2e00 <USB_Device_ProcessControlRequest+0x1d0>
    2c86:	86 30       	cpi	r24, 0x06	; 6
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <USB_Device_ProcessControlRequest+0x5c>
    2c8a:	db c0       	rjmp	.+438    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
    2c8c:	79 c0       	rjmp	.+242    	; 0x2d80 <USB_Device_ProcessControlRequest+0x150>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2c8e:	90 38       	cpi	r25, 0x80	; 128
    2c90:	81 f0       	breq	.+32     	; 0x2cb2 <USB_Device_ProcessControlRequest+0x82>
    2c92:	92 38       	cpi	r25, 0x82	; 130
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <USB_Device_ProcessControlRequest+0x68>
    2c96:	d5 c0       	rjmp	.+426    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2c98:	80 91 8f 01 	lds	r24, 0x018F
    2c9c:	8f 70       	andi	r24, 0x0F	; 15
    2c9e:	e9 ee       	ldi	r30, 0xE9	; 233
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2ca4:	90 91 eb 00 	lds	r25, 0x00EB
    2ca8:	95 fb       	bst	r25, 5
    2caa:	99 27       	eor	r25, r25
    2cac:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2cae:	10 82       	st	Z, r1
    2cb0:	01 c0       	rjmp	.+2      	; 0x2cb4 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2cb4:	e8 ee       	ldi	r30, 0xE8	; 232
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	87 7f       	andi	r24, 0xF7	; 247
    2cbc:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2cbe:	a1 ef       	ldi	r26, 0xF1	; 241
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
    2cc4:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2cc6:	80 81       	ld	r24, Z
    2cc8:	8e 77       	andi	r24, 0x7E	; 126
    2cca:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2ccc:	48 de       	rcall	.-880    	; 0x295e <Endpoint_ClearStatusStage>
    2cce:	b9 c0       	rjmp	.+370    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2cd0:	92 30       	cpi	r25, 0x02	; 2
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <USB_Device_ProcessControlRequest+0xa6>
    2cd4:	c5 c0       	rjmp	.+394    	; 0x2e60 <USB_Device_ProcessControlRequest+0x230>
    2cd6:	b5 c0       	rjmp	.+362    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2cd8:	80 91 8f 01 	lds	r24, 0x018F
    2cdc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <USB_Device_ProcessControlRequest+0xb2>
    2ce0:	b0 c0       	rjmp	.+352    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ce2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2ce6:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2cea:	90 ff       	sbrs	r25, 0
    2cec:	1e c0       	rjmp	.+60     	; 0x2d2a <USB_Device_ProcessControlRequest+0xfa>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2cee:	90 91 8c 01 	lds	r25, 0x018C
    2cf2:	93 30       	cpi	r25, 0x03	; 3
    2cf4:	31 f4       	brne	.+12     	; 0x2d02 <USB_Device_ProcessControlRequest+0xd2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2cf6:	eb ee       	ldi	r30, 0xEB	; 235
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 62       	ori	r24, 0x20	; 32
    2cfe:	80 83       	st	Z, r24
    2d00:	14 c0       	rjmp	.+40     	; 0x2d2a <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2d02:	eb ee       	ldi	r30, 0xEB	; 235
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	90 81       	ld	r25, Z
    2d08:	90 61       	ori	r25, 0x10	; 16
    2d0a:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2d0c:	21 e0       	ldi	r18, 0x01	; 1
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	a9 01       	movw	r20, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <USB_Device_ProcessControlRequest+0xe8>
    2d14:	44 0f       	add	r20, r20
    2d16:	55 1f       	adc	r21, r21
    2d18:	8a 95       	dec	r24
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <USB_Device_ProcessControlRequest+0xe4>
    2d1c:	aa ee       	ldi	r26, 0xEA	; 234
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	4c 93       	st	X, r20
				UERST = 0;
    2d22:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2d24:	80 81       	ld	r24, Z
    2d26:	88 60       	ori	r24, 0x08	; 8
    2d28:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2d2a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2d2e:	e8 ee       	ldi	r30, 0xE8	; 232
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	87 7f       	andi	r24, 0xF7	; 247
    2d36:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2d38:	12 de       	rcall	.-988    	; 0x295e <Endpoint_ClearStatusStage>
    2d3a:	83 c0       	rjmp	.+262    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2d3c:	91 11       	cpse	r25, r1
    2d3e:	81 c0       	rjmp	.+258    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2d40:	10 91 8d 01 	lds	r17, 0x018D
    2d44:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2d46:	e3 ee       	ldi	r30, 0xE3	; 227
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 78       	andi	r24, 0x80	; 128
    2d4e:	81 2b       	or	r24, r17
    2d50:	80 83       	st	Z, r24
    2d52:	e8 ee       	ldi	r30, 0xE8	; 232
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	87 7f       	andi	r24, 0xF7	; 247
    2d5a:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2d5c:	00 de       	rcall	.-1024   	; 0x295e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2d5e:	e8 ee       	ldi	r30, 0xE8	; 232
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    2d64:	80 ff       	sbrs	r24, 0
    2d66:	fd cf       	rjmp	.-6      	; 0x2d62 <USB_Device_ProcessControlRequest+0x132>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2d68:	e3 ee       	ldi	r30, 0xE3	; 227
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	80 68       	ori	r24, 0x80	; 128
    2d70:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2d72:	11 11       	cpse	r17, r1
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <USB_Device_ProcessControlRequest+0x14a>
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <USB_Device_ProcessControlRequest+0x14c>
    2d7a:	83 e0       	ldi	r24, 0x03	; 3
    2d7c:	8e bb       	out	0x1e, r24	; 30
    2d7e:	61 c0       	rjmp	.+194    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2d80:	90 58       	subi	r25, 0x80	; 128
    2d82:	92 30       	cpi	r25, 0x02	; 2
    2d84:	08 f0       	brcs	.+2      	; 0x2d88 <USB_Device_ProcessControlRequest+0x158>
    2d86:	5d c0       	rjmp	.+186    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2d88:	eb e8       	ldi	r30, 0x8B	; 139
    2d8a:	f1 e0       	ldi	r31, 0x01	; 1
    2d8c:	9e 01       	movw	r18, r28
    2d8e:	2d 5f       	subi	r18, 0xFD	; 253
    2d90:	3f 4f       	sbci	r19, 0xFF	; 255
    2d92:	ae 01       	movw	r20, r28
    2d94:	4f 5f       	subi	r20, 0xFF	; 255
    2d96:	5f 4f       	sbci	r21, 0xFF	; 255
    2d98:	64 81       	ldd	r22, Z+4	; 0x04
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	0e 94 8d 01 	call	0x31a	; 0x31a <CALLBACK_USB_GetDescriptor>
    2da2:	bc 01       	movw	r22, r24
    2da4:	89 2b       	or	r24, r25
    2da6:	09 f4       	brne	.+2      	; 0x2daa <USB_Device_ProcessControlRequest+0x17a>
    2da8:	4c c0       	rjmp	.+152    	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2daa:	e8 ee       	ldi	r30, 0xE8	; 232
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	87 7f       	andi	r24, 0xF7	; 247
    2db2:	80 83       	st	Z, r24
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	81 11       	cpse	r24, r1
    2db8:	04 c0       	rjmp	.+8      	; 0x2dc2 <USB_Device_ProcessControlRequest+0x192>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	93 dc       	rcall	.-1754   	; 0x26e6 <Endpoint_Write_Control_PStream_LE>
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <USB_Device_ProcessControlRequest+0x1a4>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	21 f4       	brne	.+8      	; 0x2dce <USB_Device_ProcessControlRequest+0x19e>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	10 dd       	rcall	.-1504   	; 0x27ec <Endpoint_Write_Control_EStream_LE>
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <USB_Device_ProcessControlRequest+0x1a4>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	07 dc       	rcall	.-2034   	; 0x25e2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2dd4:	e8 ee       	ldi	r30, 0xE8	; 232
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	8b 77       	andi	r24, 0x7B	; 123
    2ddc:	80 83       	st	Z, r24
    2dde:	31 c0       	rjmp	.+98     	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2de0:	90 38       	cpi	r25, 0x80	; 128
    2de2:	79 f5       	brne	.+94     	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2de4:	e8 ee       	ldi	r30, 0xE8	; 232
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	87 7f       	andi	r24, 0xF7	; 247
    2dec:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2dee:	80 91 89 01 	lds	r24, 0x0189
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2df2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2df6:	80 81       	ld	r24, Z
    2df8:	8e 77       	andi	r24, 0x7E	; 126
    2dfa:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2dfc:	b0 dd       	rcall	.-1184   	; 0x295e <Endpoint_ClearStatusStage>
    2dfe:	21 c0       	rjmp	.+66     	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2e00:	91 11       	cpse	r25, r1
    2e02:	1f c0       	rjmp	.+62     	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2e04:	80 91 8d 01 	lds	r24, 0x018D
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	d8 f4       	brcc	.+54     	; 0x2e42 <USB_Device_ProcessControlRequest+0x212>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e0c:	e8 ee       	ldi	r30, 0xE8	; 232
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	87 7f       	andi	r24, 0xF7	; 247
    2e14:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2e16:	80 91 8d 01 	lds	r24, 0x018D
    2e1a:	80 93 89 01 	sts	0x0189, r24

	Endpoint_ClearStatusStage();
    2e1e:	9f dd       	rcall	.-1218   	; 0x295e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2e20:	80 91 89 01 	lds	r24, 0x0189
    2e24:	88 23       	and	r24, r24
    2e26:	19 f0       	breq	.+6      	; 0x2e2e <USB_Device_ProcessControlRequest+0x1fe>
	  USB_DeviceState = DEVICE_STATE_Configured;
    2e28:	84 e0       	ldi	r24, 0x04	; 4
    2e2a:	8e bb       	out	0x1e, r24	; 30
    2e2c:	08 c0       	rjmp	.+16     	; 0x2e3e <USB_Device_ProcessControlRequest+0x20e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2e2e:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2e32:	88 23       	and	r24, r24
    2e34:	14 f0       	brlt	.+4      	; 0x2e3a <USB_Device_ProcessControlRequest+0x20a>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	01 c0       	rjmp	.+2      	; 0x2e3c <USB_Device_ProcessControlRequest+0x20c>
    2e3a:	84 e0       	ldi	r24, 0x04	; 4
    2e3c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    2e3e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e42:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2e46:	83 ff       	sbrs	r24, 3
    2e48:	11 c0       	rjmp	.+34     	; 0x2e6c <USB_Device_ProcessControlRequest+0x23c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e4a:	e8 ee       	ldi	r30, 0xE8	; 232
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	87 7f       	andi	r24, 0xF7	; 247
    2e52:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2e54:	eb ee       	ldi	r30, 0xEB	; 235
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	80 62       	ori	r24, 0x20	; 32
    2e5c:	80 83       	st	Z, r24
    2e5e:	06 c0       	rjmp	.+12     	; 0x2e6c <USB_Device_ProcessControlRequest+0x23c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2e60:	80 91 8d 01 	lds	r24, 0x018D
    2e64:	88 23       	and	r24, r24
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <USB_Device_ProcessControlRequest+0x23a>
    2e68:	37 cf       	rjmp	.-402    	; 0x2cd8 <USB_Device_ProcessControlRequest+0xa8>
    2e6a:	5f cf       	rjmp	.-322    	; 0x2d2a <USB_Device_ProcessControlRequest+0xfa>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	08 95       	ret

00002e7a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2e7a:	08 95       	ret

00002e7c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2e7c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2e7e:	8e b3       	in	r24, 0x1e	; 30
    2e80:	88 23       	and	r24, r24
    2e82:	99 f0       	breq	.+38     	; 0x2eaa <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2e84:	c0 91 e9 00 	lds	r28, 0x00E9
    2e88:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2e8a:	80 91 ec 00 	lds	r24, 0x00EC
    2e8e:	98 2f       	mov	r25, r24
    2e90:	91 70       	andi	r25, 0x01	; 1
    2e92:	80 fd       	sbrc	r24, 0
    2e94:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2e96:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e98:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e9c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2ea0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2ea2:	c6 de       	rcall	.-628    	; 0x2c30 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ea4:	cf 70       	andi	r28, 0x0F	; 15
    2ea6:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2eaa:	cf 91       	pop	r28
    2eac:	08 95       	ret

00002eae <eeprom_read_byte>:
    2eae:	f9 99       	sbic	0x1f, 1	; 31
    2eb0:	fe cf       	rjmp	.-4      	; 0x2eae <eeprom_read_byte>
    2eb2:	92 bd       	out	0x22, r25	; 34
    2eb4:	81 bd       	out	0x21, r24	; 33
    2eb6:	f8 9a       	sbi	0x1f, 0	; 31
    2eb8:	99 27       	eor	r25, r25
    2eba:	80 b5       	in	r24, 0x20	; 32
    2ebc:	08 95       	ret

00002ebe <eeprom_update_byte>:
    2ebe:	26 2f       	mov	r18, r22

00002ec0 <eeprom_update_r18>:
    2ec0:	f9 99       	sbic	0x1f, 1	; 31
    2ec2:	fe cf       	rjmp	.-4      	; 0x2ec0 <eeprom_update_r18>
    2ec4:	92 bd       	out	0x22, r25	; 34
    2ec6:	81 bd       	out	0x21, r24	; 33
    2ec8:	f8 9a       	sbi	0x1f, 0	; 31
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	00 b4       	in	r0, 0x20	; 32
    2ece:	02 16       	cp	r0, r18
    2ed0:	39 f0       	breq	.+14     	; 0x2ee0 <eeprom_update_r18+0x20>
    2ed2:	1f ba       	out	0x1f, r1	; 31
    2ed4:	20 bd       	out	0x20, r18	; 32
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	fa 9a       	sbi	0x1f, 2	; 31
    2edc:	f9 9a       	sbi	0x1f, 1	; 31
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	08 95       	ret

00002ee2 <_exit>:
    2ee2:	f8 94       	cli

00002ee4 <__stop_program>:
    2ee4:	ff cf       	rjmp	.-2      	; 0x2ee4 <__stop_program>
